/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma";
exports.ids = ["vendor-chunks/@prisma"];
exports.modules = {

/***/ "(ssr)/./node_modules/@prisma/client/default.js":
/*!************************************************!*\
  !*** ./node_modules/@prisma/client/default.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n    ...__webpack_require__(/*! .prisma/client/default */ \"(ssr)/./node_modules/.prisma/client/default.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvZGVmYXVsdC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2YsR0FBR0MsbUJBQU9BLENBQUMsK0VBQXlCO0FBQ3RDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGVkLXF1b3RlLWJ1aWxkZXIvLi9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvZGVmYXVsdC5qcz82NTE0Il0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAuLi5yZXF1aXJlKCcucHJpc21hL2NsaWVudC9kZWZhdWx0JyksXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@prisma/client/default.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@prisma/client/runtime/library.js":
/*!********************************************************!*\
  !*** ./node_modules/@prisma/client/runtime/library.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar eu = Object.create;\nvar Nr = Object.defineProperty;\nvar tu = Object.getOwnPropertyDescriptor;\nvar ru = Object.getOwnPropertyNames;\nvar nu = Object.getPrototypeOf, iu = Object.prototype.hasOwnProperty;\nvar Z = (e1, t1)=>()=>(t1 || e1((t1 = {\n            exports: {}\n        }).exports, t1), t1.exports), Ut = (e1, t1)=>{\n    for(var r1 in t1)Nr(e1, r1, {\n        get: t1[r1],\n        enumerable: !0\n    });\n}, ho = (e1, t1, r1, n1)=>{\n    if (t1 && typeof t1 == \"object\" || typeof t1 == \"function\") for (let i1 of ru(t1))!iu.call(e1, i1) && i1 !== r1 && Nr(e1, i1, {\n        get: ()=>t1[i1],\n        enumerable: !(n1 = tu(t1, i1)) || n1.enumerable\n    });\n    return e1;\n};\nvar k = (e1, t1, r1)=>(r1 = e1 != null ? eu(nu(e1)) : {}, ho(t1 || !e1 || !e1.__esModule ? Nr(r1, \"default\", {\n        value: e1,\n        enumerable: !0\n    }) : r1, e1)), ou = (e1)=>ho(Nr({}, \"__esModule\", {\n        value: !0\n    }), e1);\nvar jo = Z((pf1, Zn1)=>{\n    \"use strict\";\n    var v1 = Zn1.exports;\n    Zn1.exports.default = v1;\n    var D1 = \"\\x1b[\", Ht1 = \"\\x1b]\", ft1 = \"\\x07\", Jr1 = \";\", qo1 = process.env.TERM_PROGRAM === \"Apple_Terminal\";\n    v1.cursorTo = (e1, t1)=>{\n        if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n        return typeof t1 != \"number\" ? D1 + (e1 + 1) + \"G\" : D1 + (t1 + 1) + \";\" + (e1 + 1) + \"H\";\n    };\n    v1.cursorMove = (e1, t1)=>{\n        if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n        let r1 = \"\";\n        return e1 < 0 ? r1 += D1 + -e1 + \"D\" : e1 > 0 && (r1 += D1 + e1 + \"C\"), t1 < 0 ? r1 += D1 + -t1 + \"A\" : t1 > 0 && (r1 += D1 + t1 + \"B\"), r1;\n    };\n    v1.cursorUp = (e1 = 1)=>D1 + e1 + \"A\";\n    v1.cursorDown = (e1 = 1)=>D1 + e1 + \"B\";\n    v1.cursorForward = (e1 = 1)=>D1 + e1 + \"C\";\n    v1.cursorBackward = (e1 = 1)=>D1 + e1 + \"D\";\n    v1.cursorLeft = D1 + \"G\";\n    v1.cursorSavePosition = qo1 ? \"\\x1b7\" : D1 + \"s\";\n    v1.cursorRestorePosition = qo1 ? \"\\x1b8\" : D1 + \"u\";\n    v1.cursorGetPosition = D1 + \"6n\";\n    v1.cursorNextLine = D1 + \"E\";\n    v1.cursorPrevLine = D1 + \"F\";\n    v1.cursorHide = D1 + \"?25l\";\n    v1.cursorShow = D1 + \"?25h\";\n    v1.eraseLines = (e1)=>{\n        let t1 = \"\";\n        for(let r1 = 0; r1 < e1; r1++)t1 += v1.eraseLine + (r1 < e1 - 1 ? v1.cursorUp() : \"\");\n        return e1 && (t1 += v1.cursorLeft), t1;\n    };\n    v1.eraseEndLine = D1 + \"K\";\n    v1.eraseStartLine = D1 + \"1K\";\n    v1.eraseLine = D1 + \"2K\";\n    v1.eraseDown = D1 + \"J\";\n    v1.eraseUp = D1 + \"1J\";\n    v1.eraseScreen = D1 + \"2J\";\n    v1.scrollUp = D1 + \"S\";\n    v1.scrollDown = D1 + \"T\";\n    v1.clearScreen = \"\\x1bc\";\n    v1.clearTerminal = process.platform === \"win32\" ? `${v1.eraseScreen}${D1}0f` : `${v1.eraseScreen}${D1}3J${D1}H`;\n    v1.beep = ft1;\n    v1.link = (e1, t1)=>[\n            Ht1,\n            \"8\",\n            Jr1,\n            Jr1,\n            t1,\n            ft1,\n            e1,\n            Ht1,\n            \"8\",\n            Jr1,\n            Jr1,\n            ft1\n        ].join(\"\");\n    v1.image = (e1, t1 = {})=>{\n        let r1 = `${Ht1}1337;File=inline=1`;\n        return t1.width && (r1 += `;width=${t1.width}`), t1.height && (r1 += `;height=${t1.height}`), t1.preserveAspectRatio === !1 && (r1 += \";preserveAspectRatio=0\"), r1 + \":\" + e1.toString(\"base64\") + ft1;\n    };\n    v1.iTerm = {\n        setCwd: (e1 = process.cwd())=>`${Ht1}50;CurrentDir=${e1}${ft1}`,\n        annotation: (e1, t1 = {})=>{\n            let r1 = `${Ht1}1337;`, n1 = typeof t1.x < \"u\", i1 = typeof t1.y < \"u\";\n            if ((n1 || i1) && !(n1 && i1 && typeof t1.length < \"u\")) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n            return e1 = e1.replace(/\\|/g, \"\"), r1 += t1.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", t1.length > 0 ? r1 += (n1 ? [\n                e1,\n                t1.length,\n                t1.x,\n                t1.y\n            ] : [\n                t1.length,\n                e1\n            ]).join(\"|\") : r1 += e1, r1 + ft1;\n        }\n    };\n});\nvar Xn = Z((df1, Vo1)=>{\n    \"use strict\";\n    Vo1.exports = (e1, t1 = process.argv)=>{\n        let r1 = e1.startsWith(\"-\") ? \"\" : e1.length === 1 ? \"-\" : \"--\", n1 = t1.indexOf(r1 + e1), i1 = t1.indexOf(\"--\");\n        return n1 !== -1 && (i1 === -1 || n1 < i1);\n    };\n});\nvar Go = Z((mf1, Uo1)=>{\n    \"use strict\";\n    var Gu1 = __webpack_require__(/*! os */ \"os\"), Bo1 = __webpack_require__(/*! tty */ \"tty\"), de1 = Xn(), { env: Q1 } = process, Qe1;\n    de1(\"no-color\") || de1(\"no-colors\") || de1(\"color=false\") || de1(\"color=never\") ? Qe1 = 0 : (de1(\"color\") || de1(\"colors\") || de1(\"color=true\") || de1(\"color=always\")) && (Qe1 = 1);\n    \"FORCE_COLOR\" in Q1 && (Q1.FORCE_COLOR === \"true\" ? Qe1 = 1 : Q1.FORCE_COLOR === \"false\" ? Qe1 = 0 : Qe1 = Q1.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(Q1.FORCE_COLOR, 10), 3));\n    function ei1(e1) {\n        return e1 === 0 ? !1 : {\n            level: e1,\n            hasBasic: !0,\n            has256: e1 >= 2,\n            has16m: e1 >= 3\n        };\n    }\n    function ti1(e1, t1) {\n        if (Qe1 === 0) return 0;\n        if (de1(\"color=16m\") || de1(\"color=full\") || de1(\"color=truecolor\")) return 3;\n        if (de1(\"color=256\")) return 2;\n        if (e1 && !t1 && Qe1 === void 0) return 0;\n        let r1 = Qe1 || 0;\n        if (Q1.TERM === \"dumb\") return r1;\n        if (process.platform === \"win32\") {\n            let n1 = Gu1.release().split(\".\");\n            return Number(n1[0]) >= 10 && Number(n1[2]) >= 10586 ? Number(n1[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in Q1) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n1)=>n1 in Q1) || Q1.CI_NAME === \"codeship\" ? 1 : r1;\n        if (\"TEAMCITY_VERSION\" in Q1) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(Q1.TEAMCITY_VERSION) ? 1 : 0;\n        if (Q1.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in Q1) {\n            let n1 = parseInt((Q1.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(Q1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n1 >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(Q1.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(Q1.TERM) || \"COLORTERM\" in Q1 ? 1 : r1;\n    }\n    function Qu1(e1) {\n        let t1 = ti1(e1, e1 && e1.isTTY);\n        return ei1(t1);\n    }\n    Uo1.exports = {\n        supportsColor: Qu1,\n        stdout: ei1(ti1(!0, Bo1.isatty(1))),\n        stderr: ei1(ti1(!0, Bo1.isatty(2)))\n    };\n});\nvar Wo = Z((ff1, Jo1)=>{\n    \"use strict\";\n    var Ju1 = Go(), gt1 = Xn();\n    function Qo1(e1) {\n        if (/^\\d{3,4}$/.test(e1)) {\n            let r1 = /(\\d{1,2})(\\d{2})/.exec(e1);\n            return {\n                major: 0,\n                minor: parseInt(r1[1], 10),\n                patch: parseInt(r1[2], 10)\n            };\n        }\n        let t1 = (e1 || \"\").split(\".\").map((r1)=>parseInt(r1, 10));\n        return {\n            major: t1[0],\n            minor: t1[1],\n            patch: t1[2]\n        };\n    }\n    function ri1(e1) {\n        let { env: t1 } = process;\n        if (\"FORCE_HYPERLINK\" in t1) return !(t1.FORCE_HYPERLINK.length > 0 && parseInt(t1.FORCE_HYPERLINK, 10) === 0);\n        if (gt1(\"no-hyperlink\") || gt1(\"no-hyperlinks\") || gt1(\"hyperlink=false\") || gt1(\"hyperlink=never\")) return !1;\n        if (gt1(\"hyperlink=true\") || gt1(\"hyperlink=always\") || \"NETLIFY\" in t1) return !0;\n        if (!Ju1.supportsColor(e1) || e1 && !e1.isTTY || process.platform === \"win32\" || \"CI\" in t1 || \"TEAMCITY_VERSION\" in t1) return !1;\n        if (\"TERM_PROGRAM\" in t1) {\n            let r1 = Qo1(t1.TERM_PROGRAM_VERSION);\n            switch(t1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return r1.major === 3 ? r1.minor >= 1 : r1.major > 3;\n                case \"WezTerm\":\n                    return r1.major >= 20200620;\n                case \"vscode\":\n                    return r1.major > 1 || r1.major === 1 && r1.minor >= 72;\n            }\n        }\n        if (\"VTE_VERSION\" in t1) {\n            if (t1.VTE_VERSION === \"0.50.0\") return !1;\n            let r1 = Qo1(t1.VTE_VERSION);\n            return r1.major > 0 || r1.minor >= 50;\n        }\n        return !1;\n    }\n    Jo1.exports = {\n        supportsHyperlink: ri1,\n        stdout: ri1(process.stdout),\n        stderr: ri1(process.stderr)\n    };\n});\nvar Ko = Z((gf1, Kt1)=>{\n    \"use strict\";\n    var Wu1 = jo(), ni1 = Wo(), Ho1 = (e1, t1, { target: r1 = \"stdout\", ...n1 } = {})=>ni1[r1] ? Wu1.link(e1, t1) : n1.fallback === !1 ? e1 : typeof n1.fallback == \"function\" ? n1.fallback(e1, t1) : `${e1} (\\u200B${t1}\\u200B)`;\n    Kt1.exports = (e1, t1, r1 = {})=>Ho1(e1, t1, r1);\n    Kt1.exports.stderr = (e1, t1, r1 = {})=>Ho1(e1, t1, {\n            target: \"stderr\",\n            ...r1\n        });\n    Kt1.exports.isSupported = ni1.stdout;\n    Kt1.exports.stderr.isSupported = ni1.stderr;\n});\nvar oi = Z((Rf1, Hu1)=>{\n    Hu1.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"605197351a3c8bdd595af2d2a9bc3025bca48ea2\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.34\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar si = Z((Wr1)=>{\n    \"use strict\";\n    Object.defineProperty(Wr1, \"__esModule\", {\n        value: !0\n    });\n    Wr1.enginesVersion = void 0;\n    Wr1.enginesVersion = oi().prisma.enginesVersion;\n});\nvar Xo = Z((Gf1, Yu1)=>{\n    Yu1.exports = {\n        name: \"dotenv\",\n        version: \"16.0.3\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                require: \"./lib/main.js\",\n                types: \"./lib/main.d.ts\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            \"lint-readme\": \"standard-markdown\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap tests/*.js --100 -Rspec\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^17.0.9\",\n            decache: \"^4.6.1\",\n            dtslint: \"^3.7.0\",\n            sinon: \"^12.0.1\",\n            standard: \"^16.0.4\",\n            \"standard-markdown\": \"^7.1.0\",\n            \"standard-version\": \"^9.3.2\",\n            tap: \"^15.1.6\",\n            tar: \"^6.1.11\",\n            typescript: \"^4.5.4\"\n        },\n        engines: {\n            node: \">=12\"\n        }\n    };\n});\nvar ts = Z((Qf1, Kr1)=>{\n    \"use strict\";\n    var Zu1 = __webpack_require__(/*! fs */ \"fs\"), es1 = __webpack_require__(/*! path */ \"path\"), Xu1 = __webpack_require__(/*! os */ \"os\"), ec1 = Xo(), tc1 = ec1.version, rc1 = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function nc1(e1) {\n        let t1 = {}, r1 = e1.toString();\n        r1 = r1.replace(/\\r\\n?/mg, `\n`);\n        let n1;\n        for(; (n1 = rc1.exec(r1)) != null;){\n            let i1 = n1[1], o1 = n1[2] || \"\";\n            o1 = o1.trim();\n            let s1 = o1[0];\n            o1 = o1.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s1 === '\"' && (o1 = o1.replace(/\\\\n/g, `\n`), o1 = o1.replace(/\\\\r/g, \"\\r\")), t1[i1] = o1;\n        }\n        return t1;\n    }\n    function ci1(e1) {\n        console.log(`[dotenv@${tc1}][DEBUG] ${e1}`);\n    }\n    function ic1(e1) {\n        return e1[0] === \"~\" ? es1.join(Xu1.homedir(), e1.slice(1)) : e1;\n    }\n    function oc1(e1) {\n        let t1 = es1.resolve(process.cwd(), \".env\"), r1 = \"utf8\", n1 = !!(e1 && e1.debug), i1 = !!(e1 && e1.override);\n        e1 && (e1.path != null && (t1 = ic1(e1.path)), e1.encoding != null && (r1 = e1.encoding));\n        try {\n            let o1 = Hr1.parse(Zu1.readFileSync(t1, {\n                encoding: r1\n            }));\n            return Object.keys(o1).forEach(function(s1) {\n                Object.prototype.hasOwnProperty.call(process.env, s1) ? (i1 === !0 && (process.env[s1] = o1[s1]), n1 && ci1(i1 === !0 ? `\"${s1}\" is already defined in \\`process.env\\` and WAS overwritten` : `\"${s1}\" is already defined in \\`process.env\\` and was NOT overwritten`)) : process.env[s1] = o1[s1];\n            }), {\n                parsed: o1\n            };\n        } catch (o1) {\n            return n1 && ci1(`Failed to load ${t1} ${o1.message}`), {\n                error: o1\n            };\n        }\n    }\n    var Hr1 = {\n        config: oc1,\n        parse: nc1\n    };\n    Kr1.exports.config = Hr1.config;\n    Kr1.exports.parse = Hr1.parse;\n    Kr1.exports = Hr1;\n});\nvar as = Z((Zf1, ss1)=>{\n    \"use strict\";\n    ss1.exports = (e1)=>{\n        let t1 = e1.match(/^[ \\t]*(?=\\S)/gm);\n        return t1 ? t1.reduce((r1, n1)=>Math.min(r1, n1.length), 1 / 0) : 0;\n    };\n});\nvar us = Z((Xf1, ls1)=>{\n    \"use strict\";\n    var uc1 = as();\n    ls1.exports = (e1)=>{\n        let t1 = uc1(e1);\n        if (t1 === 0) return e1;\n        let r1 = new RegExp(`^[ \\\\t]{${t1}}`, \"gm\");\n        return e1.replace(r1, \"\");\n    };\n});\nvar fi = Z((og1, cs1)=>{\n    \"use strict\";\n    cs1.exports = (e1, t1 = 1, r1)=>{\n        if (r1 = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...r1\n        }, typeof e1 != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e1}\\``);\n        if (typeof t1 != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof t1}\\``);\n        if (typeof r1.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof r1.indent}\\``);\n        if (t1 === 0) return e1;\n        let n1 = r1.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e1.replace(n1, r1.indent.repeat(t1));\n    };\n});\nvar fs = Z((lg1, ms1)=>{\n    \"use strict\";\n    ms1.exports = ({ onlyFirst: e1 = !1 } = {})=>{\n        let t1 = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(t1, e1 ? void 0 : \"g\");\n    };\n});\nvar bi = Z((ug1, gs1)=>{\n    \"use strict\";\n    var yc1 = fs();\n    gs1.exports = (e1)=>typeof e1 == \"string\" ? e1.replace(yc1(), \"\") : e1;\n});\nvar hs = Z((dg1, Zr1)=>{\n    \"use strict\";\n    Zr1.exports = (e1 = {})=>{\n        let t1;\n        if (e1.repoUrl) t1 = e1.repoUrl;\n        else if (e1.user && e1.repo) t1 = `https://github.com/${e1.user}/${e1.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let r1 = new URL(`${t1}/issues/new`), n1 = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i1 of n1){\n            let o1 = e1[i1];\n            if (o1 !== void 0) {\n                if (i1 === \"labels\" || i1 === \"projects\") {\n                    if (!Array.isArray(o1)) throw new TypeError(`The \\`${i1}\\` option should be an array`);\n                    o1 = o1.join(\",\");\n                }\n                r1.searchParams.set(i1, o1);\n            }\n        }\n        return r1.toString();\n    };\n    Zr1.exports.default = Zr1.exports;\n});\nvar Ai = Z((Th1, $s1)=>{\n    \"use strict\";\n    $s1.exports = function() {\n        function e1(t1, r1, n1, i1, o1) {\n            return t1 < r1 || n1 < r1 ? t1 > n1 ? n1 + 1 : t1 + 1 : i1 === o1 ? r1 : r1 + 1;\n        }\n        return function(t1, r1) {\n            if (t1 === r1) return 0;\n            if (t1.length > r1.length) {\n                var n1 = t1;\n                t1 = r1, r1 = n1;\n            }\n            for(var i1 = t1.length, o1 = r1.length; i1 > 0 && t1.charCodeAt(i1 - 1) === r1.charCodeAt(o1 - 1);)i1--, o1--;\n            for(var s1 = 0; s1 < i1 && t1.charCodeAt(s1) === r1.charCodeAt(s1);)s1++;\n            if (i1 -= s1, o1 -= s1, i1 === 0 || o1 < 3) return o1;\n            var a1 = 0, l1, u1, c1, p1, d1, f1, g1, h1, O1, T1, S1, C1, E1 = [];\n            for(l1 = 0; l1 < i1; l1++)E1.push(l1 + 1), E1.push(t1.charCodeAt(s1 + l1));\n            for(var me1 = E1.length - 1; a1 < o1 - 3;)for(O1 = r1.charCodeAt(s1 + (u1 = a1)), T1 = r1.charCodeAt(s1 + (c1 = a1 + 1)), S1 = r1.charCodeAt(s1 + (p1 = a1 + 2)), C1 = r1.charCodeAt(s1 + (d1 = a1 + 3)), f1 = a1 += 4, l1 = 0; l1 < me1; l1 += 2)g1 = E1[l1], h1 = E1[l1 + 1], u1 = e1(g1, u1, c1, O1, h1), c1 = e1(u1, c1, p1, T1, h1), p1 = e1(c1, p1, d1, S1, h1), f1 = e1(p1, d1, f1, C1, h1), E1[l1] = f1, d1 = p1, p1 = c1, c1 = u1, u1 = g1;\n            for(; a1 < o1;)for(O1 = r1.charCodeAt(s1 + (u1 = a1)), f1 = ++a1, l1 = 0; l1 < me1; l1 += 2)g1 = E1[l1], E1[l1] = f1 = e1(g1, u1, f1, O1, E1[l1 + 1]), u1 = g1;\n            return f1;\n        };\n    }();\n});\nvar Nm = {};\nUt(Nm, {\n    Debug: ()=>Gn,\n    Decimal: ()=>xe,\n    Extensions: ()=>jn,\n    MetricsClient: ()=>Dt,\n    NotFoundError: ()=>Le,\n    PrismaClientInitializationError: ()=>R,\n    PrismaClientKnownRequestError: ()=>V,\n    PrismaClientRustPanicError: ()=>le,\n    PrismaClientUnknownRequestError: ()=>B,\n    PrismaClientValidationError: ()=>J,\n    Public: ()=>Vn,\n    Sql: ()=>oe,\n    defineDmmfProperty: ()=>ua,\n    deserializeJsonResponse: ()=>wt,\n    dmmfToRuntimeDataModel: ()=>la,\n    empty: ()=>ma,\n    getPrismaClient: ()=>Yl,\n    getRuntime: ()=>In,\n    join: ()=>da,\n    makeStrictEnum: ()=>Zl,\n    makeTypedQueryFactory: ()=>ca,\n    objectEnumValues: ()=>yn,\n    raw: ()=>ji,\n    serializeJsonQuery: ()=>vn,\n    skip: ()=>Pn,\n    sqltag: ()=>Vi,\n    warnEnvConflicts: ()=>Xl,\n    warnOnce: ()=>tr\n});\nmodule.exports = ou(Nm);\nvar jn = {};\nUt(jn, {\n    defineExtension: ()=>yo,\n    getExtensionContext: ()=>bo\n});\nfunction yo(e1) {\n    return typeof e1 == \"function\" ? e1 : (t1)=>t1.$extends(e1);\n}\nfunction bo(e1) {\n    return e1;\n}\nvar Vn = {};\nUt(Vn, {\n    validator: ()=>Eo\n});\nfunction Eo(...e1) {\n    return (t1)=>t1;\n}\nvar Mr = {};\nUt(Mr, {\n    $: ()=>To,\n    bgBlack: ()=>gu,\n    bgBlue: ()=>Eu,\n    bgCyan: ()=>xu,\n    bgGreen: ()=>yu,\n    bgMagenta: ()=>wu,\n    bgRed: ()=>hu,\n    bgWhite: ()=>Pu,\n    bgYellow: ()=>bu,\n    black: ()=>pu,\n    blue: ()=>rt,\n    bold: ()=>H,\n    cyan: ()=>De,\n    dim: ()=>Oe,\n    gray: ()=>Gt,\n    green: ()=>qe,\n    grey: ()=>fu,\n    hidden: ()=>uu,\n    inverse: ()=>lu,\n    italic: ()=>au,\n    magenta: ()=>du,\n    red: ()=>ce,\n    reset: ()=>su,\n    strikethrough: ()=>cu,\n    underline: ()=>X,\n    white: ()=>mu,\n    yellow: ()=>ke\n});\nvar Bn, wo, xo, Po, vo = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: Bn, NODE_DISABLE_COLORS: wo, NO_COLOR: xo, TERM: Po } = process.env || {}, vo = process.stdout && process.stdout.isTTY);\nvar To = {\n    enabled: !wo && xo == null && Po !== \"dumb\" && (Bn != null && Bn !== \"0\" || vo)\n};\nfunction M(e1, t1) {\n    let r1 = new RegExp(`\\\\x1b\\\\[${t1}m`, \"g\"), n1 = `\\x1B[${e1}m`, i1 = `\\x1B[${t1}m`;\n    return function(o1) {\n        return !To.enabled || o1 == null ? o1 : n1 + (~(\"\" + o1).indexOf(i1) ? o1.replace(r1, i1 + n1) : o1) + i1;\n    };\n}\nvar su = M(0, 0), H = M(1, 22), Oe = M(2, 22), au = M(3, 23), X = M(4, 24), lu = M(7, 27), uu = M(8, 28), cu = M(9, 29), pu = M(30, 39), ce = M(31, 39), qe = M(32, 39), ke = M(33, 39), rt = M(34, 39), du = M(35, 39), De = M(36, 39), mu = M(37, 39), Gt = M(90, 39), fu = M(90, 39), gu = M(40, 49), hu = M(41, 49), yu = M(42, 49), bu = M(43, 49), Eu = M(44, 49), wu = M(45, 49), xu = M(46, 49), Pu = M(47, 49);\nvar vu = 100, Ro = [\n    \"green\",\n    \"yellow\",\n    \"blue\",\n    \"magenta\",\n    \"cyan\",\n    \"red\"\n], Qt = [], Co = Date.now(), Tu = 0, Un = typeof process < \"u\" ? process.env : {};\nglobalThis.DEBUG ??= Un.DEBUG ?? \"\";\nglobalThis.DEBUG_COLORS ??= Un.DEBUG_COLORS ? Un.DEBUG_COLORS === \"true\" : !0;\nvar Jt = {\n    enable (e1) {\n        typeof e1 == \"string\" && (globalThis.DEBUG = e1);\n    },\n    disable () {\n        let e1 = globalThis.DEBUG;\n        return globalThis.DEBUG = \"\", e1;\n    },\n    enabled (e1) {\n        let t1 = globalThis.DEBUG.split(\",\").map((i1)=>i1.replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\")), r1 = t1.some((i1)=>i1 === \"\" || i1[0] === \"-\" ? !1 : e1.match(RegExp(i1.split(\"*\").join(\".*\") + \"$\"))), n1 = t1.some((i1)=>i1 === \"\" || i1[0] !== \"-\" ? !1 : e1.match(RegExp(i1.slice(1).split(\"*\").join(\".*\") + \"$\")));\n        return r1 && !n1;\n    },\n    log: (...e1)=>{\n        let [t1, r1, ...n1] = e1;\n        (console.warn ?? console.log)(`${t1} ${r1}`, ...n1);\n    },\n    formatters: {}\n};\nfunction Ru(e1) {\n    let t1 = {\n        color: Ro[Tu++ % Ro.length],\n        enabled: Jt.enabled(e1),\n        namespace: e1,\n        log: Jt.log,\n        extend: ()=>{}\n    }, r1 = (...n1)=>{\n        let { enabled: i1, namespace: o1, color: s1, log: a1 } = t1;\n        if (n1.length !== 0 && Qt.push([\n            o1,\n            ...n1\n        ]), Qt.length > vu && Qt.shift(), Jt.enabled(o1) || i1) {\n            let l1 = n1.map((c1)=>typeof c1 == \"string\" ? c1 : Cu(c1)), u1 = `+${Date.now() - Co}ms`;\n            Co = Date.now(), globalThis.DEBUG_COLORS ? a1(Mr[s1](H(o1)), ...l1, Mr[s1](u1)) : a1(o1, ...l1, u1);\n        }\n    };\n    return new Proxy(r1, {\n        get: (n1, i1)=>t1[i1],\n        set: (n1, i1, o1)=>t1[i1] = o1\n    });\n}\nvar Gn = new Proxy(Ru, {\n    get: (e1, t1)=>Jt[t1],\n    set: (e1, t1, r1)=>Jt[t1] = r1\n});\nfunction Cu(e1, t1 = 2) {\n    let r1 = new Set;\n    return JSON.stringify(e1, (n1, i1)=>{\n        if (typeof i1 == \"object\" && i1 !== null) {\n            if (r1.has(i1)) return \"[Circular *]\";\n            r1.add(i1);\n        } else if (typeof i1 == \"bigint\") return i1.toString();\n        return i1;\n    }, t1);\n}\nfunction So(e1 = 7500) {\n    let t1 = Qt.map(([r1, ...n1])=>`${r1} ${n1.map((i1)=>typeof i1 == \"string\" ? i1 : JSON.stringify(i1)).join(\" \")}`).join(`\n`);\n    return t1.length < e1 ? t1 : t1.slice(-e1);\n}\nfunction Ao() {\n    Qt.length = 0;\n}\nvar L = Gn;\nvar Io = k(__webpack_require__(/*! fs */ \"fs\"));\nfunction Qn() {\n    let e1 = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e1 && Io.default.existsSync(e1)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar Jn = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"freebsd15\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar $r = \"libquery_engine\";\nfunction qr(e1, t1) {\n    let r1 = t1 === \"url\";\n    return e1.includes(\"windows\") ? r1 ? \"query_engine.dll.node\" : `query_engine-${e1}.dll.node` : e1.includes(\"darwin\") ? r1 ? `${$r}.dylib.node` : `${$r}-${e1}.dylib.node` : r1 ? `${$r}.so.node` : `${$r}-${e1}.so.node`;\n}\nvar _o = k(__webpack_require__(/*! child_process */ \"child_process\")), zn = k(__webpack_require__(/*! fs/promises */ \"fs/promises\")), Gr = k(__webpack_require__(/*! os */ \"os\"));\nvar _e = Symbol.for(\"@ts-pattern/matcher\"), Su = Symbol.for(\"@ts-pattern/isVariadic\"), Vr = \"@ts-pattern/anonymous-select-key\", Wn = (e1)=>!!(e1 && typeof e1 == \"object\"), jr = (e1)=>e1 && !!e1[_e], Ee = (e1, t1, r1)=>{\n    if (jr(e1)) {\n        let n1 = e1[_e](), { matched: i1, selections: o1 } = n1.match(t1);\n        return i1 && o1 && Object.keys(o1).forEach((s1)=>r1(s1, o1[s1])), i1;\n    }\n    if (Wn(e1)) {\n        if (!Wn(t1)) return !1;\n        if (Array.isArray(e1)) {\n            if (!Array.isArray(t1)) return !1;\n            let n1 = [], i1 = [], o1 = [];\n            for (let s1 of e1.keys()){\n                let a1 = e1[s1];\n                jr(a1) && a1[Su] ? o1.push(a1) : o1.length ? i1.push(a1) : n1.push(a1);\n            }\n            if (o1.length) {\n                if (o1.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (t1.length < n1.length + i1.length) return !1;\n                let s1 = t1.slice(0, n1.length), a1 = i1.length === 0 ? [] : t1.slice(-i1.length), l1 = t1.slice(n1.length, i1.length === 0 ? 1 / 0 : -i1.length);\n                return n1.every((u1, c1)=>Ee(u1, s1[c1], r1)) && i1.every((u1, c1)=>Ee(u1, a1[c1], r1)) && (o1.length === 0 || Ee(o1[0], l1, r1));\n            }\n            return e1.length === t1.length && e1.every((s1, a1)=>Ee(s1, t1[a1], r1));\n        }\n        return Object.keys(e1).every((n1)=>{\n            let i1 = e1[n1];\n            return (n1 in t1 || jr(o1 = i1) && o1[_e]().matcherType === \"optional\") && Ee(i1, t1[n1], r1);\n            var o1;\n        });\n    }\n    return Object.is(t1, e1);\n}, Ge = (e1)=>{\n    var t1, r1, n1;\n    return Wn(e1) ? jr(e1) ? (t1 = (r1 = (n1 = e1[_e]()).getSelectionKeys) == null ? void 0 : r1.call(n1)) != null ? t1 : [] : Array.isArray(e1) ? Wt(e1, Ge) : Wt(Object.values(e1), Ge) : [];\n}, Wt = (e1, t1)=>e1.reduce((r1, n1)=>r1.concat(t1(n1)), []);\nfunction pe(e1) {\n    return Object.assign(e1, {\n        optional: ()=>Au(e1),\n        and: (t1)=>j(e1, t1),\n        or: (t1)=>Iu(e1, t1),\n        select: (t1)=>t1 === void 0 ? Oo(e1) : Oo(t1, e1)\n    });\n}\nfunction Au(e1) {\n    return pe({\n        [_e]: ()=>({\n                match: (t1)=>{\n                    let r1 = {}, n1 = (i1, o1)=>{\n                        r1[i1] = o1;\n                    };\n                    return t1 === void 0 ? (Ge(e1).forEach((i1)=>n1(i1, void 0)), {\n                        matched: !0,\n                        selections: r1\n                    }) : {\n                        matched: Ee(e1, t1, n1),\n                        selections: r1\n                    };\n                },\n                getSelectionKeys: ()=>Ge(e1),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction j(...e1) {\n    return pe({\n        [_e]: ()=>({\n                match: (t1)=>{\n                    let r1 = {}, n1 = (i1, o1)=>{\n                        r1[i1] = o1;\n                    };\n                    return {\n                        matched: e1.every((i1)=>Ee(i1, t1, n1)),\n                        selections: r1\n                    };\n                },\n                getSelectionKeys: ()=>Wt(e1, Ge),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction Iu(...e1) {\n    return pe({\n        [_e]: ()=>({\n                match: (t1)=>{\n                    let r1 = {}, n1 = (i1, o1)=>{\n                        r1[i1] = o1;\n                    };\n                    return Wt(e1, Ge).forEach((i1)=>n1(i1, void 0)), {\n                        matched: e1.some((i1)=>Ee(i1, t1, n1)),\n                        selections: r1\n                    };\n                },\n                getSelectionKeys: ()=>Wt(e1, Ge),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction I(e1) {\n    return {\n        [_e]: ()=>({\n                match: (t1)=>({\n                        matched: !!e1(t1)\n                    })\n            })\n    };\n}\nfunction Oo(...e1) {\n    let t1 = typeof e1[0] == \"string\" ? e1[0] : void 0, r1 = e1.length === 2 ? e1[1] : typeof e1[0] == \"string\" ? void 0 : e1[0];\n    return pe({\n        [_e]: ()=>({\n                match: (n1)=>{\n                    let i1 = {\n                        [t1 ?? Vr]: n1\n                    };\n                    return {\n                        matched: r1 === void 0 || Ee(r1, n1, (o1, s1)=>{\n                            i1[o1] = s1;\n                        }),\n                        selections: i1\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        t1 ?? Vr\n                    ].concat(r1 === void 0 ? [] : Ge(r1))\n            })\n    });\n}\nfunction ye(e1) {\n    return typeof e1 == \"number\";\n}\nfunction je(e1) {\n    return typeof e1 == \"string\";\n}\nfunction Ve(e1) {\n    return typeof e1 == \"bigint\";\n}\nvar Km = pe(I(function(e1) {\n    return !0;\n}));\nvar Be = (e1)=>Object.assign(pe(e1), {\n        startsWith: (t1)=>{\n            return Be(j(e1, (r1 = t1, I((n1)=>je(n1) && n1.startsWith(r1)))));\n            var r1;\n        },\n        endsWith: (t1)=>{\n            return Be(j(e1, (r1 = t1, I((n1)=>je(n1) && n1.endsWith(r1)))));\n            var r1;\n        },\n        minLength: (t1)=>Be(j(e1, ((r1)=>I((n1)=>je(n1) && n1.length >= r1))(t1))),\n        length: (t1)=>Be(j(e1, ((r1)=>I((n1)=>je(n1) && n1.length === r1))(t1))),\n        maxLength: (t1)=>Be(j(e1, ((r1)=>I((n1)=>je(n1) && n1.length <= r1))(t1))),\n        includes: (t1)=>{\n            return Be(j(e1, (r1 = t1, I((n1)=>je(n1) && n1.includes(r1)))));\n            var r1;\n        },\n        regex: (t1)=>{\n            return Be(j(e1, (r1 = t1, I((n1)=>je(n1) && !!n1.match(r1)))));\n            var r1;\n        }\n    }), zm = Be(I(je)), be = (e1)=>Object.assign(pe(e1), {\n        between: (t1, r1)=>be(j(e1, ((n1, i1)=>I((o1)=>ye(o1) && n1 <= o1 && i1 >= o1))(t1, r1))),\n        lt: (t1)=>be(j(e1, ((r1)=>I((n1)=>ye(n1) && n1 < r1))(t1))),\n        gt: (t1)=>be(j(e1, ((r1)=>I((n1)=>ye(n1) && n1 > r1))(t1))),\n        lte: (t1)=>be(j(e1, ((r1)=>I((n1)=>ye(n1) && n1 <= r1))(t1))),\n        gte: (t1)=>be(j(e1, ((r1)=>I((n1)=>ye(n1) && n1 >= r1))(t1))),\n        int: ()=>be(j(e1, I((t1)=>ye(t1) && Number.isInteger(t1)))),\n        finite: ()=>be(j(e1, I((t1)=>ye(t1) && Number.isFinite(t1)))),\n        positive: ()=>be(j(e1, I((t1)=>ye(t1) && t1 > 0))),\n        negative: ()=>be(j(e1, I((t1)=>ye(t1) && t1 < 0)))\n    }), Ym = be(I(ye)), Ue = (e1)=>Object.assign(pe(e1), {\n        between: (t1, r1)=>Ue(j(e1, ((n1, i1)=>I((o1)=>Ve(o1) && n1 <= o1 && i1 >= o1))(t1, r1))),\n        lt: (t1)=>Ue(j(e1, ((r1)=>I((n1)=>Ve(n1) && n1 < r1))(t1))),\n        gt: (t1)=>Ue(j(e1, ((r1)=>I((n1)=>Ve(n1) && n1 > r1))(t1))),\n        lte: (t1)=>Ue(j(e1, ((r1)=>I((n1)=>Ve(n1) && n1 <= r1))(t1))),\n        gte: (t1)=>Ue(j(e1, ((r1)=>I((n1)=>Ve(n1) && n1 >= r1))(t1))),\n        positive: ()=>Ue(j(e1, I((t1)=>Ve(t1) && t1 > 0))),\n        negative: ()=>Ue(j(e1, I((t1)=>Ve(t1) && t1 < 0)))\n    }), Zm = Ue(I(Ve)), Xm = pe(I(function(e1) {\n    return typeof e1 == \"boolean\";\n})), ef = pe(I(function(e1) {\n    return typeof e1 == \"symbol\";\n})), tf = pe(I(function(e1) {\n    return e1 == null;\n})), rf = pe(I(function(e1) {\n    return e1 != null;\n}));\nvar Hn = {\n    matched: !1,\n    value: void 0\n};\nfunction mt(e1) {\n    return new Kn(e1, Hn);\n}\nvar Kn = class e {\n    constructor(t1, r1){\n        this.input = void 0, this.state = void 0, this.input = t1, this.state = r1;\n    }\n    with(...t1) {\n        if (this.state.matched) return this;\n        let r1 = t1[t1.length - 1], n1 = [\n            t1[0]\n        ], i1;\n        t1.length === 3 && typeof t1[1] == \"function\" ? i1 = t1[1] : t1.length > 2 && n1.push(...t1.slice(1, t1.length - 1));\n        let o1 = !1, s1 = {}, a1 = (u1, c1)=>{\n            o1 = !0, s1[u1] = c1;\n        }, l1 = !n1.some((u1)=>Ee(u1, this.input, a1)) || i1 && !i1(this.input) ? Hn : {\n            matched: !0,\n            value: r1(o1 ? Vr in s1 ? s1[Vr] : s1 : this.input, this.input)\n        };\n        return new e(this.input, l1);\n    }\n    when(t1, r1) {\n        if (this.state.matched) return this;\n        let n1 = !!t1(this.input);\n        return new e(this.input, n1 ? {\n            matched: !0,\n            value: r1(this.input, this.input)\n        } : Hn);\n    }\n    otherwise(t1) {\n        return this.state.matched ? this.state.value : t1(this.input);\n    }\n    exhaustive() {\n        if (this.state.matched) return this.state.value;\n        let t1;\n        try {\n            t1 = JSON.stringify(this.input);\n        } catch  {\n            t1 = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t1}`);\n    }\n    run() {\n        return this.exhaustive();\n    }\n    returnType() {\n        return this;\n    }\n};\nvar Fo = __webpack_require__(/*! util */ \"util\");\nvar Ou = {\n    warn: ke(\"prisma:warn\")\n}, ku = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction Br(e1, ...t1) {\n    ku.warn() && console.warn(`${Ou.warn} ${e1}`, ...t1);\n}\nvar Du = (0, Fo.promisify)(_o.default.exec), te = L(\"prisma:get-platform\"), _u = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function Lo() {\n    let e1 = Gr.default.platform(), t1 = process.arch;\n    if (e1 === \"freebsd\") {\n        let s1 = await Qr(\"freebsd-version\");\n        if (s1 && s1.trim().length > 0) {\n            let l1 = /^(\\d+)\\.?/.exec(s1);\n            if (l1) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l1[1]}`,\n                arch: t1\n            };\n        }\n    }\n    if (e1 !== \"linux\") return {\n        platform: e1,\n        arch: t1\n    };\n    let r1 = await Lu(), n1 = await Uu(), i1 = Mu({\n        arch: t1,\n        archFromUname: n1,\n        familyDistro: r1.familyDistro\n    }), { libssl: o1 } = await $u(i1);\n    return {\n        platform: \"linux\",\n        libssl: o1,\n        arch: t1,\n        archFromUname: n1,\n        ...r1\n    };\n}\nfunction Fu(e1) {\n    let t1 = /^ID=\"?([^\"\\n]*)\"?$/im, r1 = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n1 = t1.exec(e1), i1 = n1 && n1[1] && n1[1].toLowerCase() || \"\", o1 = r1.exec(e1), s1 = o1 && o1[1] && o1[1].toLowerCase() || \"\", a1 = mt({\n        id: i1,\n        idLike: s1\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"musl\",\n            familyDistro: l1,\n            originalDistro: l1\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l1,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"debian\") || l1.includes(\"ubuntu\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>i1 === \"arch\" || l1.includes(\"arch\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"centos\") || l1.includes(\"fedora\") || l1.includes(\"rhel\") || l1.includes(\"suse\"), ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).otherwise(({ id: l1 })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l1\n        }));\n    return te(`Found distro info:\n${JSON.stringify(a1, null, 2)}`), a1;\n}\nasync function Lu() {\n    let e1 = \"/etc/os-release\";\n    try {\n        let t1 = await zn.default.readFile(e1, {\n            encoding: \"utf-8\"\n        });\n        return Fu(t1);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction Nu(e1) {\n    let t1 = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e1);\n    if (t1) {\n        let r1 = `${t1[1]}.x`;\n        return No(r1);\n    }\n}\nfunction ko(e1) {\n    let t1 = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e1);\n    if (t1) {\n        let r1 = `${t1[1]}${t1[2] ?? \".0\"}.x`;\n        return No(r1);\n    }\n}\nfunction No(e1) {\n    let t1 = (()=>{\n        if ($o(e1)) return e1;\n        let r1 = e1.split(\".\");\n        return r1[1] = \"0\", r1.join(\".\");\n    })();\n    if (_u.includes(t1)) return t1;\n}\nfunction Mu(e1) {\n    return mt(e1).with({\n        familyDistro: \"musl\"\n    }, ()=>(te('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: t1 })=>(te('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${t1}-linux-gnu`,\n            `/lib/${t1}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(te('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: t1, arch: r1, archFromUname: n1 })=>(te(`Don't know any platform-specific paths for \"${t1}\" on ${r1} (${n1})`), []));\n}\nasync function $u(e1) {\n    let t1 = 'grep -v \"libssl.so.0\"', r1 = await Do(e1);\n    if (r1) {\n        te(`Found libssl.so file using platform-specific paths: ${r1}`);\n        let o1 = ko(r1);\n        if (te(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    te('Falling back to \"ldconfig\" and other generic paths');\n    let n1 = await Qr(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${t1}`);\n    if (n1 || (n1 = await Do([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\"\n    ])), n1) {\n        te(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n1}`);\n        let o1 = ko(n1);\n        if (te(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i1 = await Qr(\"openssl version -v\");\n    if (i1) {\n        te(`Found openssl binary with version: ${i1}`);\n        let o1 = Nu(i1);\n        if (te(`The parsed openssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return te(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Do(e1) {\n    for (let t1 of e1){\n        let r1 = await qu(t1);\n        if (r1) return r1;\n    }\n}\nasync function qu(e1) {\n    try {\n        return (await zn.default.readdir(e1)).find((r1)=>r1.startsWith(\"libssl.so.\") && !r1.startsWith(\"libssl.so.0\"));\n    } catch (t1) {\n        if (t1.code === \"ENOENT\") return;\n        throw t1;\n    }\n}\nasync function nt() {\n    let { binaryTarget: e1 } = await Mo();\n    return e1;\n}\nfunction ju(e1) {\n    return e1.binaryTarget !== void 0;\n}\nasync function Yn() {\n    let { memoized: e1, ...t1 } = await Mo();\n    return t1;\n}\nvar Ur = {};\nasync function Mo() {\n    if (ju(Ur)) return Promise.resolve({\n        ...Ur,\n        memoized: !0\n    });\n    let e1 = await Lo(), t1 = Vu(e1);\n    return Ur = {\n        ...e1,\n        binaryTarget: t1\n    }, {\n        ...Ur,\n        memoized: !1\n    };\n}\nfunction Vu(e1) {\n    let { platform: t1, arch: r1, archFromUname: n1, libssl: i1, targetDistro: o1, familyDistro: s1, originalDistro: a1 } = e1;\n    t1 === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(r1) && Br(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures (detected \"${r1}\" instead). If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n1}\".`);\n    let l1 = \"1.1.x\";\n    if (t1 === \"linux\" && i1 === void 0) {\n        let c1 = mt({\n            familyDistro: s1\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        Br(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l1}\".\n${c1}`);\n    }\n    let u1 = \"debian\";\n    if (t1 === \"linux\" && o1 === void 0 && te(`Distro is \"${a1}\". Falling back to Prisma engines built for \"${u1}\".`), t1 === \"darwin\" && r1 === \"arm64\") return \"darwin-arm64\";\n    if (t1 === \"darwin\") return \"darwin\";\n    if (t1 === \"win32\") return \"windows\";\n    if (t1 === \"freebsd\") return o1;\n    if (t1 === \"openbsd\") return \"openbsd\";\n    if (t1 === \"netbsd\") return \"netbsd\";\n    if (t1 === \"linux\" && o1 === \"nixos\") return \"linux-nixos\";\n    if (t1 === \"linux\" && r1 === \"arm64\") return `${o1 === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i1 || l1}`;\n    if (t1 === \"linux\" && r1 === \"arm\") return `linux-arm-openssl-${i1 || l1}`;\n    if (t1 === \"linux\" && o1 === \"musl\") {\n        let c1 = \"linux-musl\";\n        return !i1 || $o(i1) ? c1 : `${c1}-openssl-${i1}`;\n    }\n    return t1 === \"linux\" && o1 && i1 ? `${o1}-openssl-${i1}` : (t1 !== \"linux\" && Br(`Prisma detected unknown OS \"${t1}\" and may not work as expected. Defaulting to \"linux\".`), i1 ? `${u1}-openssl-${i1}` : o1 ? `${o1}-openssl-${l1}` : `${u1}-openssl-${l1}`);\n}\nasync function Bu(e1) {\n    try {\n        return await e1();\n    } catch  {\n        return;\n    }\n}\nfunction Qr(e1) {\n    return Bu(async ()=>{\n        let t1 = await Du(e1);\n        return te(`Command \"${e1}\" successfully returned \"${t1.stdout}\"`), t1.stdout;\n    });\n}\nasync function Uu() {\n    return typeof Gr.default.machine == \"function\" ? Gr.default.machine() : (await Qr(\"uname -m\"))?.trim();\n}\nfunction $o(e1) {\n    return e1.startsWith(\"1.\");\n}\nvar zo = k(Ko());\nfunction ii(e1) {\n    return (0, zo.default)(e1, e1, {\n        fallback: X\n    });\n}\nvar Ku = k(si());\nvar $ = k(__webpack_require__(/*! path */ \"path\")), zu = k(si()), Lf = L(\"prisma:engines\");\nfunction Yo() {\n    return $.default.join(__dirname, \"../\");\n}\nvar Nf = \"libquery-engine\";\n$.default.join(__dirname, \"../query-engine-darwin\");\n$.default.join(__dirname, \"../query-engine-darwin-arm64\");\n$.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\n$.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\n$.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\n$.default.join(__dirname, \"../query-engine-linux-static-x64\");\n$.default.join(__dirname, \"../query-engine-linux-static-arm64\");\n$.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\n$.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\n$.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\n$.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\n$.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\n$.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\n$.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\n$.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\n$.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar ai = k(__webpack_require__(/*! fs */ \"fs\")), Zo = L(\"chmodPlusX\");\nfunction li(e1) {\n    if (process.platform === \"win32\") return;\n    let t1 = ai.default.statSync(e1), r1 = t1.mode | 64 | 8 | 1;\n    if (t1.mode === r1) {\n        Zo(`Execution permissions of ${e1} are fine`);\n        return;\n    }\n    let n1 = r1.toString(8).slice(-3);\n    Zo(`Have to call chmodPlusX on ${e1}`), ai.default.chmodSync(e1, n1);\n}\nfunction ui(e1) {\n    let t1 = e1.e, r1 = (a1)=>`Prisma cannot find the required \\`${a1}\\` system library in your system`, n1 = t1.message.includes(\"cannot open shared object file\"), i1 = `Please refer to the documentation about Prisma's system requirements: ${ii(\"https://pris.ly/d/system-requirements\")}`, o1 = `Unable to require(\\`${Oe(e1.id)}\\`).`, s1 = mt({\n        message: t1.message,\n        code: t1.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a1 })=>n1 && a1.includes(\"libz\"), ()=>`${r1(\"libz\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libgcc_s\"), ()=>`${r1(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libssl\"), ()=>{\n        let a1 = e1.platformInfo.libssl ? `openssl-${e1.platformInfo.libssl}` : \"openssl\";\n        return `${r1(\"libssl\")}. Please install ${a1} and try again.`;\n    }).when(({ message: a1 })=>a1.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i1}`).when(({ message: a1 })=>e1.platformInfo.platform === \"linux\" && a1.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e1.platformInfo.originalDistro} on (${e1.platformInfo.archFromUname}) which uses the \\`${e1.platformInfo.binaryTarget}\\` binaryTarget by default. ${i1}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i1}`);\n    return `${o1}\n${s1}\n\nDetails: ${t1.message}`;\n}\nvar di = k(ts()), zr = k(__webpack_require__(/*! fs */ \"fs\"));\nvar ht = k(__webpack_require__(/*! path */ \"path\"));\nfunction rs(e1) {\n    let t1 = e1.ignoreProcessEnv ? {} : process.env, r1 = (n1)=>n1.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o1, s1) {\n            let a1 = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s1);\n            if (!a1) return o1;\n            let l1 = a1[1], u1, c1;\n            if (l1 === \"\\\\\") c1 = a1[0], u1 = c1.replace(\"\\\\$\", \"$\");\n            else {\n                let p1 = a1[2];\n                c1 = a1[0].substring(l1.length), u1 = Object.hasOwnProperty.call(t1, p1) ? t1[p1] : e1.parsed[p1] || \"\", u1 = r1(u1);\n            }\n            return o1.replace(c1, u1);\n        }, n1) ?? n1;\n    for(let n1 in e1.parsed){\n        let i1 = Object.hasOwnProperty.call(t1, n1) ? t1[n1] : e1.parsed[n1];\n        e1.parsed[n1] = r1(i1);\n    }\n    for(let n1 in e1.parsed)t1[n1] = e1.parsed[n1];\n    return e1;\n}\nvar pi = L(\"prisma:tryLoadEnv\");\nfunction zt({ rootEnvPath: e1, schemaEnvPath: t1 }, r1 = {\n    conflictCheck: \"none\"\n}) {\n    let n1 = ns(e1);\n    r1.conflictCheck !== \"none\" && sc(n1, t1, r1.conflictCheck);\n    let i1 = null;\n    return is(n1?.path, t1) || (i1 = ns(t1)), !n1 && !i1 && pi(\"No Environment variables loaded\"), i1?.dotenvResult.error ? console.error(ce(H(\"Schema Env Error: \")) + i1.dotenvResult.error) : {\n        message: [\n            n1?.message,\n            i1?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n1?.dotenvResult?.parsed,\n            ...i1?.dotenvResult?.parsed\n        }\n    };\n}\nfunction sc(e1, t1, r1) {\n    let n1 = e1?.dotenvResult.parsed, i1 = !is(e1?.path, t1);\n    if (n1 && t1 && i1 && zr.default.existsSync(t1)) {\n        let o1 = di.default.parse(zr.default.readFileSync(t1)), s1 = [];\n        for(let a1 in o1)n1[a1] === o1[a1] && s1.push(a1);\n        if (s1.length > 0) {\n            let a1 = ht.default.relative(process.cwd(), e1.path), l1 = ht.default.relative(process.cwd(), t1);\n            if (r1 === \"error\") {\n                let u1 = `There is a conflict between env var${s1.length > 1 ? \"s\" : \"\"} in ${X(a1)} and ${X(l1)}\nConflicting env vars:\n${s1.map((c1)=>`  ${H(c1)}`).join(`\n`)}\n\nWe suggest to move the contents of ${X(l1)} to ${X(a1)} to consolidate your env vars.\n`;\n                throw new Error(u1);\n            } else if (r1 === \"warn\") {\n                let u1 = `Conflict for env var${s1.length > 1 ? \"s\" : \"\"} ${s1.map((c1)=>H(c1)).join(\", \")} in ${X(a1)} and ${X(l1)}\nEnv vars from ${X(l1)} overwrite the ones from ${X(a1)}\n      `;\n                console.warn(`${ke(\"warn(prisma)\")} ${u1}`);\n            }\n        }\n    }\n}\nfunction ns(e1) {\n    if (ac(e1)) {\n        pi(`Environment variables loaded from ${e1}`);\n        let t1 = di.default.config({\n            path: e1,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: rs(t1),\n            message: Oe(`Environment variables loaded from ${ht.default.relative(process.cwd(), e1)}`),\n            path: e1\n        };\n    } else pi(`Environment variables not found at ${e1}`);\n    return null;\n}\nfunction is(e1, t1) {\n    return e1 && t1 && ht.default.resolve(e1) === ht.default.resolve(t1);\n}\nfunction ac(e1) {\n    return !!(e1 && zr.default.existsSync(e1));\n}\nvar os = \"library\";\nfunction Yt(e1) {\n    let t1 = lc();\n    return t1 || (e1?.config.engineType === \"library\" ? \"library\" : e1?.config.engineType === \"binary\" ? \"binary\" : os);\n}\nfunction lc() {\n    let e1 = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e1 === \"library\" ? \"library\" : e1 === \"binary\" ? \"binary\" : void 0;\n}\nvar Je;\n((t1)=>{\n    let e1;\n    ((E1)=>(E1.findUnique = \"findUnique\", E1.findUniqueOrThrow = \"findUniqueOrThrow\", E1.findFirst = \"findFirst\", E1.findFirstOrThrow = \"findFirstOrThrow\", E1.findMany = \"findMany\", E1.create = \"create\", E1.createMany = \"createMany\", E1.createManyAndReturn = \"createManyAndReturn\", E1.update = \"update\", E1.updateMany = \"updateMany\", E1.upsert = \"upsert\", E1.delete = \"delete\", E1.deleteMany = \"deleteMany\", E1.groupBy = \"groupBy\", E1.count = \"count\", E1.aggregate = \"aggregate\", E1.findRaw = \"findRaw\", E1.aggregateRaw = \"aggregateRaw\"))(e1 = t1.ModelAction ||= {});\n})(Je ||= {});\nvar Zt = k(__webpack_require__(/*! path */ \"path\"));\nfunction mi(e1) {\n    return Zt.default.sep === Zt.default.posix.sep ? e1 : e1.split(Zt.default.sep).join(Zt.default.posix.sep);\n}\nvar ps = k(fi());\nfunction hi(e1) {\n    return String(new gi(e1));\n}\nvar gi = class {\n    constructor(t1){\n        this.config = t1;\n    }\n    toString() {\n        let { config: t1 } = this, r1 = t1.provider.fromEnvVar ? `env(\"${t1.provider.fromEnvVar}\")` : t1.provider.value, n1 = JSON.parse(JSON.stringify({\n            provider: r1,\n            binaryTargets: cc(t1.binaryTargets)\n        }));\n        return `generator ${t1.name} {\n${(0, ps.default)(pc(n1), 2)}\n}`;\n    }\n};\nfunction cc(e1) {\n    let t1;\n    if (e1.length > 0) {\n        let r1 = e1.find((n1)=>n1.fromEnvVar !== null);\n        r1 ? t1 = `env(\"${r1.fromEnvVar}\")` : t1 = e1.map((n1)=>n1.native ? \"native\" : n1.value);\n    } else t1 = void 0;\n    return t1;\n}\nfunction pc(e1) {\n    let t1 = Object.keys(e1).reduce((r1, n1)=>Math.max(r1, n1.length), 0);\n    return Object.entries(e1).map(([r1, n1])=>`${r1.padEnd(t1)} = ${dc(n1)}`).join(`\n`);\n}\nfunction dc(e1) {\n    return JSON.parse(JSON.stringify(e1, (t1, r1)=>Array.isArray(r1) ? `[${r1.map((n1)=>JSON.stringify(n1)).join(\", \")}]` : JSON.stringify(r1)));\n}\nvar er = {};\nUt(er, {\n    error: ()=>gc,\n    info: ()=>fc,\n    log: ()=>mc,\n    query: ()=>hc,\n    should: ()=>ds,\n    tags: ()=>Xt,\n    warn: ()=>yi\n});\nvar Xt = {\n    error: ce(\"prisma:error\"),\n    warn: ke(\"prisma:warn\"),\n    info: De(\"prisma:info\"),\n    query: rt(\"prisma:query\")\n}, ds = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction mc(...e1) {\n    console.log(...e1);\n}\nfunction yi(e1, ...t1) {\n    ds.warn() && console.warn(`${Xt.warn} ${e1}`, ...t1);\n}\nfunction fc(e1, ...t1) {\n    console.info(`${Xt.info} ${e1}`, ...t1);\n}\nfunction gc(e1, ...t1) {\n    console.error(`${Xt.error} ${e1}`, ...t1);\n}\nfunction hc(e1, ...t1) {\n    console.log(`${Xt.query} ${e1}`, ...t1);\n}\nfunction Yr(e1, t1) {\n    if (!e1) throw new Error(`${t1}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction Fe(e1, t1) {\n    throw new Error(t1);\n}\nfunction Ei(e1, t1) {\n    return Object.prototype.hasOwnProperty.call(e1, t1);\n}\nvar wi = (e1, t1)=>e1.reduce((r1, n1)=>(r1[t1(n1)] = n1, r1), {});\nfunction yt(e1, t1) {\n    let r1 = {};\n    for (let n1 of Object.keys(e1))r1[n1] = t1(e1[n1], n1);\n    return r1;\n}\nfunction xi(e1, t1) {\n    if (e1.length === 0) return;\n    let r1 = e1[0];\n    for(let n1 = 1; n1 < e1.length; n1++)t1(r1, e1[n1]) < 0 && (r1 = e1[n1]);\n    return r1;\n}\nfunction w(e1, t1) {\n    Object.defineProperty(e1, \"name\", {\n        value: t1,\n        configurable: !0\n    });\n}\nvar ys = new Set, tr = (e1, t1, ...r1)=>{\n    ys.has(e1) || (ys.add(e1), yi(t1, ...r1));\n};\nvar V = class extends Error {\n    constructor(t1, { code: r1, clientVersion: n1, meta: i1, batchRequestIdx: o1 }){\n        super(t1), this.name = \"PrismaClientKnownRequestError\", this.code = r1, this.clientVersion = n1, this.meta = i1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o1,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nw(V, \"PrismaClientKnownRequestError\");\nvar Le = class extends V {\n    constructor(t1, r1){\n        super(t1, {\n            code: \"P2025\",\n            clientVersion: r1\n        }), this.name = \"NotFoundError\";\n    }\n};\nw(Le, \"NotFoundError\");\nvar R = class e extends Error {\n    constructor(t1, r1, n1){\n        super(t1), this.name = \"PrismaClientInitializationError\", this.clientVersion = r1, this.errorCode = n1, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nw(R, \"PrismaClientInitializationError\");\nvar le = class extends Error {\n    constructor(t1, r1){\n        super(t1), this.name = \"PrismaClientRustPanicError\", this.clientVersion = r1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nw(le, \"PrismaClientRustPanicError\");\nvar B = class extends Error {\n    constructor(t1, { clientVersion: r1, batchRequestIdx: n1 }){\n        super(t1), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = r1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n1,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nw(B, \"PrismaClientUnknownRequestError\");\nvar J = class extends Error {\n    constructor(r1, { clientVersion: n1 }){\n        super(r1);\n        this.name = \"PrismaClientValidationError\";\n        this.clientVersion = n1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nw(J, \"PrismaClientValidationError\");\nvar bt = 9e15, ze = 1e9, Pi = \"0123456789abcdef\", tn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", rn = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", vi = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -bt,\n    maxE: bt,\n    crypto: !1\n}, xs, Ne, x = !0, on = \"[DecimalError] \", Ke = on + \"Invalid argument: \", Ps = on + \"Precision limit exceeded\", vs = on + \"crypto unavailable\", Ts = \"[object Decimal]\", ee = Math.floor, G = Math.pow, bc = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Ec = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, wc = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, Rs = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, ge = 1e7, b = 7, xc = 9007199254740991, Pc = tn.length - 1, Ti = rn.length - 1, m = {\n    toStringTag: Ts\n};\nm.absoluteValue = m.abs = function() {\n    var e1 = new this.constructor(this);\n    return e1.s < 0 && (e1.s = 1), y(e1);\n};\nm.ceil = function() {\n    return y(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    if (e1 = new i1(e1), t1 = new i1(t1), !e1.s || !t1.s) return new i1(NaN);\n    if (e1.gt(t1)) throw Error(Ke + t1);\n    return r1 = n1.cmp(e1), r1 < 0 ? e1 : n1.cmp(t1) > 0 ? t1 : new i1(n1);\n};\nm.comparedTo = m.cmp = function(e1) {\n    var t1, r1, n1, i1, o1 = this, s1 = o1.d, a1 = (e1 = new o1.constructor(e1)).d, l1 = o1.s, u1 = e1.s;\n    if (!s1 || !a1) return !l1 || !u1 ? NaN : l1 !== u1 ? l1 : s1 === a1 ? 0 : !s1 ^ l1 < 0 ? 1 : -1;\n    if (!s1[0] || !a1[0]) return s1[0] ? l1 : a1[0] ? -u1 : 0;\n    if (l1 !== u1) return l1;\n    if (o1.e !== e1.e) return o1.e > e1.e ^ l1 < 0 ? 1 : -1;\n    for(n1 = s1.length, i1 = a1.length, t1 = 0, r1 = n1 < i1 ? n1 : i1; t1 < r1; ++t1)if (s1[t1] !== a1[t1]) return s1[t1] > a1[t1] ^ l1 < 0 ? 1 : -1;\n    return n1 === i1 ? 0 : n1 > i1 ^ l1 < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.d ? r1.d[0] ? (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(r1.e, r1.sd()) + b, n1.rounding = 1, r1 = vc(n1, Os(n1, r1)), n1.precision = e1, n1.rounding = t1, y(Ne == 2 || Ne == 3 ? r1.neg() : r1, e1, t1, !0)) : new n1(1) : new n1(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e1, t1, r1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor;\n    if (!c1.isFinite() || c1.isZero()) return new p1(c1);\n    for(x = !1, o1 = c1.s * G(c1.s * c1, 1 / 3), !o1 || Math.abs(o1) == 1 / 0 ? (r1 = K(c1.d), e1 = c1.e, (o1 = (e1 - r1.length + 1) % 3) && (r1 += o1 == 1 || o1 == -2 ? \"0\" : \"00\"), o1 = G(r1, 1 / 3), e1 = ee((e1 + 1) / 3) - (e1 % 3 == (e1 < 0 ? -1 : 2)), o1 == 1 / 0 ? r1 = \"5e\" + e1 : (r1 = o1.toExponential(), r1 = r1.slice(0, r1.indexOf(\"e\") + 1) + e1), n1 = new p1(r1), n1.s = c1.s) : n1 = new p1(o1.toString()), s1 = (e1 = p1.precision) + 3;;)if (a1 = n1, l1 = a1.times(a1).times(a1), u1 = l1.plus(c1), n1 = N(u1.plus(c1).times(a1), u1.plus(l1), s1 + 2, 1), K(a1.d).slice(0, s1) === (r1 = K(n1.d)).slice(0, s1)) if (r1 = r1.slice(s1 - 3, s1 + 1), r1 == \"9999\" || !i1 && r1 == \"4999\") {\n        if (!i1 && (y(a1, e1 + 1, 0), a1.times(a1).times(a1).eq(c1))) {\n            n1 = a1;\n            break;\n        }\n        s1 += 4, i1 = 1;\n    } else {\n        (!+r1 || !+r1.slice(1) && r1.charAt(0) == \"5\") && (y(n1, e1 + 1, 1), t1 = !n1.times(n1).times(n1).eq(c1));\n        break;\n    }\n    return x = !0, y(n1, e1, p1.rounding, t1);\n};\nm.decimalPlaces = m.dp = function() {\n    var e1, t1 = this.d, r1 = NaN;\n    if (t1) {\n        if (e1 = t1.length - 1, r1 = (e1 - ee(this.e / b)) * b, e1 = t1[e1], e1) for(; e1 % 10 == 0; e1 /= 10)r1--;\n        r1 < 0 && (r1 = 0);\n    }\n    return r1;\n};\nm.dividedBy = m.div = function(e1) {\n    return N(this, new this.constructor(e1));\n};\nm.dividedToIntegerBy = m.divToInt = function(e1) {\n    var t1 = this, r1 = t1.constructor;\n    return y(N(t1, new r1(e1), 0, 1, 1), r1.precision, r1.rounding);\n};\nm.equals = m.eq = function(e1) {\n    return this.cmp(e1) === 0;\n};\nm.floor = function() {\n    return y(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e1) {\n    return this.cmp(e1) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e1) {\n    var t1 = this.cmp(e1);\n    return t1 == 1 || t1 === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e1, t1, r1, n1, i1, o1 = this, s1 = o1.constructor, a1 = new s1(1);\n    if (!o1.isFinite()) return new s1(o1.s ? 1 / 0 : NaN);\n    if (o1.isZero()) return a1;\n    r1 = s1.precision, n1 = s1.rounding, s1.precision = r1 + Math.max(o1.e, o1.sd()) + 4, s1.rounding = 1, i1 = o1.d.length, i1 < 32 ? (e1 = Math.ceil(i1 / 3), t1 = (1 / an(4, e1)).toString()) : (e1 = 16, t1 = \"2.3283064365386962890625e-10\"), o1 = Et(s1, 1, o1.times(t1), new s1(1), !0);\n    for(var l1, u1 = e1, c1 = new s1(8); u1--;)l1 = o1.times(o1), o1 = a1.minus(l1.times(c1.minus(l1.times(c1))));\n    return y(o1, s1.precision = r1, s1.rounding = n1, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    if (!i1.isFinite() || i1.isZero()) return new o1(i1);\n    if (t1 = o1.precision, r1 = o1.rounding, o1.precision = t1 + Math.max(i1.e, i1.sd()) + 4, o1.rounding = 1, n1 = i1.d.length, n1 < 3) i1 = Et(o1, 2, i1, i1, !0);\n    else {\n        e1 = 1.4 * Math.sqrt(n1), e1 = e1 > 16 ? 16 : e1 | 0, i1 = i1.times(1 / an(5, e1)), i1 = Et(o1, 2, i1, i1, !0);\n        for(var s1, a1 = new o1(5), l1 = new o1(16), u1 = new o1(20); e1--;)s1 = i1.times(i1), i1 = i1.times(a1.plus(s1.times(l1.times(s1).plus(u1))));\n    }\n    return o1.precision = t1, o1.rounding = r1, y(i1, t1, r1, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 7, n1.rounding = 1, N(r1.sinh(), r1.cosh(), n1.precision = e1, n1.rounding = t1)) : new n1(r1.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e1, t1 = this, r1 = t1.constructor, n1 = t1.abs().cmp(1), i1 = r1.precision, o1 = r1.rounding;\n    return n1 !== -1 ? n1 === 0 ? t1.isNeg() ? fe(r1, i1, o1) : new r1(0) : new r1(NaN) : t1.isZero() ? fe(r1, i1 + 4, o1).times(.5) : (r1.precision = i1 + 6, r1.rounding = 1, t1 = t1.asin(), e1 = fe(r1, i1 + 4, o1).times(.5), r1.precision = i1, r1.rounding = o1, e1.minus(t1));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.lte(1) ? new n1(r1.eq(1) ? 0 : NaN) : r1.isFinite() ? (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(Math.abs(r1.e), r1.sd()) + 4, n1.rounding = 1, x = !1, r1 = r1.times(r1).minus(1).sqrt().plus(r1), x = !0, n1.precision = e1, n1.rounding = t1, r1.ln()) : new n1(r1);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return !r1.isFinite() || r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 2 * Math.max(Math.abs(r1.e), r1.sd()) + 6, n1.rounding = 1, x = !1, r1 = r1.times(r1).plus(1).sqrt().plus(r1), x = !0, n1.precision = e1, n1.rounding = t1, r1.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isFinite() ? i1.e >= 0 ? new o1(i1.abs().eq(1) ? i1.s / 0 : i1.isZero() ? i1 : NaN) : (e1 = o1.precision, t1 = o1.rounding, n1 = i1.sd(), Math.max(n1, e1) < 2 * -i1.e - 1 ? y(new o1(i1), e1, t1, !0) : (o1.precision = r1 = n1 - i1.e, i1 = N(i1.plus(1), new o1(1).minus(i1), r1 + e1, 1), o1.precision = e1 + 4, o1.rounding = 1, i1 = i1.ln(), o1.precision = e1, o1.rounding = t1, i1.times(.5))) : new o1(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isZero() ? new o1(i1) : (t1 = i1.abs().cmp(1), r1 = o1.precision, n1 = o1.rounding, t1 !== -1 ? t1 === 0 ? (e1 = fe(o1, r1 + 4, n1).times(.5), e1.s = i1.s, e1) : new o1(NaN) : (o1.precision = r1 + 6, o1.rounding = 1, i1 = i1.div(new o1(1).minus(i1.times(i1)).sqrt().plus(1)).atan(), o1.precision = r1, o1.rounding = n1, i1.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e1, t1, r1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding;\n    if (u1.isFinite()) {\n        if (u1.isZero()) return new c1(u1);\n        if (u1.abs().eq(1) && p1 + 4 <= Ti) return s1 = fe(c1, p1 + 4, d1).times(.25), s1.s = u1.s, s1;\n    } else {\n        if (!u1.s) return new c1(NaN);\n        if (p1 + 4 <= Ti) return s1 = fe(c1, p1 + 4, d1).times(.5), s1.s = u1.s, s1;\n    }\n    for(c1.precision = a1 = p1 + 10, c1.rounding = 1, r1 = Math.min(28, a1 / b + 2 | 0), e1 = r1; e1; --e1)u1 = u1.div(u1.times(u1).plus(1).sqrt().plus(1));\n    for(x = !1, t1 = Math.ceil(a1 / b), n1 = 1, l1 = u1.times(u1), s1 = new c1(u1), i1 = u1; e1 !== -1;)if (i1 = i1.times(l1), o1 = s1.minus(i1.div(n1 += 2)), i1 = i1.times(l1), s1 = o1.plus(i1.div(n1 += 2)), s1.d[t1] !== void 0) for(e1 = t1; s1.d[e1] === o1.d[e1] && e1--;);\n    return r1 && (s1 = s1.times(2 << r1 - 1)), x = !0, y(s1, c1.precision = p1, c1.rounding = d1, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && ee(this.e / b) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e1) {\n    return this.cmp(e1) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e1) {\n    return this.cmp(e1) < 1;\n};\nm.logarithm = m.log = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding, f1 = 5;\n    if (e1 == null) e1 = new c1(10), t1 = !0;\n    else {\n        if (e1 = new c1(e1), r1 = e1.d, e1.s < 0 || !r1 || !r1[0] || e1.eq(1)) return new c1(NaN);\n        t1 = e1.eq(10);\n    }\n    if (r1 = u1.d, u1.s < 0 || !r1 || !r1[0] || u1.eq(1)) return new c1(r1 && !r1[0] ? -1 / 0 : u1.s != 1 ? NaN : r1 ? 0 : 1 / 0);\n    if (t1) if (r1.length > 1) o1 = !0;\n    else {\n        for(i1 = r1[0]; i1 % 10 === 0;)i1 /= 10;\n        o1 = i1 !== 1;\n    }\n    if (x = !1, a1 = p1 + f1, s1 = He(u1, a1), n1 = t1 ? nn(c1, a1 + 10) : He(e1, a1), l1 = N(s1, n1, a1, 1), rr(l1.d, i1 = p1, d1)) do if (a1 += 10, s1 = He(u1, a1), n1 = t1 ? nn(c1, a1 + 10) : He(e1, a1), l1 = N(s1, n1, a1, 1), !o1) {\n        +K(l1.d).slice(i1 + 1, i1 + 15) + 1 == 1e14 && (l1 = y(l1, p1 + 1, 0));\n        break;\n    }\n    while (rr(l1.d, i1 += 10, d1));\n    return x = !0, y(l1, p1, d1);\n};\nm.minus = m.sub = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, g1 = f1.constructor;\n    if (e1 = new g1(e1), !f1.d || !e1.d) return !f1.s || !e1.s ? e1 = new g1(NaN) : f1.d ? e1.s = -e1.s : e1 = new g1(e1.d || f1.s !== e1.s ? f1 : NaN), e1;\n    if (f1.s != e1.s) return e1.s = -e1.s, f1.plus(e1);\n    if (u1 = f1.d, d1 = e1.d, a1 = g1.precision, l1 = g1.rounding, !u1[0] || !d1[0]) {\n        if (d1[0]) e1.s = -e1.s;\n        else if (u1[0]) e1 = new g1(f1);\n        else return new g1(l1 === 3 ? -0 : 0);\n        return x ? y(e1, a1, l1) : e1;\n    }\n    if (r1 = ee(e1.e / b), c1 = ee(f1.e / b), u1 = u1.slice(), o1 = c1 - r1, o1) {\n        for(p1 = o1 < 0, p1 ? (t1 = u1, o1 = -o1, s1 = d1.length) : (t1 = d1, r1 = c1, s1 = u1.length), n1 = Math.max(Math.ceil(a1 / b), s1) + 2, o1 > n1 && (o1 = n1, t1.length = 1), t1.reverse(), n1 = o1; n1--;)t1.push(0);\n        t1.reverse();\n    } else {\n        for(n1 = u1.length, s1 = d1.length, p1 = n1 < s1, p1 && (s1 = n1), n1 = 0; n1 < s1; n1++)if (u1[n1] != d1[n1]) {\n            p1 = u1[n1] < d1[n1];\n            break;\n        }\n        o1 = 0;\n    }\n    for(p1 && (t1 = u1, u1 = d1, d1 = t1, e1.s = -e1.s), s1 = u1.length, n1 = d1.length - s1; n1 > 0; --n1)u1[s1++] = 0;\n    for(n1 = d1.length; n1 > o1;){\n        if (u1[--n1] < d1[n1]) {\n            for(i1 = n1; i1 && u1[--i1] === 0;)u1[i1] = ge - 1;\n            --u1[i1], u1[n1] += ge;\n        }\n        u1[n1] -= d1[n1];\n    }\n    for(; u1[--s1] === 0;)u1.pop();\n    for(; u1[0] === 0; u1.shift())--r1;\n    return u1[0] ? (e1.d = u1, e1.e = sn(u1, r1), x ? y(e1, a1, l1) : e1) : new g1(l1 === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e1) {\n    var t1, r1 = this, n1 = r1.constructor;\n    return e1 = new n1(e1), !r1.d || !e1.s || e1.d && !e1.d[0] ? new n1(NaN) : !e1.d || r1.d && !r1.d[0] ? y(new n1(r1), n1.precision, n1.rounding) : (x = !1, n1.modulo == 9 ? (t1 = N(r1, e1.abs(), 0, 3, 1), t1.s *= e1.s) : t1 = N(r1, e1, 0, n1.modulo, 1), t1 = t1.times(e1), x = !0, r1.minus(t1));\n};\nm.naturalExponential = m.exp = function() {\n    return Ri(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return He(this);\n};\nm.negated = m.neg = function() {\n    var e1 = new this.constructor(this);\n    return e1.s = -e1.s, y(e1);\n};\nm.plus = m.add = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1 = this, d1 = p1.constructor;\n    if (e1 = new d1(e1), !p1.d || !e1.d) return !p1.s || !e1.s ? e1 = new d1(NaN) : p1.d || (e1 = new d1(e1.d || p1.s === e1.s ? p1 : NaN)), e1;\n    if (p1.s != e1.s) return e1.s = -e1.s, p1.minus(e1);\n    if (u1 = p1.d, c1 = e1.d, a1 = d1.precision, l1 = d1.rounding, !u1[0] || !c1[0]) return c1[0] || (e1 = new d1(p1)), x ? y(e1, a1, l1) : e1;\n    if (o1 = ee(p1.e / b), n1 = ee(e1.e / b), u1 = u1.slice(), i1 = o1 - n1, i1) {\n        for(i1 < 0 ? (r1 = u1, i1 = -i1, s1 = c1.length) : (r1 = c1, n1 = o1, s1 = u1.length), o1 = Math.ceil(a1 / b), s1 = o1 > s1 ? o1 + 1 : s1 + 1, i1 > s1 && (i1 = s1, r1.length = 1), r1.reverse(); i1--;)r1.push(0);\n        r1.reverse();\n    }\n    for(s1 = u1.length, i1 = c1.length, s1 - i1 < 0 && (i1 = s1, r1 = c1, c1 = u1, u1 = r1), t1 = 0; i1;)t1 = (u1[--i1] = u1[i1] + c1[i1] + t1) / ge | 0, u1[i1] %= ge;\n    for(t1 && (u1.unshift(t1), ++n1), s1 = u1.length; u1[--s1] == 0;)u1.pop();\n    return e1.d = u1, e1.e = sn(u1, n1), x ? y(e1, a1, l1) : e1;\n};\nm.precision = m.sd = function(e1) {\n    var t1, r1 = this;\n    if (e1 !== void 0 && e1 !== !!e1 && e1 !== 1 && e1 !== 0) throw Error(Ke + e1);\n    return r1.d ? (t1 = Cs(r1.d), e1 && r1.e + 1 > t1 && (t1 = r1.e + 1)) : t1 = NaN, t1;\n};\nm.round = function() {\n    var e1 = this, t1 = e1.constructor;\n    return y(new t1(e1), e1.e + 1, t1.rounding);\n};\nm.sine = m.sin = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(r1.e, r1.sd()) + b, n1.rounding = 1, r1 = Rc(n1, Os(n1, r1)), n1.precision = e1, n1.rounding = t1, y(Ne > 2 ? r1.neg() : r1, e1, t1, !0)) : new n1(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e1, t1, r1, n1, i1, o1, s1 = this, a1 = s1.d, l1 = s1.e, u1 = s1.s, c1 = s1.constructor;\n    if (u1 !== 1 || !a1 || !a1[0]) return new c1(!u1 || u1 < 0 && (!a1 || a1[0]) ? NaN : a1 ? s1 : 1 / 0);\n    for(x = !1, u1 = Math.sqrt(+s1), u1 == 0 || u1 == 1 / 0 ? (t1 = K(a1), (t1.length + l1) % 2 == 0 && (t1 += \"0\"), u1 = Math.sqrt(t1), l1 = ee((l1 + 1) / 2) - (l1 < 0 || l1 % 2), u1 == 1 / 0 ? t1 = \"5e\" + l1 : (t1 = u1.toExponential(), t1 = t1.slice(0, t1.indexOf(\"e\") + 1) + l1), n1 = new c1(t1)) : n1 = new c1(u1.toString()), r1 = (l1 = c1.precision) + 3;;)if (o1 = n1, n1 = o1.plus(N(s1, o1, r1 + 2, 1)).times(.5), K(o1.d).slice(0, r1) === (t1 = K(n1.d)).slice(0, r1)) if (t1 = t1.slice(r1 - 3, r1 + 1), t1 == \"9999\" || !i1 && t1 == \"4999\") {\n        if (!i1 && (y(o1, l1 + 1, 0), o1.times(o1).eq(s1))) {\n            n1 = o1;\n            break;\n        }\n        r1 += 4, i1 = 1;\n    } else {\n        (!+t1 || !+t1.slice(1) && t1.charAt(0) == \"5\") && (y(n1, l1 + 1, 1), e1 = !n1.times(n1).eq(s1));\n        break;\n    }\n    return x = !0, y(n1, l1, c1.rounding, e1);\n};\nm.tangent = m.tan = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 10, n1.rounding = 1, r1 = r1.sin(), r1.s = 1, r1 = N(r1, new n1(1).minus(r1.times(r1)).sqrt(), e1 + 10, 0), n1.precision = e1, n1.rounding = t1, y(Ne == 2 || Ne == 4 ? r1.neg() : r1, e1, t1, !0)) : new n1(NaN);\n};\nm.times = m.mul = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor, d1 = c1.d, f1 = (e1 = new p1(e1)).d;\n    if (e1.s *= c1.s, !d1 || !d1[0] || !f1 || !f1[0]) return new p1(!e1.s || d1 && !d1[0] && !f1 || f1 && !f1[0] && !d1 ? NaN : !d1 || !f1 ? e1.s / 0 : e1.s * 0);\n    for(r1 = ee(c1.e / b) + ee(e1.e / b), l1 = d1.length, u1 = f1.length, l1 < u1 && (o1 = d1, d1 = f1, f1 = o1, s1 = l1, l1 = u1, u1 = s1), o1 = [], s1 = l1 + u1, n1 = s1; n1--;)o1.push(0);\n    for(n1 = u1; --n1 >= 0;){\n        for(t1 = 0, i1 = l1 + n1; i1 > n1;)a1 = o1[i1] + f1[n1] * d1[i1 - n1 - 1] + t1, o1[i1--] = a1 % ge | 0, t1 = a1 / ge | 0;\n        o1[i1] = (o1[i1] + t1) % ge | 0;\n    }\n    for(; !o1[--s1];)o1.pop();\n    return t1 ? ++r1 : o1.shift(), e1.d = o1, e1.e = sn(o1, r1), x ? y(e1, p1.precision, p1.rounding) : e1;\n};\nm.toBinary = function(e1, t1) {\n    return Si(this, 2, e1, t1);\n};\nm.toDecimalPlaces = m.toDP = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    return r1 = new n1(r1), e1 === void 0 ? r1 : (ie(e1, 0, ze), t1 === void 0 ? t1 = n1.rounding : ie(t1, 0, 8), y(r1, e1 + r1.e + 1, t1));\n};\nm.toExponential = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? r1 = we(n1, !0) : (ie(e1, 0, ze), t1 === void 0 ? t1 = i1.rounding : ie(t1, 0, 8), n1 = y(new i1(n1), e1 + 1, t1), r1 = we(n1, !0, e1 + 1)), n1.isNeg() && !n1.isZero() ? \"-\" + r1 : r1;\n};\nm.toFixed = function(e1, t1) {\n    var r1, n1, i1 = this, o1 = i1.constructor;\n    return e1 === void 0 ? r1 = we(i1) : (ie(e1, 0, ze), t1 === void 0 ? t1 = o1.rounding : ie(t1, 0, 8), n1 = y(new o1(i1), e1 + i1.e + 1, t1), r1 = we(n1, !1, e1 + n1.e + 1)), i1.isNeg() && !i1.isZero() ? \"-\" + r1 : r1;\n};\nm.toFraction = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, g1 = f1.d, h1 = f1.constructor;\n    if (!g1) return new h1(f1);\n    if (u1 = r1 = new h1(1), n1 = l1 = new h1(0), t1 = new h1(n1), o1 = t1.e = Cs(g1) - f1.e - 1, s1 = o1 % b, t1.d[0] = G(10, s1 < 0 ? b + s1 : s1), e1 == null) e1 = o1 > 0 ? t1 : u1;\n    else {\n        if (a1 = new h1(e1), !a1.isInt() || a1.lt(u1)) throw Error(Ke + a1);\n        e1 = a1.gt(t1) ? o1 > 0 ? t1 : u1 : a1;\n    }\n    for(x = !1, a1 = new h1(K(g1)), c1 = h1.precision, h1.precision = o1 = g1.length * b * 2; p1 = N(a1, t1, 0, 1, 1), i1 = r1.plus(p1.times(n1)), i1.cmp(e1) != 1;)r1 = n1, n1 = i1, i1 = u1, u1 = l1.plus(p1.times(i1)), l1 = i1, i1 = t1, t1 = a1.minus(p1.times(i1)), a1 = i1;\n    return i1 = N(e1.minus(r1), n1, 0, 1, 1), l1 = l1.plus(i1.times(u1)), r1 = r1.plus(i1.times(n1)), l1.s = u1.s = f1.s, d1 = N(u1, n1, o1, 1).minus(f1).abs().cmp(N(l1, r1, o1, 1).minus(f1).abs()) < 1 ? [\n        u1,\n        n1\n    ] : [\n        l1,\n        r1\n    ], h1.precision = c1, x = !0, d1;\n};\nm.toHexadecimal = m.toHex = function(e1, t1) {\n    return Si(this, 16, e1, t1);\n};\nm.toNearest = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    if (r1 = new n1(r1), e1 == null) {\n        if (!r1.d) return r1;\n        e1 = new n1(1), t1 = n1.rounding;\n    } else {\n        if (e1 = new n1(e1), t1 === void 0 ? t1 = n1.rounding : ie(t1, 0, 8), !r1.d) return e1.s ? r1 : e1;\n        if (!e1.d) return e1.s && (e1.s = r1.s), e1;\n    }\n    return e1.d[0] ? (x = !1, r1 = N(r1, e1, 0, t1, 1).times(e1), x = !0, y(r1)) : (e1.s = r1.s, r1 = e1), r1;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e1, t1) {\n    return Si(this, 8, e1, t1);\n};\nm.toPower = m.pow = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1 = this, l1 = a1.constructor, u1 = +(e1 = new l1(e1));\n    if (!a1.d || !e1.d || !a1.d[0] || !e1.d[0]) return new l1(G(+a1, u1));\n    if (a1 = new l1(a1), a1.eq(1)) return a1;\n    if (n1 = l1.precision, o1 = l1.rounding, e1.eq(1)) return y(a1, n1, o1);\n    if (t1 = ee(e1.e / b), t1 >= e1.d.length - 1 && (r1 = u1 < 0 ? -u1 : u1) <= xc) return i1 = Ss(l1, a1, r1, n1), e1.s < 0 ? new l1(1).div(i1) : y(i1, n1, o1);\n    if (s1 = a1.s, s1 < 0) {\n        if (t1 < e1.d.length - 1) return new l1(NaN);\n        if (e1.d[t1] & 1 || (s1 = 1), a1.e == 0 && a1.d[0] == 1 && a1.d.length == 1) return a1.s = s1, a1;\n    }\n    return r1 = G(+a1, u1), t1 = r1 == 0 || !isFinite(r1) ? ee(u1 * (Math.log(\"0.\" + K(a1.d)) / Math.LN10 + a1.e + 1)) : new l1(r1 + \"\").e, t1 > l1.maxE + 1 || t1 < l1.minE - 1 ? new l1(t1 > 0 ? s1 / 0 : 0) : (x = !1, l1.rounding = a1.s = 1, r1 = Math.min(12, (t1 + \"\").length), i1 = Ri(e1.times(He(a1, n1 + r1)), n1), i1.d && (i1 = y(i1, n1 + 5, 1), rr(i1.d, n1, o1) && (t1 = n1 + 10, i1 = y(Ri(e1.times(He(a1, t1 + r1)), t1), t1 + 5, 1), +K(i1.d).slice(n1 + 1, n1 + 15) + 1 == 1e14 && (i1 = y(i1, n1 + 1, 0)))), i1.s = s1, x = !0, l1.rounding = o1, y(i1, n1, o1));\n};\nm.toPrecision = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? r1 = we(n1, n1.e <= i1.toExpNeg || n1.e >= i1.toExpPos) : (ie(e1, 1, ze), t1 === void 0 ? t1 = i1.rounding : ie(t1, 0, 8), n1 = y(new i1(n1), e1, t1), r1 = we(n1, e1 <= n1.e || n1.e <= i1.toExpNeg, e1)), n1.isNeg() && !n1.isZero() ? \"-\" + r1 : r1;\n};\nm.toSignificantDigits = m.toSD = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    return e1 === void 0 ? (e1 = n1.precision, t1 = n1.rounding) : (ie(e1, 1, ze), t1 === void 0 ? t1 = n1.rounding : ie(t1, 0, 8)), y(new n1(r1), e1, t1);\n};\nm.toString = function() {\n    var e1 = this, t1 = e1.constructor, r1 = we(e1, e1.e <= t1.toExpNeg || e1.e >= t1.toExpPos);\n    return e1.isNeg() && !e1.isZero() ? \"-\" + r1 : r1;\n};\nm.truncated = m.trunc = function() {\n    return y(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e1 = this, t1 = e1.constructor, r1 = we(e1, e1.e <= t1.toExpNeg || e1.e >= t1.toExpPos);\n    return e1.isNeg() ? \"-\" + r1 : r1;\n};\nfunction K(e1) {\n    var t1, r1, n1, i1 = e1.length - 1, o1 = \"\", s1 = e1[0];\n    if (i1 > 0) {\n        for(o1 += s1, t1 = 1; t1 < i1; t1++)n1 = e1[t1] + \"\", r1 = b - n1.length, r1 && (o1 += We(r1)), o1 += n1;\n        s1 = e1[t1], n1 = s1 + \"\", r1 = b - n1.length, r1 && (o1 += We(r1));\n    } else if (s1 === 0) return \"0\";\n    for(; s1 % 10 === 0;)s1 /= 10;\n    return o1 + s1;\n}\nfunction ie(e1, t1, r1) {\n    if (e1 !== ~~e1 || e1 < t1 || e1 > r1) throw Error(Ke + e1);\n}\nfunction rr(e1, t1, r1, n1) {\n    var i1, o1, s1, a1;\n    for(o1 = e1[0]; o1 >= 10; o1 /= 10)--t1;\n    return --t1 < 0 ? (t1 += b, i1 = 0) : (i1 = Math.ceil((t1 + 1) / b), t1 %= b), o1 = G(10, b - t1), a1 = e1[i1] % o1 | 0, n1 == null ? t1 < 3 ? (t1 == 0 ? a1 = a1 / 100 | 0 : t1 == 1 && (a1 = a1 / 10 | 0), s1 = r1 < 4 && a1 == 99999 || r1 > 3 && a1 == 49999 || a1 == 5e4 || a1 == 0) : s1 = (r1 < 4 && a1 + 1 == o1 || r1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 100 | 0) == G(10, t1 - 2) - 1 || (a1 == o1 / 2 || a1 == 0) && (e1[i1 + 1] / o1 / 100 | 0) == 0 : t1 < 4 ? (t1 == 0 ? a1 = a1 / 1e3 | 0 : t1 == 1 ? a1 = a1 / 100 | 0 : t1 == 2 && (a1 = a1 / 10 | 0), s1 = (n1 || r1 < 4) && a1 == 9999 || !n1 && r1 > 3 && a1 == 4999) : s1 = ((n1 || r1 < 4) && a1 + 1 == o1 || !n1 && r1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 1e3 | 0) == G(10, t1 - 3) - 1, s1;\n}\nfunction en(e1, t1, r1) {\n    for(var n1, i1 = [\n        0\n    ], o1, s1 = 0, a1 = e1.length; s1 < a1;){\n        for(o1 = i1.length; o1--;)i1[o1] *= t1;\n        for(i1[0] += Pi.indexOf(e1.charAt(s1++)), n1 = 0; n1 < i1.length; n1++)i1[n1] > r1 - 1 && (i1[n1 + 1] === void 0 && (i1[n1 + 1] = 0), i1[n1 + 1] += i1[n1] / r1 | 0, i1[n1] %= r1);\n    }\n    return i1.reverse();\n}\nfunction vc(e1, t1) {\n    var r1, n1, i1;\n    if (t1.isZero()) return t1;\n    n1 = t1.d.length, n1 < 32 ? (r1 = Math.ceil(n1 / 3), i1 = (1 / an(4, r1)).toString()) : (r1 = 16, i1 = \"2.3283064365386962890625e-10\"), e1.precision += r1, t1 = Et(e1, 1, t1.times(i1), new e1(1));\n    for(var o1 = r1; o1--;){\n        var s1 = t1.times(t1);\n        t1 = s1.times(s1).minus(s1).times(8).plus(1);\n    }\n    return e1.precision -= r1, t1;\n}\nvar N = function() {\n    function e1(n1, i1, o1) {\n        var s1, a1 = 0, l1 = n1.length;\n        for(n1 = n1.slice(); l1--;)s1 = n1[l1] * i1 + a1, n1[l1] = s1 % o1 | 0, a1 = s1 / o1 | 0;\n        return a1 && n1.unshift(a1), n1;\n    }\n    function t1(n1, i1, o1, s1) {\n        var a1, l1;\n        if (o1 != s1) l1 = o1 > s1 ? 1 : -1;\n        else for(a1 = l1 = 0; a1 < o1; a1++)if (n1[a1] != i1[a1]) {\n            l1 = n1[a1] > i1[a1] ? 1 : -1;\n            break;\n        }\n        return l1;\n    }\n    function r1(n1, i1, o1, s1) {\n        for(var a1 = 0; o1--;)n1[o1] -= a1, a1 = n1[o1] < i1[o1] ? 1 : 0, n1[o1] = a1 * s1 + n1[o1] - i1[o1];\n        for(; !n1[0] && n1.length > 1;)n1.shift();\n    }\n    return function(n1, i1, o1, s1, a1, l1) {\n        var u1, c1, p1, d1, f1, g1, h1, O1, T1, S1, C1, E1, me1, ae1, Bt1, U1, ne1, Ie1, z1, dt1, Lr1 = n1.constructor, qn1 = n1.s == i1.s ? 1 : -1, Y1 = n1.d, _1 = i1.d;\n        if (!Y1 || !Y1[0] || !_1 || !_1[0]) return new Lr1(!n1.s || !i1.s || (Y1 ? _1 && Y1[0] == _1[0] : !_1) ? NaN : Y1 && Y1[0] == 0 || !_1 ? qn1 * 0 : qn1 / 0);\n        for(l1 ? (f1 = 1, c1 = n1.e - i1.e) : (l1 = ge, f1 = b, c1 = ee(n1.e / f1) - ee(i1.e / f1)), z1 = _1.length, ne1 = Y1.length, T1 = new Lr1(qn1), S1 = T1.d = [], p1 = 0; _1[p1] == (Y1[p1] || 0); p1++);\n        if (_1[p1] > (Y1[p1] || 0) && c1--, o1 == null ? (ae1 = o1 = Lr1.precision, s1 = Lr1.rounding) : a1 ? ae1 = o1 + (n1.e - i1.e) + 1 : ae1 = o1, ae1 < 0) S1.push(1), g1 = !0;\n        else {\n            if (ae1 = ae1 / f1 + 2 | 0, p1 = 0, z1 == 1) {\n                for(d1 = 0, _1 = _1[0], ae1++; (p1 < ne1 || d1) && ae1--; p1++)Bt1 = d1 * l1 + (Y1[p1] || 0), S1[p1] = Bt1 / _1 | 0, d1 = Bt1 % _1 | 0;\n                g1 = d1 || p1 < ne1;\n            } else {\n                for(d1 = l1 / (_1[0] + 1) | 0, d1 > 1 && (_1 = e1(_1, d1, l1), Y1 = e1(Y1, d1, l1), z1 = _1.length, ne1 = Y1.length), U1 = z1, C1 = Y1.slice(0, z1), E1 = C1.length; E1 < z1;)C1[E1++] = 0;\n                dt1 = _1.slice(), dt1.unshift(0), Ie1 = _1[0], _1[1] >= l1 / 2 && ++Ie1;\n                do d1 = 0, u1 = t1(_1, C1, z1, E1), u1 < 0 ? (me1 = C1[0], z1 != E1 && (me1 = me1 * l1 + (C1[1] || 0)), d1 = me1 / Ie1 | 0, d1 > 1 ? (d1 >= l1 && (d1 = l1 - 1), h1 = e1(_1, d1, l1), O1 = h1.length, E1 = C1.length, u1 = t1(h1, C1, O1, E1), u1 == 1 && (d1--, r1(h1, z1 < O1 ? dt1 : _1, O1, l1))) : (d1 == 0 && (u1 = d1 = 1), h1 = _1.slice()), O1 = h1.length, O1 < E1 && h1.unshift(0), r1(C1, h1, E1, l1), u1 == -1 && (E1 = C1.length, u1 = t1(_1, C1, z1, E1), u1 < 1 && (d1++, r1(C1, z1 < E1 ? dt1 : _1, E1, l1))), E1 = C1.length) : u1 === 0 && (d1++, C1 = [\n                    0\n                ]), S1[p1++] = d1, u1 && C1[0] ? C1[E1++] = Y1[U1] || 0 : (C1 = [\n                    Y1[U1]\n                ], E1 = 1);\n                while ((U1++ < ne1 || C1[0] !== void 0) && ae1--);\n                g1 = C1[0] !== void 0;\n            }\n            S1[0] || S1.shift();\n        }\n        if (f1 == 1) T1.e = c1, xs = g1;\n        else {\n            for(p1 = 1, d1 = S1[0]; d1 >= 10; d1 /= 10)p1++;\n            T1.e = p1 + c1 * f1 - 1, y(T1, a1 ? o1 + T1.e + 1 : o1, s1, g1);\n        }\n        return T1;\n    };\n}();\nfunction y(e1, t1, r1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor;\n    e: if (t1 != null) {\n        if (p1 = e1.d, !p1) return e1;\n        for(i1 = 1, a1 = p1[0]; a1 >= 10; a1 /= 10)i1++;\n        if (o1 = t1 - i1, o1 < 0) o1 += b, s1 = t1, c1 = p1[d1 = 0], l1 = c1 / G(10, i1 - s1 - 1) % 10 | 0;\n        else if (d1 = Math.ceil((o1 + 1) / b), a1 = p1.length, d1 >= a1) if (n1) {\n            for(; a1++ <= d1;)p1.push(0);\n            c1 = l1 = 0, i1 = 1, o1 %= b, s1 = o1 - b + 1;\n        } else break e;\n        else {\n            for(c1 = a1 = p1[d1], i1 = 1; a1 >= 10; a1 /= 10)i1++;\n            o1 %= b, s1 = o1 - b + i1, l1 = s1 < 0 ? 0 : c1 / G(10, i1 - s1 - 1) % 10 | 0;\n        }\n        if (n1 = n1 || t1 < 0 || p1[d1 + 1] !== void 0 || (s1 < 0 ? c1 : c1 % G(10, i1 - s1 - 1)), u1 = r1 < 4 ? (l1 || n1) && (r1 == 0 || r1 == (e1.s < 0 ? 3 : 2)) : l1 > 5 || l1 == 5 && (r1 == 4 || n1 || r1 == 6 && (o1 > 0 ? s1 > 0 ? c1 / G(10, i1 - s1) : 0 : p1[d1 - 1]) % 10 & 1 || r1 == (e1.s < 0 ? 8 : 7)), t1 < 1 || !p1[0]) return p1.length = 0, u1 ? (t1 -= e1.e + 1, p1[0] = G(10, (b - t1 % b) % b), e1.e = -t1 || 0) : p1[0] = e1.e = 0, e1;\n        if (o1 == 0 ? (p1.length = d1, a1 = 1, d1--) : (p1.length = d1 + 1, a1 = G(10, b - o1), p1[d1] = s1 > 0 ? (c1 / G(10, i1 - s1) % G(10, s1) | 0) * a1 : 0), u1) for(;;)if (d1 == 0) {\n            for(o1 = 1, s1 = p1[0]; s1 >= 10; s1 /= 10)o1++;\n            for(s1 = p1[0] += a1, a1 = 1; s1 >= 10; s1 /= 10)a1++;\n            o1 != a1 && (e1.e++, p1[0] == ge && (p1[0] = 1));\n            break;\n        } else {\n            if (p1[d1] += a1, p1[d1] != ge) break;\n            p1[d1--] = 0, a1 = 1;\n        }\n        for(o1 = p1.length; p1[--o1] === 0;)p1.pop();\n    }\n    return x && (e1.e > f1.maxE ? (e1.d = null, e1.e = NaN) : e1.e < f1.minE && (e1.e = 0, e1.d = [\n        0\n    ])), e1;\n}\nfunction we(e1, t1, r1) {\n    if (!e1.isFinite()) return Is(e1);\n    var n1, i1 = e1.e, o1 = K(e1.d), s1 = o1.length;\n    return t1 ? (r1 && (n1 = r1 - s1) > 0 ? o1 = o1.charAt(0) + \".\" + o1.slice(1) + We(n1) : s1 > 1 && (o1 = o1.charAt(0) + \".\" + o1.slice(1)), o1 = o1 + (e1.e < 0 ? \"e\" : \"e+\") + e1.e) : i1 < 0 ? (o1 = \"0.\" + We(-i1 - 1) + o1, r1 && (n1 = r1 - s1) > 0 && (o1 += We(n1))) : i1 >= s1 ? (o1 += We(i1 + 1 - s1), r1 && (n1 = r1 - i1 - 1) > 0 && (o1 = o1 + \".\" + We(n1))) : ((n1 = i1 + 1) < s1 && (o1 = o1.slice(0, n1) + \".\" + o1.slice(n1)), r1 && (n1 = r1 - s1) > 0 && (i1 + 1 === s1 && (o1 += \".\"), o1 += We(n1))), o1;\n}\nfunction sn(e1, t1) {\n    var r1 = e1[0];\n    for(t1 *= b; r1 >= 10; r1 /= 10)t1++;\n    return t1;\n}\nfunction nn(e1, t1, r1) {\n    if (t1 > Pc) throw x = !0, r1 && (e1.precision = r1), Error(Ps);\n    return y(new e1(tn), t1, 1, !0);\n}\nfunction fe(e1, t1, r1) {\n    if (t1 > Ti) throw Error(Ps);\n    return y(new e1(rn), t1, r1, !0);\n}\nfunction Cs(e1) {\n    var t1 = e1.length - 1, r1 = t1 * b + 1;\n    if (t1 = e1[t1], t1) {\n        for(; t1 % 10 == 0; t1 /= 10)r1--;\n        for(t1 = e1[0]; t1 >= 10; t1 /= 10)r1++;\n    }\n    return r1;\n}\nfunction We(e1) {\n    for(var t1 = \"\"; e1--;)t1 += \"0\";\n    return t1;\n}\nfunction Ss(e1, t1, r1, n1) {\n    var i1, o1 = new e1(1), s1 = Math.ceil(n1 / b + 4);\n    for(x = !1;;){\n        if (r1 % 2 && (o1 = o1.times(t1), Es(o1.d, s1) && (i1 = !0)), r1 = ee(r1 / 2), r1 === 0) {\n            r1 = o1.d.length - 1, i1 && o1.d[r1] === 0 && ++o1.d[r1];\n            break;\n        }\n        t1 = t1.times(t1), Es(t1.d, s1);\n    }\n    return x = !0, o1;\n}\nfunction bs(e1) {\n    return e1.d[e1.d.length - 1] & 1;\n}\nfunction As(e1, t1, r1) {\n    for(var n1, i1 = new e1(t1[0]), o1 = 0; ++o1 < t1.length;)if (n1 = new e1(t1[o1]), n1.s) i1[r1](n1) && (i1 = n1);\n    else {\n        i1 = n1;\n        break;\n    }\n    return i1;\n}\nfunction Ri(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1 = 0, c1 = 0, p1 = 0, d1 = e1.constructor, f1 = d1.rounding, g1 = d1.precision;\n    if (!e1.d || !e1.d[0] || e1.e > 17) return new d1(e1.d ? e1.d[0] ? e1.s < 0 ? 0 : 1 / 0 : 1 : e1.s ? e1.s < 0 ? 0 : e1 : NaN);\n    for(t1 == null ? (x = !1, l1 = g1) : l1 = t1, a1 = new d1(.03125); e1.e > -2;)e1 = e1.times(a1), p1 += 5;\n    for(n1 = Math.log(G(2, p1)) / Math.LN10 * 2 + 5 | 0, l1 += n1, r1 = o1 = s1 = new d1(1), d1.precision = l1;;){\n        if (o1 = y(o1.times(e1), l1, 1), r1 = r1.times(++c1), a1 = s1.plus(N(o1, r1, l1, 1)), K(a1.d).slice(0, l1) === K(s1.d).slice(0, l1)) {\n            for(i1 = p1; i1--;)s1 = y(s1.times(s1), l1, 1);\n            if (t1 == null) if (u1 < 3 && rr(s1.d, l1 - n1, f1, u1)) d1.precision = l1 += 10, r1 = o1 = a1 = new d1(1), c1 = 0, u1++;\n            else return y(s1, d1.precision = g1, f1, x = !0);\n            else return d1.precision = g1, s1;\n        }\n        s1 = a1;\n    }\n}\nfunction He(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = 1, g1 = 10, h1 = e1, O1 = h1.d, T1 = h1.constructor, S1 = T1.rounding, C1 = T1.precision;\n    if (h1.s < 0 || !O1 || !O1[0] || !h1.e && O1[0] == 1 && O1.length == 1) return new T1(O1 && !O1[0] ? -1 / 0 : h1.s != 1 ? NaN : O1 ? 0 : h1);\n    if (t1 == null ? (x = !1, c1 = C1) : c1 = t1, T1.precision = c1 += g1, r1 = K(O1), n1 = r1.charAt(0), Math.abs(o1 = h1.e) < 15e14) {\n        for(; n1 < 7 && n1 != 1 || n1 == 1 && r1.charAt(1) > 3;)h1 = h1.times(e1), r1 = K(h1.d), n1 = r1.charAt(0), f1++;\n        o1 = h1.e, n1 > 1 ? (h1 = new T1(\"0.\" + r1), o1++) : h1 = new T1(n1 + \".\" + r1.slice(1));\n    } else return u1 = nn(T1, c1 + 2, C1).times(o1 + \"\"), h1 = He(new T1(n1 + \".\" + r1.slice(1)), c1 - g1).plus(u1), T1.precision = C1, t1 == null ? y(h1, C1, S1, x = !0) : h1;\n    for(p1 = h1, l1 = s1 = h1 = N(h1.minus(1), h1.plus(1), c1, 1), d1 = y(h1.times(h1), c1, 1), i1 = 3;;){\n        if (s1 = y(s1.times(d1), c1, 1), u1 = l1.plus(N(s1, new T1(i1), c1, 1)), K(u1.d).slice(0, c1) === K(l1.d).slice(0, c1)) if (l1 = l1.times(2), o1 !== 0 && (l1 = l1.plus(nn(T1, c1 + 2, C1).times(o1 + \"\"))), l1 = N(l1, new T1(f1), c1, 1), t1 == null) if (rr(l1.d, c1 - g1, S1, a1)) T1.precision = c1 += g1, u1 = s1 = h1 = N(p1.minus(1), p1.plus(1), c1, 1), d1 = y(h1.times(h1), c1, 1), i1 = a1 = 1;\n        else return y(l1, T1.precision = C1, S1, x = !0);\n        else return T1.precision = C1, l1;\n        l1 = u1, i1 += 2;\n    }\n}\nfunction Is(e1) {\n    return String(e1.s * e1.s / 0);\n}\nfunction Ci(e1, t1) {\n    var r1, n1, i1;\n    for((r1 = t1.indexOf(\".\")) > -1 && (t1 = t1.replace(\".\", \"\")), (n1 = t1.search(/e/i)) > 0 ? (r1 < 0 && (r1 = n1), r1 += +t1.slice(n1 + 1), t1 = t1.substring(0, n1)) : r1 < 0 && (r1 = t1.length), n1 = 0; t1.charCodeAt(n1) === 48; n1++);\n    for(i1 = t1.length; t1.charCodeAt(i1 - 1) === 48; --i1);\n    if (t1 = t1.slice(n1, i1), t1) {\n        if (i1 -= n1, e1.e = r1 = r1 - n1 - 1, e1.d = [], n1 = (r1 + 1) % b, r1 < 0 && (n1 += b), n1 < i1) {\n            for(n1 && e1.d.push(+t1.slice(0, n1)), i1 -= b; n1 < i1;)e1.d.push(+t1.slice(n1, n1 += b));\n            t1 = t1.slice(n1), n1 = b - t1.length;\n        } else n1 -= i1;\n        for(; n1--;)t1 += \"0\";\n        e1.d.push(+t1), x && (e1.e > e1.constructor.maxE ? (e1.d = null, e1.e = NaN) : e1.e < e1.constructor.minE && (e1.e = 0, e1.d = [\n            0\n        ]));\n    } else e1.e = 0, e1.d = [\n        0\n    ];\n    return e1;\n}\nfunction Tc(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1, c1;\n    if (t1.indexOf(\"_\") > -1) {\n        if (t1 = t1.replace(/(\\d)_(?=\\d)/g, \"$1\"), Rs.test(t1)) return Ci(e1, t1);\n    } else if (t1 === \"Infinity\" || t1 === \"NaN\") return +t1 || (e1.s = NaN), e1.e = NaN, e1.d = null, e1;\n    if (Ec.test(t1)) r1 = 16, t1 = t1.toLowerCase();\n    else if (bc.test(t1)) r1 = 2;\n    else if (wc.test(t1)) r1 = 8;\n    else throw Error(Ke + t1);\n    for(o1 = t1.search(/p/i), o1 > 0 ? (l1 = +t1.slice(o1 + 1), t1 = t1.substring(2, o1)) : t1 = t1.slice(2), o1 = t1.indexOf(\".\"), s1 = o1 >= 0, n1 = e1.constructor, s1 && (t1 = t1.replace(\".\", \"\"), a1 = t1.length, o1 = a1 - o1, i1 = Ss(n1, new n1(r1), o1, o1 * 2)), u1 = en(t1, r1, ge), c1 = u1.length - 1, o1 = c1; u1[o1] === 0; --o1)u1.pop();\n    return o1 < 0 ? new n1(e1.s * 0) : (e1.e = sn(u1, c1), e1.d = u1, x = !1, s1 && (e1 = N(e1, i1, a1 * 4)), l1 && (e1 = e1.times(Math.abs(l1) < 54 ? G(2, l1) : it.pow(2, l1))), x = !0, e1);\n}\nfunction Rc(e1, t1) {\n    var r1, n1 = t1.d.length;\n    if (n1 < 3) return t1.isZero() ? t1 : Et(e1, 2, t1, t1);\n    r1 = 1.4 * Math.sqrt(n1), r1 = r1 > 16 ? 16 : r1 | 0, t1 = t1.times(1 / an(5, r1)), t1 = Et(e1, 2, t1, t1);\n    for(var i1, o1 = new e1(5), s1 = new e1(16), a1 = new e1(20); r1--;)i1 = t1.times(t1), t1 = t1.times(o1.plus(i1.times(s1.times(i1).minus(a1))));\n    return t1;\n}\nfunction Et(e1, t1, r1, n1, i1) {\n    var o1, s1, a1, l1, u1 = 1, c1 = e1.precision, p1 = Math.ceil(c1 / b);\n    for(x = !1, l1 = r1.times(r1), a1 = new e1(n1);;){\n        if (s1 = N(a1.times(l1), new e1(t1++ * t1++), c1, 1), a1 = i1 ? n1.plus(s1) : n1.minus(s1), n1 = N(s1.times(l1), new e1(t1++ * t1++), c1, 1), s1 = a1.plus(n1), s1.d[p1] !== void 0) {\n            for(o1 = p1; s1.d[o1] === a1.d[o1] && o1--;);\n            if (o1 == -1) break;\n        }\n        o1 = a1, a1 = n1, n1 = s1, s1 = o1, u1++;\n    }\n    return x = !0, s1.d.length = p1 + 1, s1;\n}\nfunction an(e1, t1) {\n    for(var r1 = e1; --t1;)r1 *= e1;\n    return r1;\n}\nfunction Os(e1, t1) {\n    var r1, n1 = t1.s < 0, i1 = fe(e1, e1.precision, 1), o1 = i1.times(.5);\n    if (t1 = t1.abs(), t1.lte(o1)) return Ne = n1 ? 4 : 1, t1;\n    if (r1 = t1.divToInt(i1), r1.isZero()) Ne = n1 ? 3 : 2;\n    else {\n        if (t1 = t1.minus(r1.times(i1)), t1.lte(o1)) return Ne = bs(r1) ? n1 ? 2 : 3 : n1 ? 4 : 1, t1;\n        Ne = bs(r1) ? n1 ? 1 : 4 : n1 ? 3 : 2;\n    }\n    return t1.minus(i1).abs();\n}\nfunction Si(e1, t1, r1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor, g1 = r1 !== void 0;\n    if (g1 ? (ie(r1, 1, ze), n1 === void 0 ? n1 = f1.rounding : ie(n1, 0, 8)) : (r1 = f1.precision, n1 = f1.rounding), !e1.isFinite()) c1 = Is(e1);\n    else {\n        for(c1 = we(e1), s1 = c1.indexOf(\".\"), g1 ? (i1 = 2, t1 == 16 ? r1 = r1 * 4 - 3 : t1 == 8 && (r1 = r1 * 3 - 2)) : i1 = t1, s1 >= 0 && (c1 = c1.replace(\".\", \"\"), d1 = new f1(1), d1.e = c1.length - s1, d1.d = en(we(d1), 10, i1), d1.e = d1.d.length), p1 = en(c1, 10, i1), o1 = l1 = p1.length; p1[--l1] == 0;)p1.pop();\n        if (!p1[0]) c1 = g1 ? \"0p+0\" : \"0\";\n        else {\n            if (s1 < 0 ? o1-- : (e1 = new f1(e1), e1.d = p1, e1.e = o1, e1 = N(e1, d1, r1, n1, 0, i1), p1 = e1.d, o1 = e1.e, u1 = xs), s1 = p1[r1], a1 = i1 / 2, u1 = u1 || p1[r1 + 1] !== void 0, u1 = n1 < 4 ? (s1 !== void 0 || u1) && (n1 === 0 || n1 === (e1.s < 0 ? 3 : 2)) : s1 > a1 || s1 === a1 && (n1 === 4 || u1 || n1 === 6 && p1[r1 - 1] & 1 || n1 === (e1.s < 0 ? 8 : 7)), p1.length = r1, u1) for(; ++p1[--r1] > i1 - 1;)p1[r1] = 0, r1 || (++o1, p1.unshift(1));\n            for(l1 = p1.length; !p1[l1 - 1]; --l1);\n            for(s1 = 0, c1 = \"\"; s1 < l1; s1++)c1 += Pi.charAt(p1[s1]);\n            if (g1) {\n                if (l1 > 1) if (t1 == 16 || t1 == 8) {\n                    for(s1 = t1 == 16 ? 4 : 3, --l1; l1 % s1; l1++)c1 += \"0\";\n                    for(p1 = en(c1, i1, t1), l1 = p1.length; !p1[l1 - 1]; --l1);\n                    for(s1 = 1, c1 = \"1.\"; s1 < l1; s1++)c1 += Pi.charAt(p1[s1]);\n                } else c1 = c1.charAt(0) + \".\" + c1.slice(1);\n                c1 = c1 + (o1 < 0 ? \"p\" : \"p+\") + o1;\n            } else if (o1 < 0) {\n                for(; ++o1;)c1 = \"0\" + c1;\n                c1 = \"0.\" + c1;\n            } else if (++o1 > l1) for(o1 -= l1; o1--;)c1 += \"0\";\n            else o1 < l1 && (c1 = c1.slice(0, o1) + \".\" + c1.slice(o1));\n        }\n        c1 = (t1 == 16 ? \"0x\" : t1 == 2 ? \"0b\" : t1 == 8 ? \"0o\" : \"\") + c1;\n    }\n    return e1.s < 0 ? \"-\" + c1 : c1;\n}\nfunction Es(e1, t1) {\n    if (e1.length > t1) return e1.length = t1, !0;\n}\nfunction Cc(e1) {\n    return new this(e1).abs();\n}\nfunction Sc(e1) {\n    return new this(e1).acos();\n}\nfunction Ac(e1) {\n    return new this(e1).acosh();\n}\nfunction Ic(e1, t1) {\n    return new this(e1).plus(t1);\n}\nfunction Oc(e1) {\n    return new this(e1).asin();\n}\nfunction kc(e1) {\n    return new this(e1).asinh();\n}\nfunction Dc(e1) {\n    return new this(e1).atan();\n}\nfunction _c(e1) {\n    return new this(e1).atanh();\n}\nfunction Fc(e1, t1) {\n    e1 = new this(e1), t1 = new this(t1);\n    var r1, n1 = this.precision, i1 = this.rounding, o1 = n1 + 4;\n    return !e1.s || !t1.s ? r1 = new this(NaN) : !e1.d && !t1.d ? (r1 = fe(this, o1, 1).times(t1.s > 0 ? .25 : .75), r1.s = e1.s) : !t1.d || e1.isZero() ? (r1 = t1.s < 0 ? fe(this, n1, i1) : new this(0), r1.s = e1.s) : !e1.d || t1.isZero() ? (r1 = fe(this, o1, 1).times(.5), r1.s = e1.s) : t1.s < 0 ? (this.precision = o1, this.rounding = 1, r1 = this.atan(N(e1, t1, o1, 1)), t1 = fe(this, o1, 1), this.precision = n1, this.rounding = i1, r1 = e1.s < 0 ? r1.minus(t1) : r1.plus(t1)) : r1 = this.atan(N(e1, t1, o1, 1)), r1;\n}\nfunction Lc(e1) {\n    return new this(e1).cbrt();\n}\nfunction Nc(e1) {\n    return y(e1 = new this(e1), e1.e + 1, 2);\n}\nfunction Mc(e1, t1, r1) {\n    return new this(e1).clamp(t1, r1);\n}\nfunction $c(e1) {\n    if (!e1 || typeof e1 != \"object\") throw Error(on + \"Object expected\");\n    var t1, r1, n1, i1 = e1.defaults === !0, o1 = [\n        \"precision\",\n        1,\n        ze,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -bt,\n        0,\n        \"toExpPos\",\n        0,\n        bt,\n        \"maxE\",\n        0,\n        bt,\n        \"minE\",\n        -bt,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(t1 = 0; t1 < o1.length; t1 += 3)if (r1 = o1[t1], i1 && (this[r1] = vi[r1]), (n1 = e1[r1]) !== void 0) if (ee(n1) === n1 && n1 >= o1[t1 + 1] && n1 <= o1[t1 + 2]) this[r1] = n1;\n    else throw Error(Ke + r1 + \": \" + n1);\n    if (r1 = \"crypto\", i1 && (this[r1] = vi[r1]), (n1 = e1[r1]) !== void 0) if (n1 === !0 || n1 === !1 || n1 === 0 || n1 === 1) if (n1) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r1] = !0;\n    else throw Error(vs);\n    else this[r1] = !1;\n    else throw Error(Ke + r1 + \": \" + n1);\n    return this;\n}\nfunction qc(e1) {\n    return new this(e1).cos();\n}\nfunction jc(e1) {\n    return new this(e1).cosh();\n}\nfunction ks(e1) {\n    var t1, r1, n1;\n    function i1(o1) {\n        var s1, a1, l1, u1 = this;\n        if (!(u1 instanceof i1)) return new i1(o1);\n        if (u1.constructor = i1, ws(o1)) {\n            u1.s = o1.s, x ? !o1.d || o1.e > i1.maxE ? (u1.e = NaN, u1.d = null) : o1.e < i1.minE ? (u1.e = 0, u1.d = [\n                0\n            ]) : (u1.e = o1.e, u1.d = o1.d.slice()) : (u1.e = o1.e, u1.d = o1.d ? o1.d.slice() : o1.d);\n            return;\n        }\n        if (l1 = typeof o1, l1 === \"number\") {\n            if (o1 === 0) {\n                u1.s = 1 / o1 < 0 ? -1 : 1, u1.e = 0, u1.d = [\n                    0\n                ];\n                return;\n            }\n            if (o1 < 0 ? (o1 = -o1, u1.s = -1) : u1.s = 1, o1 === ~~o1 && o1 < 1e7) {\n                for(s1 = 0, a1 = o1; a1 >= 10; a1 /= 10)s1++;\n                x ? s1 > i1.maxE ? (u1.e = NaN, u1.d = null) : s1 < i1.minE ? (u1.e = 0, u1.d = [\n                    0\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]);\n                return;\n            } else if (o1 * 0 !== 0) {\n                o1 || (u1.s = NaN), u1.e = NaN, u1.d = null;\n                return;\n            }\n            return Ci(u1, o1.toString());\n        } else if (l1 !== \"string\") throw Error(Ke + o1);\n        return (a1 = o1.charCodeAt(0)) === 45 ? (o1 = o1.slice(1), u1.s = -1) : (a1 === 43 && (o1 = o1.slice(1)), u1.s = 1), Rs.test(o1) ? Ci(u1, o1) : Tc(u1, o1);\n    }\n    if (i1.prototype = m, i1.ROUND_UP = 0, i1.ROUND_DOWN = 1, i1.ROUND_CEIL = 2, i1.ROUND_FLOOR = 3, i1.ROUND_HALF_UP = 4, i1.ROUND_HALF_DOWN = 5, i1.ROUND_HALF_EVEN = 6, i1.ROUND_HALF_CEIL = 7, i1.ROUND_HALF_FLOOR = 8, i1.EUCLID = 9, i1.config = i1.set = $c, i1.clone = ks, i1.isDecimal = ws, i1.abs = Cc, i1.acos = Sc, i1.acosh = Ac, i1.add = Ic, i1.asin = Oc, i1.asinh = kc, i1.atan = Dc, i1.atanh = _c, i1.atan2 = Fc, i1.cbrt = Lc, i1.ceil = Nc, i1.clamp = Mc, i1.cos = qc, i1.cosh = jc, i1.div = Vc, i1.exp = Bc, i1.floor = Uc, i1.hypot = Gc, i1.ln = Qc, i1.log = Jc, i1.log10 = Hc, i1.log2 = Wc, i1.max = Kc, i1.min = zc, i1.mod = Yc, i1.mul = Zc, i1.pow = Xc, i1.random = ep, i1.round = tp, i1.sign = rp, i1.sin = np, i1.sinh = ip, i1.sqrt = op, i1.sub = sp, i1.sum = ap, i1.tan = lp, i1.tanh = up, i1.trunc = cp, e1 === void 0 && (e1 = {}), e1 && e1.defaults !== !0) for(n1 = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], t1 = 0; t1 < n1.length;)e1.hasOwnProperty(r1 = n1[t1++]) || (e1[r1] = this[r1]);\n    return i1.config(e1), i1;\n}\nfunction Vc(e1, t1) {\n    return new this(e1).div(t1);\n}\nfunction Bc(e1) {\n    return new this(e1).exp();\n}\nfunction Uc(e1) {\n    return y(e1 = new this(e1), e1.e + 1, 3);\n}\nfunction Gc() {\n    var e1, t1, r1 = new this(0);\n    for(x = !1, e1 = 0; e1 < arguments.length;)if (t1 = new this(arguments[e1++]), t1.d) r1.d && (r1 = r1.plus(t1.times(t1)));\n    else {\n        if (t1.s) return x = !0, new this(1 / 0);\n        r1 = t1;\n    }\n    return x = !0, r1.sqrt();\n}\nfunction ws(e1) {\n    return e1 instanceof it || e1 && e1.toStringTag === Ts || !1;\n}\nfunction Qc(e1) {\n    return new this(e1).ln();\n}\nfunction Jc(e1, t1) {\n    return new this(e1).log(t1);\n}\nfunction Wc(e1) {\n    return new this(e1).log(2);\n}\nfunction Hc(e1) {\n    return new this(e1).log(10);\n}\nfunction Kc() {\n    return As(this, arguments, \"lt\");\n}\nfunction zc() {\n    return As(this, arguments, \"gt\");\n}\nfunction Yc(e1, t1) {\n    return new this(e1).mod(t1);\n}\nfunction Zc(e1, t1) {\n    return new this(e1).mul(t1);\n}\nfunction Xc(e1, t1) {\n    return new this(e1).pow(t1);\n}\nfunction ep(e1) {\n    var t1, r1, n1, i1, o1 = 0, s1 = new this(1), a1 = [];\n    if (e1 === void 0 ? e1 = this.precision : ie(e1, 1, ze), n1 = Math.ceil(e1 / b), this.crypto) if (crypto.getRandomValues) for(t1 = crypto.getRandomValues(new Uint32Array(n1)); o1 < n1;)i1 = t1[o1], i1 >= 429e7 ? t1[o1] = crypto.getRandomValues(new Uint32Array(1))[0] : a1[o1++] = i1 % 1e7;\n    else if (crypto.randomBytes) {\n        for(t1 = crypto.randomBytes(n1 *= 4); o1 < n1;)i1 = t1[o1] + (t1[o1 + 1] << 8) + (t1[o1 + 2] << 16) + ((t1[o1 + 3] & 127) << 24), i1 >= 214e7 ? crypto.randomBytes(4).copy(t1, o1) : (a1.push(i1 % 1e7), o1 += 4);\n        o1 = n1 / 4;\n    } else throw Error(vs);\n    else for(; o1 < n1;)a1[o1++] = Math.random() * 1e7 | 0;\n    for(n1 = a1[--o1], e1 %= b, n1 && e1 && (i1 = G(10, b - e1), a1[o1] = (n1 / i1 | 0) * i1); a1[o1] === 0; o1--)a1.pop();\n    if (o1 < 0) r1 = 0, a1 = [\n        0\n    ];\n    else {\n        for(r1 = -1; a1[0] === 0; r1 -= b)a1.shift();\n        for(n1 = 1, i1 = a1[0]; i1 >= 10; i1 /= 10)n1++;\n        n1 < b && (r1 -= b - n1);\n    }\n    return s1.e = r1, s1.d = a1, s1;\n}\nfunction tp(e1) {\n    return y(e1 = new this(e1), e1.e + 1, this.rounding);\n}\nfunction rp(e1) {\n    return e1 = new this(e1), e1.d ? e1.d[0] ? e1.s : 0 * e1.s : e1.s || NaN;\n}\nfunction np(e1) {\n    return new this(e1).sin();\n}\nfunction ip(e1) {\n    return new this(e1).sinh();\n}\nfunction op(e1) {\n    return new this(e1).sqrt();\n}\nfunction sp(e1, t1) {\n    return new this(e1).sub(t1);\n}\nfunction ap() {\n    var e1 = 0, t1 = arguments, r1 = new this(t1[e1]);\n    for(x = !1; r1.s && ++e1 < t1.length;)r1 = r1.plus(t1[e1]);\n    return x = !0, y(r1, this.precision, this.rounding);\n}\nfunction lp(e1) {\n    return new this(e1).tan();\n}\nfunction up(e1) {\n    return new this(e1).tanh();\n}\nfunction cp(e1) {\n    return y(e1 = new this(e1), e1.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar it = m.constructor = ks(vi);\ntn = new it(tn);\nrn = new it(rn);\nvar xe = it;\nfunction wt(e1) {\n    return e1 === null ? e1 : Array.isArray(e1) ? e1.map(wt) : typeof e1 == \"object\" ? pp(e1) ? dp(e1) : yt(e1, wt) : e1;\n}\nfunction pp(e1) {\n    return e1 !== null && typeof e1 == \"object\" && typeof e1.$type == \"string\";\n}\nfunction dp({ $type: e1, value: t1 }) {\n    switch(e1){\n        case \"BigInt\":\n            return BigInt(t1);\n        case \"Bytes\":\n            return Buffer.from(t1, \"base64\");\n        case \"DateTime\":\n            return new Date(t1);\n        case \"Decimal\":\n            return new xe(t1);\n        case \"Json\":\n            return JSON.parse(t1);\n        default:\n            Fe(t1, \"Unknown tagged value\");\n    }\n}\nfunction xt(e1) {\n    return e1.substring(0, 1).toLowerCase() + e1.substring(1);\n}\nfunction Pt(e1) {\n    return e1 instanceof Date || Object.prototype.toString.call(e1) === \"[object Date]\";\n}\nfunction ln(e1) {\n    return e1.toString() !== \"Invalid Date\";\n}\nfunction vt(e1) {\n    return it.isDecimal(e1) ? !0 : e1 !== null && typeof e1 == \"object\" && typeof e1.s == \"number\" && typeof e1.e == \"number\" && typeof e1.toFixed == \"function\" && Array.isArray(e1.d);\n}\nvar Ms = k(fi());\nvar Ns = k(__webpack_require__(/*! fs */ \"fs\"));\nvar Ds = {\n    keyword: De,\n    entity: De,\n    value: (e1)=>H(rt(e1)),\n    punctuation: rt,\n    directive: De,\n    function: De,\n    variable: (e1)=>H(rt(e1)),\n    string: (e1)=>H(qe(e1)),\n    boolean: ke,\n    number: De,\n    comment: Gt\n};\nvar mp = (e1)=>e1, un = {}, fp = 0, P = {\n    manual: un.Prism && un.Prism.manual,\n    disableWorkerMessageHandler: un.Prism && un.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e1) {\n            if (e1 instanceof he) {\n                let t1 = e1;\n                return new he(t1.type, P.util.encode(t1.content), t1.alias);\n            } else return Array.isArray(e1) ? e1.map(P.util.encode) : e1.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e1) {\n            return Object.prototype.toString.call(e1).slice(8, -1);\n        },\n        objId: function(e1) {\n            return e1.__id || Object.defineProperty(e1, \"__id\", {\n                value: ++fp\n            }), e1.__id;\n        },\n        clone: function e1(t1, r1) {\n            let n1, i1, o1 = P.util.type(t1);\n            switch(r1 = r1 || {}, o1){\n                case \"Object\":\n                    if (i1 = P.util.objId(t1), r1[i1]) return r1[i1];\n                    n1 = {}, r1[i1] = n1;\n                    for(let s1 in t1)t1.hasOwnProperty(s1) && (n1[s1] = e1(t1[s1], r1));\n                    return n1;\n                case \"Array\":\n                    return i1 = P.util.objId(t1), r1[i1] ? r1[i1] : (n1 = [], r1[i1] = n1, t1.forEach(function(s1, a1) {\n                        n1[a1] = e1(s1, r1);\n                    }), n1);\n                default:\n                    return t1;\n            }\n        }\n    },\n    languages: {\n        extend: function(e1, t1) {\n            let r1 = P.util.clone(P.languages[e1]);\n            for(let n1 in t1)r1[n1] = t1[n1];\n            return r1;\n        },\n        insertBefore: function(e1, t1, r1, n1) {\n            n1 = n1 || P.languages;\n            let i1 = n1[e1], o1 = {};\n            for(let a1 in i1)if (i1.hasOwnProperty(a1)) {\n                if (a1 == t1) for(let l1 in r1)r1.hasOwnProperty(l1) && (o1[l1] = r1[l1]);\n                r1.hasOwnProperty(a1) || (o1[a1] = i1[a1]);\n            }\n            let s1 = n1[e1];\n            return n1[e1] = o1, P.languages.DFS(P.languages, function(a1, l1) {\n                l1 === s1 && a1 != e1 && (this[a1] = o1);\n            }), o1;\n        },\n        DFS: function e1(t1, r1, n1, i1) {\n            i1 = i1 || {};\n            let o1 = P.util.objId;\n            for(let s1 in t1)if (t1.hasOwnProperty(s1)) {\n                r1.call(t1, s1, t1[s1], n1 || s1);\n                let a1 = t1[s1], l1 = P.util.type(a1);\n                l1 === \"Object\" && !i1[o1(a1)] ? (i1[o1(a1)] = !0, e1(a1, r1, null, i1)) : l1 === \"Array\" && !i1[o1(a1)] && (i1[o1(a1)] = !0, e1(a1, r1, s1, i1));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e1, t1, r1) {\n        let n1 = {\n            code: e1,\n            grammar: t1,\n            language: r1\n        };\n        return P.hooks.run(\"before-tokenize\", n1), n1.tokens = P.tokenize(n1.code, n1.grammar), P.hooks.run(\"after-tokenize\", n1), he.stringify(P.util.encode(n1.tokens), n1.language);\n    },\n    matchGrammar: function(e1, t1, r1, n1, i1, o1, s1) {\n        for(let h1 in r1){\n            if (!r1.hasOwnProperty(h1) || !r1[h1]) continue;\n            if (h1 == s1) return;\n            let O1 = r1[h1];\n            O1 = P.util.type(O1) === \"Array\" ? O1 : [\n                O1\n            ];\n            for(let T1 = 0; T1 < O1.length; ++T1){\n                let S1 = O1[T1], C1 = S1.inside, E1 = !!S1.lookbehind, me1 = !!S1.greedy, ae1 = 0, Bt1 = S1.alias;\n                if (me1 && !S1.pattern.global) {\n                    let U1 = S1.pattern.toString().match(/[imuy]*$/)[0];\n                    S1.pattern = RegExp(S1.pattern.source, U1 + \"g\");\n                }\n                S1 = S1.pattern || S1;\n                for(let U1 = n1, ne1 = i1; U1 < t1.length; ne1 += t1[U1].length, ++U1){\n                    let Ie1 = t1[U1];\n                    if (t1.length > e1.length) return;\n                    if (Ie1 instanceof he) continue;\n                    if (me1 && U1 != t1.length - 1) {\n                        S1.lastIndex = ne1;\n                        var p1 = S1.exec(e1);\n                        if (!p1) break;\n                        var c1 = p1.index + (E1 ? p1[1].length : 0), d1 = p1.index + p1[0].length, a1 = U1, l1 = ne1;\n                        for(let _1 = t1.length; a1 < _1 && (l1 < d1 || !t1[a1].type && !t1[a1 - 1].greedy); ++a1)l1 += t1[a1].length, c1 >= l1 && (++U1, ne1 = l1);\n                        if (t1[U1] instanceof he) continue;\n                        u1 = a1 - U1, Ie1 = e1.slice(ne1, l1), p1.index -= ne1;\n                    } else {\n                        S1.lastIndex = 0;\n                        var p1 = S1.exec(Ie1), u1 = 1;\n                    }\n                    if (!p1) {\n                        if (o1) break;\n                        continue;\n                    }\n                    E1 && (ae1 = p1[1] ? p1[1].length : 0);\n                    var c1 = p1.index + ae1, p1 = p1[0].slice(ae1), d1 = c1 + p1.length, f1 = Ie1.slice(0, c1), g1 = Ie1.slice(d1);\n                    let z1 = [\n                        U1,\n                        u1\n                    ];\n                    f1 && (++U1, ne1 += f1.length, z1.push(f1));\n                    let dt1 = new he(h1, C1 ? P.tokenize(p1, C1) : p1, Bt1, p1, me1);\n                    if (z1.push(dt1), g1 && z1.push(g1), Array.prototype.splice.apply(t1, z1), u1 != 1 && P.matchGrammar(e1, t1, r1, U1, ne1, !0, h1), o1) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e1, t1) {\n        let r1 = [\n            e1\n        ], n1 = t1.rest;\n        if (n1) {\n            for(let i1 in n1)t1[i1] = n1[i1];\n            delete t1.rest;\n        }\n        return P.matchGrammar(e1, r1, t1, 0, 0, !1), r1;\n    },\n    hooks: {\n        all: {},\n        add: function(e1, t1) {\n            let r1 = P.hooks.all;\n            r1[e1] = r1[e1] || [], r1[e1].push(t1);\n        },\n        run: function(e1, t1) {\n            let r1 = P.hooks.all[e1];\n            if (!(!r1 || !r1.length)) for(var n1 = 0, i1; i1 = r1[n1++];)i1(t1);\n        }\n    },\n    Token: he\n};\nP.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nP.languages.javascript = P.languages.extend(\"clike\", {\n    \"class-name\": [\n        P.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nP.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nP.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: P.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nP.languages.markup && P.languages.markup.tag.addInlined(\"script\", \"javascript\");\nP.languages.js = P.languages.javascript;\nP.languages.typescript = P.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nP.languages.ts = P.languages.typescript;\nfunction he(e1, t1, r1, n1, i1) {\n    this.type = e1, this.content = t1, this.alias = r1, this.length = (n1 || \"\").length | 0, this.greedy = !!i1;\n}\nhe.stringify = function(e1, t1) {\n    return typeof e1 == \"string\" ? e1 : Array.isArray(e1) ? e1.map(function(r1) {\n        return he.stringify(r1, t1);\n    }).join(\"\") : gp(e1.type)(e1.content);\n};\nfunction gp(e1) {\n    return Ds[e1] || mp;\n}\nfunction _s(e1) {\n    return hp(e1, P.languages.javascript);\n}\nfunction hp(e1, t1) {\n    return P.tokenize(e1, t1).map((n1)=>he.stringify(n1)).join(\"\");\n}\nvar Fs = k(us());\nfunction Ls(e1) {\n    return (0, Fs.default)(e1);\n}\nvar cn = class e {\n    static read(t1) {\n        let r1;\n        try {\n            r1 = Ns.default.readFileSync(t1, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(r1);\n    }\n    static fromContent(t1) {\n        let r1 = t1.split(/\\r?\\n/);\n        return new e(1, r1);\n    }\n    constructor(t1, r1){\n        this.firstLineNumber = t1, this.lines = r1;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(t1, r1) {\n        if (t1 < this.firstLineNumber || t1 > this.lines.length + this.firstLineNumber) return this;\n        let n1 = t1 - this.firstLineNumber, i1 = [\n            ...this.lines\n        ];\n        return i1[n1] = r1(i1[n1]), new e(this.firstLineNumber, i1);\n    }\n    mapLines(t1) {\n        return new e(this.firstLineNumber, this.lines.map((r1, n1)=>t1(r1, this.firstLineNumber + n1)));\n    }\n    lineAt(t1) {\n        return this.lines[t1 - this.firstLineNumber];\n    }\n    prependSymbolAt(t1, r1) {\n        return this.mapLines((n1, i1)=>i1 === t1 ? `${r1} ${n1}` : `  ${n1}`);\n    }\n    slice(t1, r1) {\n        let n1 = this.lines.slice(t1 - 1, r1).join(`\n`);\n        return new e(t1, Ls(n1).split(`\n`));\n    }\n    highlight() {\n        let t1 = _s(this.toString());\n        return new e(this.firstLineNumber, t1.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar yp = {\n    red: ce,\n    gray: Gt,\n    dim: Oe,\n    bold: H,\n    underline: X,\n    highlightSource: (e1)=>e1.highlight()\n}, bp = {\n    red: (e1)=>e1,\n    gray: (e1)=>e1,\n    dim: (e1)=>e1,\n    bold: (e1)=>e1,\n    underline: (e1)=>e1,\n    highlightSource: (e1)=>e1\n};\nfunction Ep({ message: e1, originalMethod: t1, isPanic: r1, callArguments: n1 }) {\n    return {\n        functionName: `prisma.${t1}()`,\n        message: e1,\n        isPanic: r1 ?? !1,\n        callArguments: n1\n    };\n}\nfunction wp({ callsite: e1, message: t1, originalMethod: r1, isPanic: n1, callArguments: i1 }, o1) {\n    let s1 = Ep({\n        message: t1,\n        originalMethod: r1,\n        isPanic: n1,\n        callArguments: i1\n    });\n    if (!e1 || \"undefined\" < \"u\" || \"development\" === \"production\") return s1;\n    let a1 = e1.getLocation();\n    if (!a1 || !a1.lineNumber || !a1.columnNumber) return s1;\n    let l1 = Math.max(1, a1.lineNumber - 3), u1 = cn.read(a1.fileName)?.slice(l1, a1.lineNumber), c1 = u1?.lineAt(a1.lineNumber);\n    if (u1 && c1) {\n        let p1 = Pp(c1), d1 = xp(c1);\n        if (!d1) return s1;\n        s1.functionName = `${d1.code})`, s1.location = a1, n1 || (u1 = u1.mapLineAt(a1.lineNumber, (g1)=>g1.slice(0, d1.openingBraceIndex))), u1 = o1.highlightSource(u1);\n        let f1 = String(u1.lastLineNumber).length;\n        if (s1.contextLines = u1.mapLines((g1, h1)=>o1.gray(String(h1).padStart(f1)) + \" \" + g1).mapLines((g1)=>o1.dim(g1)).prependSymbolAt(a1.lineNumber, o1.bold(o1.red(\"→\"))), i1) {\n            let g1 = p1 + f1 + 1;\n            g1 += 2, s1.callArguments = (0, Ms.default)(i1, g1).slice(g1);\n        }\n    }\n    return s1;\n}\nfunction xp(e1) {\n    let t1 = Object.keys(Je.ModelAction).join(\"|\"), n1 = new RegExp(String.raw`\\.(${t1})\\(`).exec(e1);\n    if (n1) {\n        let i1 = n1.index + n1[0].length, o1 = e1.lastIndexOf(\" \", n1.index) + 1;\n        return {\n            code: e1.slice(o1, i1),\n            openingBraceIndex: i1\n        };\n    }\n    return null;\n}\nfunction Pp(e1) {\n    let t1 = 0;\n    for(let r1 = 0; r1 < e1.length; r1++){\n        if (e1.charAt(r1) !== \" \") return t1;\n        t1++;\n    }\n    return t1;\n}\nfunction vp({ functionName: e1, location: t1, message: r1, isPanic: n1, contextLines: i1, callArguments: o1 }, s1) {\n    let a1 = [\n        \"\"\n    ], l1 = t1 ? \" in\" : \":\";\n    if (n1 ? (a1.push(s1.red(`Oops, an unknown error occurred! This is ${s1.bold(\"on us\")}, you did nothing wrong.`)), a1.push(s1.red(`It occurred in the ${s1.bold(`\\`${e1}\\``)} invocation${l1}`))) : a1.push(s1.red(`Invalid ${s1.bold(`\\`${e1}\\``)} invocation${l1}`)), t1 && a1.push(s1.underline(Tp(t1))), i1) {\n        a1.push(\"\");\n        let u1 = [\n            i1.toString()\n        ];\n        o1 && (u1.push(o1), u1.push(s1.dim(\")\"))), a1.push(u1.join(\"\")), o1 && a1.push(\"\");\n    } else a1.push(\"\"), o1 && a1.push(o1), a1.push(\"\");\n    return a1.push(r1), a1.join(`\n`);\n}\nfunction Tp(e1) {\n    let t1 = [\n        e1.fileName\n    ];\n    return e1.lineNumber && t1.push(String(e1.lineNumber)), e1.columnNumber && t1.push(String(e1.columnNumber)), t1.join(\":\");\n}\nfunction Tt(e1) {\n    let t1 = e1.showColors ? yp : bp, r1;\n    return r1 = wp(e1, t1), vp(r1, t1);\n}\nvar Gs = k(Ai());\nfunction Vs(e1, t1, r1) {\n    let n1 = Bs(e1), i1 = Rp(n1), o1 = Sp(i1);\n    o1 ? pn(o1, t1, r1) : t1.addErrorMessage(()=>\"Unknown error\");\n}\nfunction Bs(e1) {\n    return e1.errors.flatMap((t1)=>t1.kind === \"Union\" ? Bs(t1) : [\n            t1\n        ]);\n}\nfunction Rp(e1) {\n    let t1 = new Map, r1 = [];\n    for (let n1 of e1){\n        if (n1.kind !== \"InvalidArgumentType\") {\n            r1.push(n1);\n            continue;\n        }\n        let i1 = `${n1.selectionPath.join(\".\")}:${n1.argumentPath.join(\".\")}`, o1 = t1.get(i1);\n        o1 ? t1.set(i1, {\n            ...n1,\n            argument: {\n                ...n1.argument,\n                typeNames: Cp(o1.argument.typeNames, n1.argument.typeNames)\n            }\n        }) : t1.set(i1, n1);\n    }\n    return r1.push(...t1.values()), r1;\n}\nfunction Cp(e1, t1) {\n    return [\n        ...new Set(e1.concat(t1))\n    ];\n}\nfunction Sp(e1) {\n    return xi(e1, (t1, r1)=>{\n        let n1 = qs(t1), i1 = qs(r1);\n        return n1 !== i1 ? n1 - i1 : js(t1) - js(r1);\n    });\n}\nfunction qs(e1) {\n    let t1 = 0;\n    return Array.isArray(e1.selectionPath) && (t1 += e1.selectionPath.length), Array.isArray(e1.argumentPath) && (t1 += e1.argumentPath.length), t1;\n}\nfunction js(e1) {\n    switch(e1.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar ue = class {\n    constructor(t1, r1){\n        this.name = t1;\n        this.value = r1;\n        this.isRequired = !1;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(t1) {\n        let { colors: { green: r1 } } = t1.context;\n        t1.addMarginSymbol(r1(this.isRequired ? \"+\" : \"?\")), t1.write(r1(this.name)), this.isRequired || t1.write(r1(\"?\")), t1.write(r1(\": \")), typeof this.value == \"string\" ? t1.write(r1(this.value)) : t1.write(this.value);\n    }\n};\nvar Rt = class {\n    constructor(t1 = 0, r1){\n        this.context = r1;\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.currentIndent = t1;\n    }\n    write(t1) {\n        return typeof t1 == \"string\" ? this.currentLine += t1 : t1.write(this), this;\n    }\n    writeJoined(t1, r1, n1 = (i1, o1)=>o1.write(i1)) {\n        let i1 = r1.length - 1;\n        for(let o1 = 0; o1 < r1.length; o1++)n1(r1[o1], this), o1 !== i1 && this.write(t1);\n        return this;\n    }\n    writeLine(t1) {\n        return this.write(t1).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let t1 = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, t1?.(), this;\n    }\n    withIndent(t1) {\n        return this.indent(), t1(this), this.unindent(), this;\n    }\n    afterNextNewline(t1) {\n        return this.afterNextNewLineCallback = t1, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(t1) {\n        return this.marginSymbol = t1, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let t1 = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + t1.slice(1) : t1;\n    }\n};\nvar dn = class {\n    constructor(t1){\n        this.value = t1;\n    }\n    write(t1) {\n        t1.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar mn = (e1)=>e1, fn = {\n    bold: mn,\n    red: mn,\n    green: mn,\n    dim: mn,\n    enabled: !1\n}, Us = {\n    bold: H,\n    red: ce,\n    green: qe,\n    dim: Oe,\n    enabled: !0\n}, Ct = {\n    write (e1) {\n        e1.writeLine(\",\");\n    }\n};\nvar Pe = class {\n    constructor(t1){\n        this.contents = t1;\n        this.isUnderlined = !1;\n        this.color = (t1)=>t1;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(t1) {\n        return this.color = t1, this;\n    }\n    write(t1) {\n        let r1 = t1.getCurrentLineLength();\n        t1.write(this.color(this.contents)), this.isUnderlined && t1.afterNextNewline(()=>{\n            t1.write(\" \".repeat(r1)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar Ye = class {\n    constructor(){\n        this.hasError = !1;\n    }\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n};\nvar St = class extends Ye {\n    constructor(){\n        super(...arguments);\n        this.items = [];\n    }\n    addItem(r1) {\n        return this.items.push(new dn(r1)), this;\n    }\n    getField(r1) {\n        return this.items[r1];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n1)=>n1.value.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithItems(r1);\n    }\n    writeEmpty(r1) {\n        let n1 = new Pe(\"[]\");\n        this.hasError && n1.setColor(r1.context.colors.red).underline(), r1.write(n1);\n    }\n    writeWithItems(r1) {\n        let { colors: n1 } = r1.context;\n        r1.writeLine(\"[\").withIndent(()=>r1.writeJoined(Ct, this.items).newLine()).write(\"]\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(n1.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n    asObject() {}\n};\nvar At = class e extends Ye {\n    constructor(){\n        super(...arguments);\n        this.fields = {};\n        this.suggestions = [];\n    }\n    addField(r1) {\n        this.fields[r1.name] = r1;\n    }\n    addSuggestion(r1) {\n        this.suggestions.push(r1);\n    }\n    getField(r1) {\n        return this.fields[r1];\n    }\n    getDeepField(r1) {\n        let [n1, ...i1] = r1, o1 = this.getField(n1);\n        if (!o1) return;\n        let s1 = o1;\n        for (let a1 of i1){\n            let l1;\n            if (s1.value instanceof e ? l1 = s1.value.getField(a1) : s1.value instanceof St && (l1 = s1.value.getField(Number(a1))), !l1) return;\n            s1 = l1;\n        }\n        return s1;\n    }\n    getDeepFieldValue(r1) {\n        return r1.length === 0 ? this : this.getDeepField(r1)?.value;\n    }\n    hasField(r1) {\n        return !!this.getField(r1);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r1) {\n        delete this.fields[r1];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r1) {\n        return this.getField(r1)?.value;\n    }\n    getDeepSubSelectionValue(r1) {\n        let n1 = this;\n        for (let i1 of r1){\n            if (!(n1 instanceof e)) return;\n            let o1 = n1.getSubSelectionValue(i1);\n            if (!o1) return;\n            n1 = o1;\n        }\n        return n1;\n    }\n    getDeepSelectionParent(r1) {\n        let n1 = this.getSelectionParent();\n        if (!n1) return;\n        let i1 = n1;\n        for (let o1 of r1){\n            let s1 = i1.value.getFieldValue(o1);\n            if (!s1 || !(s1 instanceof e)) return;\n            let a1 = s1.getSelectionParent();\n            if (!a1) return;\n            i1 = a1;\n        }\n        return i1;\n    }\n    getSelectionParent() {\n        let r1 = this.getField(\"select\")?.value.asObject();\n        if (r1) return {\n            kind: \"select\",\n            value: r1\n        };\n        let n1 = this.getField(\"include\")?.value.asObject();\n        if (n1) return {\n            kind: \"include\",\n            value: n1\n        };\n    }\n    getSubSelectionValue(r1) {\n        return this.getSelectionParent()?.value.fields[r1].value;\n    }\n    getPrintWidth() {\n        let r1 = Object.values(this.fields);\n        return r1.length == 0 ? 2 : Math.max(...r1.map((i1)=>i1.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        let n1 = Object.values(this.fields);\n        if (n1.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithContents(r1, n1);\n    }\n    asObject() {\n        return this;\n    }\n    writeEmpty(r1) {\n        let n1 = new Pe(\"{}\");\n        this.hasError && n1.setColor(r1.context.colors.red).underline(), r1.write(n1);\n    }\n    writeWithContents(r1, n1) {\n        r1.writeLine(\"{\").withIndent(()=>{\n            r1.writeJoined(Ct, [\n                ...n1,\n                ...this.suggestions\n            ]).newLine();\n        }), r1.write(\"}\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(r1.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar W = class extends Ye {\n    constructor(r1){\n        super();\n        this.text = r1;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(r1) {\n        let n1 = new Pe(this.text);\n        this.hasError && n1.underline().setColor(r1.context.colors.red), r1.write(n1);\n    }\n    asObject() {}\n};\nvar nr = class {\n    constructor(){\n        this.fields = [];\n    }\n    addField(t1, r1) {\n        return this.fields.push({\n            write (n1) {\n                let { green: i1, dim: o1 } = n1.context.colors;\n                n1.write(i1(o1(`${t1}: ${r1}`))).addMarginSymbol(i1(o1(\"+\")));\n            }\n        }), this;\n    }\n    write(t1) {\n        let { colors: { green: r1 } } = t1.context;\n        t1.writeLine(r1(\"{\")).withIndent(()=>{\n            t1.writeJoined(Ct, this.fields).newLine();\n        }).write(r1(\"}\")).addMarginSymbol(r1(\"+\"));\n    }\n};\nfunction pn(e1, t1, r1) {\n    switch(e1.kind){\n        case \"MutuallyExclusiveFields\":\n            Ip(e1, t1);\n            break;\n        case \"IncludeOnScalar\":\n            Op(e1, t1);\n            break;\n        case \"EmptySelection\":\n            kp(e1, t1, r1);\n            break;\n        case \"UnknownSelectionField\":\n            Lp(e1, t1);\n            break;\n        case \"InvalidSelectionValue\":\n            Np(e1, t1);\n            break;\n        case \"UnknownArgument\":\n            Mp(e1, t1);\n            break;\n        case \"UnknownInputField\":\n            $p(e1, t1);\n            break;\n        case \"RequiredArgumentMissing\":\n            qp(e1, t1);\n            break;\n        case \"InvalidArgumentType\":\n            jp(e1, t1);\n            break;\n        case \"InvalidArgumentValue\":\n            Vp(e1, t1);\n            break;\n        case \"ValueTooLarge\":\n            Bp(e1, t1);\n            break;\n        case \"SomeFieldsMissing\":\n            Up(e1, t1);\n            break;\n        case \"TooManyFieldsGiven\":\n            Gp(e1, t1);\n            break;\n        case \"Union\":\n            Vs(e1, t1, r1);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e1.kind);\n    }\n}\nfunction Ip(e1, t1) {\n    let r1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    r1 && (r1.getField(e1.firstField)?.markAsError(), r1.getField(e1.secondField)?.markAsError()), t1.addErrorMessage((n1)=>`Please ${n1.bold(\"either\")} use ${n1.green(`\\`${e1.firstField}\\``)} or ${n1.green(`\\`${e1.secondField}\\``)}, but ${n1.red(\"not both\")} at the same time.`);\n}\nfunction Op(e1, t1) {\n    let [r1, n1] = ir(e1.selectionPath), i1 = e1.outputType, o1 = t1.arguments.getDeepSelectionParent(r1)?.value;\n    if (o1 && (o1.getField(n1)?.markAsError(), i1)) for (let s1 of i1.fields)s1.isRelation && o1.addSuggestion(new ue(s1.name, \"true\"));\n    t1.addErrorMessage((s1)=>{\n        let a1 = `Invalid scalar field ${s1.red(`\\`${n1}\\``)} for ${s1.bold(\"include\")} statement`;\n        return i1 ? a1 += ` on model ${s1.bold(i1.name)}. ${or(s1)}` : a1 += \".\", a1 += `\nNote that ${s1.bold(\"include\")} statements only accept relation fields.`, a1;\n    });\n}\nfunction kp(e1, t1, r1) {\n    let n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (n1) {\n        let i1 = n1.getField(\"omit\")?.value.asObject();\n        if (i1) {\n            Dp(e1, t1, i1);\n            return;\n        }\n        if (n1.hasField(\"select\")) {\n            _p(e1, t1);\n            return;\n        }\n    }\n    if (r1?.[xt(e1.outputType.name)]) {\n        Fp(e1, t1);\n        return;\n    }\n    t1.addErrorMessage(()=>`Unknown field at \"${e1.selectionPath.join(\".\")} selection\"`);\n}\nfunction Dp(e1, t1, r1) {\n    r1.removeAllFields();\n    for (let n1 of e1.outputType.fields)r1.addSuggestion(new ue(n1.name, \"false\"));\n    t1.addErrorMessage((n1)=>`The ${n1.red(\"omit\")} statement includes every field of the model ${n1.bold(e1.outputType.name)}. At least one field must be included in the result`);\n}\nfunction _p(e1, t1) {\n    let r1 = e1.outputType, n1 = t1.arguments.getDeepSelectionParent(e1.selectionPath)?.value, i1 = n1?.isEmpty() ?? !1;\n    n1 && (n1.removeAllFields(), Ws(n1, r1)), t1.addErrorMessage((o1)=>i1 ? `The ${o1.red(\"`select`\")} statement for type ${o1.bold(r1.name)} must not be empty. ${or(o1)}` : `The ${o1.red(\"`select`\")} statement for type ${o1.bold(r1.name)} needs ${o1.bold(\"at least one truthy value\")}.`);\n}\nfunction Fp(e1, t1) {\n    let r1 = new nr;\n    for (let i1 of e1.outputType.fields)i1.isRelation || r1.addField(i1.name, \"false\");\n    let n1 = new ue(\"omit\", r1).makeRequired();\n    if (e1.selectionPath.length === 0) t1.arguments.addSuggestion(n1);\n    else {\n        let [i1, o1] = ir(e1.selectionPath), a1 = t1.arguments.getDeepSelectionParent(i1)?.value.asObject()?.getField(o1);\n        if (a1) {\n            let l1 = a1?.value.asObject() ?? new At;\n            l1.addSuggestion(n1), a1.value = l1;\n        }\n    }\n    t1.addErrorMessage((i1)=>`The global ${i1.red(\"omit\")} configuration excludes every field of the model ${i1.bold(e1.outputType.name)}. At least one field must be included in the result`);\n}\nfunction Lp(e1, t1) {\n    let r1 = Hs(e1.selectionPath, t1);\n    if (r1.parentKind !== \"unknown\") {\n        r1.field.markAsError();\n        let n1 = r1.parent;\n        switch(r1.parentKind){\n            case \"select\":\n                Ws(n1, e1.outputType);\n                break;\n            case \"include\":\n                Qp(n1, e1.outputType);\n                break;\n            case \"omit\":\n                Jp(n1, e1.outputType);\n                break;\n        }\n    }\n    t1.addErrorMessage((n1)=>{\n        let i1 = [\n            `Unknown field ${n1.red(`\\`${r1.fieldName}\\``)}`\n        ];\n        return r1.parentKind !== \"unknown\" && i1.push(`for ${n1.bold(r1.parentKind)} statement`), i1.push(`on model ${n1.bold(`\\`${e1.outputType.name}\\``)}.`), i1.push(or(n1)), i1.join(\" \");\n    });\n}\nfunction Np(e1, t1) {\n    let r1 = Hs(e1.selectionPath, t1);\n    r1.parentKind !== \"unknown\" && r1.field.value.markAsError(), t1.addErrorMessage((n1)=>`Invalid value for selection field \\`${n1.red(r1.fieldName)}\\`: ${e1.underlyingError}`);\n}\nfunction Mp(e1, t1) {\n    let r1 = e1.argumentPath[0], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    n1 && (n1.getField(r1)?.markAsError(), Wp(n1, e1.arguments)), t1.addErrorMessage((i1)=>Qs(i1, r1, e1.arguments.map((o1)=>o1.name)));\n}\nfunction $p(e1, t1) {\n    let [r1, n1] = ir(e1.argumentPath), i1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (i1) {\n        i1.getDeepField(e1.argumentPath)?.markAsError();\n        let o1 = i1.getDeepFieldValue(r1)?.asObject();\n        o1 && Ks(o1, e1.inputType);\n    }\n    t1.addErrorMessage((o1)=>Qs(o1, n1, e1.inputType.fields.map((s1)=>s1.name)));\n}\nfunction Qs(e1, t1, r1) {\n    let n1 = [\n        `Unknown argument \\`${e1.red(t1)}\\`.`\n    ], i1 = Kp(t1, r1);\n    return i1 && n1.push(`Did you mean \\`${e1.green(i1)}\\`?`), r1.length > 0 && n1.push(or(e1)), n1.join(\" \");\n}\nfunction qp(e1, t1) {\n    let r1;\n    t1.addErrorMessage((l1)=>r1?.value instanceof W && r1.value.text === \"null\" ? `Argument \\`${l1.green(o1)}\\` must not be ${l1.red(\"null\")}.` : `Argument \\`${l1.green(o1)}\\` is missing.`);\n    let n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (!n1) return;\n    let [i1, o1] = ir(e1.argumentPath), s1 = new nr, a1 = n1.getDeepFieldValue(i1)?.asObject();\n    if (a1) if (r1 = a1.getField(o1), r1 && a1.removeField(o1), e1.inputTypes.length === 1 && e1.inputTypes[0].kind === \"object\") {\n        for (let l1 of e1.inputTypes[0].fields)s1.addField(l1.name, l1.typeNames.join(\" | \"));\n        a1.addSuggestion(new ue(o1, s1).makeRequired());\n    } else {\n        let l1 = e1.inputTypes.map(Js).join(\" | \");\n        a1.addSuggestion(new ue(o1, l1).makeRequired());\n    }\n}\nfunction Js(e1) {\n    return e1.kind === \"list\" ? `${Js(e1.elementType)}[]` : e1.name;\n}\nfunction jp(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    n1 && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), t1.addErrorMessage((i1)=>{\n        let o1 = gn(\"or\", e1.argument.typeNames.map((s1)=>i1.green(s1)));\n        return `Argument \\`${i1.bold(r1)}\\`: Invalid value provided. Expected ${o1}, provided ${i1.red(e1.inferredType)}.`;\n    });\n}\nfunction Vp(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    n1 && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), t1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Invalid value for argument \\`${i1.bold(r1)}\\``\n        ];\n        if (e1.underlyingError && o1.push(`: ${e1.underlyingError}`), o1.push(\".\"), e1.argument.typeNames.length > 0) {\n            let s1 = gn(\"or\", e1.argument.typeNames.map((a1)=>i1.green(a1)));\n            o1.push(` Expected ${s1}.`);\n        }\n        return o1.join(\"\");\n    });\n}\nfunction Bp(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject(), i1;\n    if (n1) {\n        let s1 = n1.getDeepField(e1.argumentPath)?.value;\n        s1?.markAsError(), s1 instanceof W && (i1 = s1.text);\n    }\n    t1.addErrorMessage((o1)=>{\n        let s1 = [\n            \"Unable to fit value\"\n        ];\n        return i1 && s1.push(o1.red(i1)), s1.push(`into a 64-bit signed integer for field \\`${o1.bold(r1)}\\``), s1.join(\" \");\n    });\n}\nfunction Up(e1, t1) {\n    let r1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject();\n    if (n1) {\n        let i1 = n1.getDeepFieldValue(e1.argumentPath)?.asObject();\n        i1 && Ks(i1, e1.inputType);\n    }\n    t1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Argument \\`${i1.bold(r1)}\\` of type ${i1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 ? e1.constraints.requiredFields ? o1.push(`${i1.green(\"at least one of\")} ${gn(\"or\", e1.constraints.requiredFields.map((s1)=>`\\`${i1.bold(s1)}\\``))} arguments.`) : o1.push(`${i1.green(\"at least one\")} argument.`) : o1.push(`${i1.green(`at least ${e1.constraints.minFieldCount}`)} arguments.`), o1.push(or(i1)), o1.join(\" \");\n    });\n}\nfunction Gp(e1, t1) {\n    let r1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath)?.asObject(), i1 = [];\n    if (n1) {\n        let o1 = n1.getDeepFieldValue(e1.argumentPath)?.asObject();\n        o1 && (o1.markAsError(), i1 = Object.keys(o1.getFields()));\n    }\n    t1.addErrorMessage((o1)=>{\n        let s1 = [\n            `Argument \\`${o1.bold(r1)}\\` of type ${o1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 && e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"exactly one\")} argument,`) : e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"at most one\")} argument,`) : s1.push(`${o1.green(`at most ${e1.constraints.maxFieldCount}`)} arguments,`), s1.push(`but you provided ${gn(\"and\", i1.map((a1)=>o1.red(a1)))}. Please choose`), e1.constraints.maxFieldCount === 1 ? s1.push(\"one.\") : s1.push(`${e1.constraints.maxFieldCount}.`), s1.join(\" \");\n    });\n}\nfunction Ws(e1, t1) {\n    for (let r1 of t1.fields)e1.hasField(r1.name) || e1.addSuggestion(new ue(r1.name, \"true\"));\n}\nfunction Qp(e1, t1) {\n    for (let r1 of t1.fields)r1.isRelation && !e1.hasField(r1.name) && e1.addSuggestion(new ue(r1.name, \"true\"));\n}\nfunction Jp(e1, t1) {\n    for (let r1 of t1.fields)!e1.hasField(r1.name) && !r1.isRelation && e1.addSuggestion(new ue(r1.name, \"true\"));\n}\nfunction Wp(e1, t1) {\n    for (let r1 of t1)e1.hasField(r1.name) || e1.addSuggestion(new ue(r1.name, r1.typeNames.join(\" | \")));\n}\nfunction Hs(e1, t1) {\n    let [r1, n1] = ir(e1), i1 = t1.arguments.getDeepSubSelectionValue(r1)?.asObject();\n    if (!i1) return {\n        parentKind: \"unknown\",\n        fieldName: n1\n    };\n    let o1 = i1.getFieldValue(\"select\")?.asObject(), s1 = i1.getFieldValue(\"include\")?.asObject(), a1 = i1.getFieldValue(\"omit\")?.asObject(), l1 = o1?.getField(n1);\n    return o1 && l1 ? {\n        parentKind: \"select\",\n        parent: o1,\n        field: l1,\n        fieldName: n1\n    } : (l1 = s1?.getField(n1), s1 && l1 ? {\n        parentKind: \"include\",\n        field: l1,\n        parent: s1,\n        fieldName: n1\n    } : (l1 = a1?.getField(n1), a1 && l1 ? {\n        parentKind: \"omit\",\n        field: l1,\n        parent: a1,\n        fieldName: n1\n    } : {\n        parentKind: \"unknown\",\n        fieldName: n1\n    }));\n}\nfunction Ks(e1, t1) {\n    if (t1.kind === \"object\") for (let r1 of t1.fields)e1.hasField(r1.name) || e1.addSuggestion(new ue(r1.name, r1.typeNames.join(\" | \")));\n}\nfunction ir(e1) {\n    let t1 = [\n        ...e1\n    ], r1 = t1.pop();\n    if (!r1) throw new Error(\"unexpected empty path\");\n    return [\n        t1,\n        r1\n    ];\n}\nfunction or({ green: e1, enabled: t1 }) {\n    return \"Available options are \" + (t1 ? `listed in ${e1(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction gn(e1, t1) {\n    if (t1.length === 1) return t1[0];\n    let r1 = [\n        ...t1\n    ], n1 = r1.pop();\n    return `${r1.join(\", \")} ${e1} ${n1}`;\n}\nvar Hp = 3;\nfunction Kp(e1, t1) {\n    let r1 = 1 / 0, n1;\n    for (let i1 of t1){\n        let o1 = (0, Gs.default)(e1, i1);\n        o1 > Hp || o1 < r1 && (r1 = o1, n1 = i1);\n    }\n    return n1;\n}\nfunction zs(e1) {\n    return e1.substring(0, 1).toLowerCase() + e1.substring(1);\n}\nvar sr = class {\n    constructor(t1, r1, n1, i1, o1){\n        this.modelName = t1, this.name = r1, this.typeName = n1, this.isList = i1, this.isEnum = o1;\n    }\n    _toGraphQLInputType() {\n        let t1 = this.isList ? \"List\" : \"\", r1 = this.isEnum ? \"Enum\" : \"\";\n        return `${t1}${r1}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction It(e1) {\n    return e1 instanceof sr;\n}\nvar hn = Symbol(), Ii = new WeakMap, Me = class {\n    constructor(t1){\n        t1 === hn ? Ii.set(this, `Prisma.${this._getName()}`) : Ii.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Ii.get(this);\n    }\n}, ar = class extends Me {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, lr = class extends ar {\n};\nOi(lr, \"DbNull\");\nvar ur = class extends ar {\n};\nOi(ur, \"JsonNull\");\nvar cr = class extends ar {\n};\nOi(cr, \"AnyNull\");\nvar yn = {\n    classes: {\n        DbNull: lr,\n        JsonNull: ur,\n        AnyNull: cr\n    },\n    instances: {\n        DbNull: new lr(hn),\n        JsonNull: new ur(hn),\n        AnyNull: new cr(hn)\n    }\n};\nfunction Oi(e1, t1) {\n    Object.defineProperty(e1, \"name\", {\n        value: t1,\n        configurable: !0\n    });\n}\nvar Ys = \": \", bn = class {\n    constructor(t1, r1){\n        this.name = t1;\n        this.value = r1;\n        this.hasError = !1;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + Ys.length;\n    }\n    write(t1) {\n        let r1 = new Pe(this.name);\n        this.hasError && r1.underline().setColor(t1.context.colors.red), t1.write(r1).write(Ys).write(this.value);\n    }\n};\nvar ki = class {\n    constructor(t1){\n        this.errorMessages = [];\n        this.arguments = t1;\n    }\n    write(t1) {\n        t1.write(this.arguments);\n    }\n    addErrorMessage(t1) {\n        this.errorMessages.push(t1);\n    }\n    renderAllMessages(t1) {\n        return this.errorMessages.map((r1)=>r1(t1)).join(`\n`);\n    }\n};\nfunction Ot(e1) {\n    return new ki(Zs(e1));\n}\nfunction Zs(e1) {\n    let t1 = new At;\n    for (let [r1, n1] of Object.entries(e1)){\n        let i1 = new bn(r1, Xs(n1));\n        t1.addField(i1);\n    }\n    return t1;\n}\nfunction Xs(e1) {\n    if (typeof e1 == \"string\") return new W(JSON.stringify(e1));\n    if (typeof e1 == \"number\" || typeof e1 == \"boolean\") return new W(String(e1));\n    if (typeof e1 == \"bigint\") return new W(`${e1}n`);\n    if (e1 === null) return new W(\"null\");\n    if (e1 === void 0) return new W(\"undefined\");\n    if (vt(e1)) return new W(`new Prisma.Decimal(\"${e1.toFixed()}\")`);\n    if (e1 instanceof Uint8Array) return Buffer.isBuffer(e1) ? new W(`Buffer.alloc(${e1.byteLength})`) : new W(`new Uint8Array(${e1.byteLength})`);\n    if (e1 instanceof Date) {\n        let t1 = ln(e1) ? e1.toISOString() : \"Invalid Date\";\n        return new W(`new Date(\"${t1}\")`);\n    }\n    return e1 instanceof Me ? new W(`Prisma.${e1._getName()}`) : It(e1) ? new W(`prisma.${zs(e1.modelName)}.$fields.${e1.name}`) : Array.isArray(e1) ? zp(e1) : typeof e1 == \"object\" ? Zs(e1) : new W(Object.prototype.toString.call(e1));\n}\nfunction zp(e1) {\n    let t1 = new St;\n    for (let r1 of e1)t1.addItem(Xs(r1));\n    return t1;\n}\nfunction En(e1, t1) {\n    let r1 = t1 === \"pretty\" ? Us : fn, n1 = e1.renderAllMessages(r1), i1 = new Rt(0, {\n        colors: r1\n    }).write(e1).toString();\n    return {\n        message: n1,\n        args: i1\n    };\n}\nfunction wn({ args: e1, errors: t1, errorFormat: r1, callsite: n1, originalMethod: i1, clientVersion: o1, globalOmit: s1 }) {\n    let a1 = Ot(e1);\n    for (let p1 of t1)pn(p1, a1, s1);\n    let { message: l1, args: u1 } = En(a1, r1), c1 = Tt({\n        message: l1,\n        callsite: n1,\n        originalMethod: i1,\n        showColors: r1 === \"pretty\",\n        callArguments: u1\n    });\n    throw new J(c1, {\n        clientVersion: o1\n    });\n}\nvar ve = class {\n    constructor(){\n        this._map = new Map;\n    }\n    get(t1) {\n        return this._map.get(t1)?.value;\n    }\n    set(t1, r1) {\n        this._map.set(t1, {\n            value: r1\n        });\n    }\n    getOrCreate(t1, r1) {\n        let n1 = this._map.get(t1);\n        if (n1) return n1.value;\n        let i1 = r1();\n        return this.set(t1, i1), i1;\n    }\n};\nfunction pr(e1) {\n    let t1;\n    return {\n        get () {\n            return t1 || (t1 = {\n                value: e1()\n            }), t1.value;\n        }\n    };\n}\nfunction Te(e1) {\n    return e1.replace(/^./, (t1)=>t1.toLowerCase());\n}\nfunction ta(e1, t1, r1) {\n    let n1 = Te(r1);\n    return !t1.result || !(t1.result.$allModels || t1.result[n1]) ? e1 : Yp({\n        ...e1,\n        ...ea(t1.name, e1, t1.result.$allModels),\n        ...ea(t1.name, e1, t1.result[n1])\n    });\n}\nfunction Yp(e1) {\n    let t1 = new ve, r1 = (n1, i1)=>t1.getOrCreate(n1, ()=>i1.has(n1) ? [\n                n1\n            ] : (i1.add(n1), e1[n1] ? e1[n1].needs.flatMap((o1)=>r1(o1, i1)) : [\n                n1\n            ]));\n    return yt(e1, (n1)=>({\n            ...n1,\n            needs: r1(n1.name, new Set)\n        }));\n}\nfunction ea(e1, t1, r1) {\n    return r1 ? yt(r1, ({ needs: n1, compute: i1 }, o1)=>({\n            name: o1,\n            needs: n1 ? Object.keys(n1).filter((s1)=>n1[s1]) : [],\n            compute: Zp(t1, o1, i1)\n        })) : {};\n}\nfunction Zp(e1, t1, r1) {\n    let n1 = e1?.[t1]?.compute;\n    return n1 ? (i1)=>r1({\n            ...i1,\n            [t1]: n1(i1)\n        }) : r1;\n}\nfunction ra(e1, t1) {\n    if (!t1) return e1;\n    let r1 = {\n        ...e1\n    };\n    for (let n1 of Object.values(t1))if (e1[n1.name]) for (let i1 of n1.needs)r1[i1] = !0;\n    return r1;\n}\nfunction na(e1, t1) {\n    if (!t1) return e1;\n    let r1 = {\n        ...e1\n    };\n    for (let n1 of Object.values(t1))if (!e1[n1.name]) for (let i1 of n1.needs)delete r1[i1];\n    return r1;\n}\nvar xn = class {\n    constructor(t1, r1){\n        this.extension = t1;\n        this.previous = r1;\n        this.computedFieldsCache = new ve;\n        this.modelExtensionsCache = new ve;\n        this.queryCallbacksCache = new ve;\n        this.clientExtensions = pr(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = pr(()=>{\n            let t1 = this.previous?.getAllBatchQueryCallbacks() ?? [], r1 = this.extension.query?.$__internalBatch;\n            return r1 ? t1.concat(r1) : t1;\n        });\n    }\n    getAllComputedFields(t1) {\n        return this.computedFieldsCache.getOrCreate(t1, ()=>ta(this.previous?.getAllComputedFields(t1), this.extension, t1));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(t1) {\n        return this.modelExtensionsCache.getOrCreate(t1, ()=>{\n            let r1 = Te(t1);\n            return !this.extension.model || !(this.extension.model[r1] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t1) : {\n                ...this.previous?.getAllModelExtensions(t1),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[r1]\n            };\n        });\n    }\n    getAllQueryCallbacks(t1, r1) {\n        return this.queryCallbacksCache.getOrCreate(`${t1}:${r1}`, ()=>{\n            let n1 = this.previous?.getAllQueryCallbacks(t1, r1) ?? [], i1 = [], o1 = this.extension.query;\n            return !o1 || !(o1[t1] || o1.$allModels || o1[r1] || o1.$allOperations) ? n1 : (o1[t1] !== void 0 && (o1[t1][r1] !== void 0 && i1.push(o1[t1][r1]), o1[t1].$allOperations !== void 0 && i1.push(o1[t1].$allOperations)), t1 !== \"$none\" && o1.$allModels !== void 0 && (o1.$allModels[r1] !== void 0 && i1.push(o1.$allModels[r1]), o1.$allModels.$allOperations !== void 0 && i1.push(o1.$allModels.$allOperations)), o1[r1] !== void 0 && i1.push(o1[r1]), o1.$allOperations !== void 0 && i1.push(o1.$allOperations), n1.concat(i1));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, kt = class e {\n    constructor(t1){\n        this.head = t1;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(t1) {\n        return new e(new xn(t1));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(t1) {\n        return new e(new xn(t1, this.head));\n    }\n    getAllComputedFields(t1) {\n        return this.head?.getAllComputedFields(t1);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(t1) {\n        return this.head?.getAllModelExtensions(t1);\n    }\n    getAllQueryCallbacks(t1, r1) {\n        return this.head?.getAllQueryCallbacks(t1, r1) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar ia = Symbol(), dr = class {\n    constructor(t1){\n        if (t1 !== ia) throw new Error(\"Skip instance can not be constructed directly\");\n    }\n    ifUndefined(t1) {\n        return t1 === void 0 ? Pn : t1;\n    }\n}, Pn = new dr(ia);\nfunction Re(e1) {\n    return e1 instanceof dr;\n}\nvar Xp = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    createManyAndReturn: \"createManyAndReturn\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n}, oa = \"explicitly `undefined` values are not allowed\";\nfunction vn({ modelName: e1, action: t1, args: r1, runtimeDataModel: n1, extensions: i1 = kt.empty(), callsite: o1, clientMethod: s1, errorFormat: a1, clientVersion: l1, previewFeatures: u1, globalOmit: c1 }) {\n    let p1 = new Di({\n        runtimeDataModel: n1,\n        modelName: e1,\n        action: t1,\n        rootArgs: r1,\n        callsite: o1,\n        extensions: i1,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s1,\n        errorFormat: a1,\n        clientVersion: l1,\n        previewFeatures: u1,\n        globalOmit: c1\n    });\n    return {\n        modelName: e1,\n        action: Xp[t1],\n        query: mr(r1, p1)\n    };\n}\nfunction mr({ select: e1, include: t1, ...r1 } = {}, n1) {\n    let i1;\n    return n1.isPreviewFeatureOn(\"omitApi\") && (i1 = r1.omit, delete r1.omit), {\n        arguments: aa(r1, n1),\n        selection: ed(e1, t1, i1, n1)\n    };\n}\nfunction ed(e1, t1, r1, n1) {\n    return e1 ? (t1 ? n1.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"include\",\n        secondField: \"select\",\n        selectionPath: n1.getSelectionPath()\n    }) : r1 && n1.isPreviewFeatureOn(\"omitApi\") && n1.throwValidationError({\n        kind: \"MutuallyExclusiveFields\",\n        firstField: \"omit\",\n        secondField: \"select\",\n        selectionPath: n1.getSelectionPath()\n    }), id(e1, n1)) : td(n1, t1, r1);\n}\nfunction td(e1, t1, r1) {\n    let n1 = {};\n    return e1.modelOrType && !e1.isRawAction() && (n1.$composites = !0, n1.$scalars = !0), t1 && rd(n1, t1, e1), e1.isPreviewFeatureOn(\"omitApi\") && nd(n1, r1, e1), n1;\n}\nfunction rd(e1, t1, r1) {\n    for (let [n1, i1] of Object.entries(t1)){\n        if (Re(i1)) continue;\n        let o1 = r1.nestSelection(n1);\n        if (_i(i1, o1), i1 === !1 || i1 === void 0) {\n            e1[n1] = !1;\n            continue;\n        }\n        let s1 = r1.findField(n1);\n        if (s1 && s1.kind !== \"object\" && r1.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: r1.getSelectionPath().concat(n1),\n            outputType: r1.getOutputTypeDescription()\n        }), s1) {\n            e1[n1] = mr(i1 === !0 ? {} : i1, o1);\n            continue;\n        }\n        if (i1 === !0) {\n            e1[n1] = !0;\n            continue;\n        }\n        e1[n1] = mr(i1, o1);\n    }\n}\nfunction nd(e1, t1, r1) {\n    let n1 = r1.getComputedFields(), i1 = {\n        ...r1.getGlobalOmit(),\n        ...t1\n    }, o1 = na(i1, n1);\n    for (let [s1, a1] of Object.entries(o1)){\n        if (Re(a1)) continue;\n        _i(a1, r1.nestSelection(s1));\n        let l1 = r1.findField(s1);\n        n1?.[s1] && !l1 || (e1[s1] = !a1);\n    }\n}\nfunction id(e1, t1) {\n    let r1 = {}, n1 = t1.getComputedFields(), i1 = ra(e1, n1);\n    for (let [o1, s1] of Object.entries(i1)){\n        if (Re(s1)) continue;\n        let a1 = t1.nestSelection(o1);\n        _i(s1, a1);\n        let l1 = t1.findField(o1);\n        if (!(n1?.[o1] && !l1)) {\n            if (s1 === !1 || s1 === void 0 || Re(s1)) {\n                r1[o1] = !1;\n                continue;\n            }\n            if (s1 === !0) {\n                l1?.kind === \"object\" ? r1[o1] = mr({}, a1) : r1[o1] = !0;\n                continue;\n            }\n            r1[o1] = mr(s1, a1);\n        }\n    }\n    return r1;\n}\nfunction sa(e1, t1) {\n    if (e1 === null) return null;\n    if (typeof e1 == \"string\" || typeof e1 == \"number\" || typeof e1 == \"boolean\") return e1;\n    if (typeof e1 == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e1)\n    };\n    if (Pt(e1)) {\n        if (ln(e1)) return {\n            $type: \"DateTime\",\n            value: e1.toISOString()\n        };\n        t1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: t1.getSelectionPath(),\n            argumentPath: t1.getArgumentPath(),\n            argument: {\n                name: t1.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (It(e1)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e1.name,\n            _container: e1.modelName\n        }\n    };\n    if (Array.isArray(e1)) return od(e1, t1);\n    if (ArrayBuffer.isView(e1)) return {\n        $type: \"Bytes\",\n        value: Buffer.from(e1).toString(\"base64\")\n    };\n    if (sd(e1)) return e1.values;\n    if (vt(e1)) return {\n        $type: \"Decimal\",\n        value: e1.toFixed()\n    };\n    if (e1 instanceof Me) {\n        if (e1 !== yn.instances[e1._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e1._getName()\n        };\n    }\n    if (ad(e1)) return e1.toJSON();\n    if (typeof e1 == \"object\") return aa(e1, t1);\n    t1.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: t1.getSelectionPath(),\n        argumentPath: t1.getArgumentPath(),\n        argument: {\n            name: t1.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e1)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction aa(e1, t1) {\n    if (e1.$type) return {\n        $type: \"Raw\",\n        value: e1\n    };\n    let r1 = {};\n    for(let n1 in e1){\n        let i1 = e1[n1], o1 = t1.nestArgument(n1);\n        Re(i1) || (i1 !== void 0 ? r1[n1] = sa(i1, o1) : t1.isPreviewFeatureOn(\"strictUndefinedChecks\") && t1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            argumentPath: o1.getArgumentPath(),\n            selectionPath: t1.getSelectionPath(),\n            argument: {\n                name: t1.getArgumentName(),\n                typeNames: []\n            },\n            underlyingError: oa\n        }));\n    }\n    return r1;\n}\nfunction od(e1, t1) {\n    let r1 = [];\n    for(let n1 = 0; n1 < e1.length; n1++){\n        let i1 = t1.nestArgument(String(n1)), o1 = e1[n1];\n        if (o1 === void 0 || Re(o1)) {\n            let s1 = o1 === void 0 ? \"undefined\" : \"Prisma.skip\";\n            t1.throwValidationError({\n                kind: \"InvalidArgumentValue\",\n                selectionPath: i1.getSelectionPath(),\n                argumentPath: i1.getArgumentPath(),\n                argument: {\n                    name: `${t1.getArgumentName()}[${n1}]`,\n                    typeNames: []\n                },\n                underlyingError: `Can not use \\`${s1}\\` value within array. Use \\`null\\` or filter out \\`${s1}\\` values`\n            });\n        }\n        r1.push(sa(o1, i1));\n    }\n    return r1;\n}\nfunction sd(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.__prismaRawParameters__ === !0;\n}\nfunction ad(e1) {\n    return typeof e1 == \"object\" && e1 !== null && typeof e1.toJSON == \"function\";\n}\nfunction _i(e1, t1) {\n    e1 === void 0 && t1.isPreviewFeatureOn(\"strictUndefinedChecks\") && t1.throwValidationError({\n        kind: \"InvalidSelectionValue\",\n        selectionPath: t1.getSelectionPath(),\n        underlyingError: oa\n    });\n}\nvar Di = class e {\n    constructor(t1){\n        this.params = t1;\n        this.params.modelName && (this.modelOrType = this.params.runtimeDataModel.models[this.params.modelName] ?? this.params.runtimeDataModel.types[this.params.modelName]);\n    }\n    throwValidationError(t1) {\n        wn({\n            errors: [\n                t1\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion,\n            globalOmit: this.params.globalOmit\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.modelOrType)) return {\n            name: this.params.modelName,\n            fields: this.modelOrType.fields.map((t1)=>({\n                    name: t1.name,\n                    typeName: \"boolean\",\n                    isRelation: t1.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    isPreviewFeatureOn(t1) {\n        return this.params.previewFeatures.includes(t1);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(t1) {\n        return this.modelOrType?.fields.find((r1)=>r1.name === t1);\n    }\n    nestSelection(t1) {\n        let r1 = this.findField(t1), n1 = r1?.kind === \"object\" ? r1.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n1,\n            selectionPath: this.params.selectionPath.concat(t1)\n        });\n    }\n    getGlobalOmit() {\n        return this.params.modelName && this.shouldApplyGlobalOmit() ? this.params.globalOmit?.[xt(this.params.modelName)] ?? {} : {};\n    }\n    shouldApplyGlobalOmit() {\n        switch(this.params.action){\n            case \"findFirst\":\n            case \"findFirstOrThrow\":\n            case \"findUniqueOrThrow\":\n            case \"findMany\":\n            case \"upsert\":\n            case \"findUnique\":\n            case \"createManyAndReturn\":\n            case \"create\":\n            case \"update\":\n            case \"delete\":\n                return !0;\n            case \"executeRaw\":\n            case \"aggregateRaw\":\n            case \"runCommandRaw\":\n            case \"findRaw\":\n            case \"createMany\":\n            case \"deleteMany\":\n            case \"groupBy\":\n            case \"updateMany\":\n            case \"count\":\n            case \"aggregate\":\n            case \"queryRaw\":\n                return !1;\n            default:\n                Fe(this.params.action, \"Unknown action\");\n        }\n    }\n    nestArgument(t1) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(t1)\n        });\n    }\n};\nvar Dt = class {\n    constructor(t1){\n        this._engine = t1;\n    }\n    prometheus(t1) {\n        return this._engine.metrics({\n            format: \"prometheus\",\n            ...t1\n        });\n    }\n    json(t1) {\n        return this._engine.metrics({\n            format: \"json\",\n            ...t1\n        });\n    }\n};\nfunction la(e1) {\n    return {\n        models: Fi(e1.models),\n        enums: Fi(e1.enums),\n        types: Fi(e1.types)\n    };\n}\nfunction Fi(e1) {\n    let t1 = {};\n    for (let { name: r1, ...n1 } of e1)t1[r1] = n1;\n    return t1;\n}\nfunction ua(e1, t1) {\n    let r1 = pr(()=>ld(t1));\n    Object.defineProperty(e1, \"dmmf\", {\n        get: ()=>r1.get()\n    });\n}\nfunction ld(e1) {\n    return {\n        datamodel: {\n            models: Li(e1.models),\n            enums: Li(e1.enums),\n            types: Li(e1.types)\n        }\n    };\n}\nfunction Li(e1) {\n    return Object.entries(e1).map(([t1, r1])=>({\n            name: t1,\n            ...r1\n        }));\n}\nvar Ni = new WeakMap, Tn = \"$$PrismaTypedSql\", Mi = class {\n    constructor(t1, r1){\n        Ni.set(this, {\n            sql: t1,\n            values: r1\n        }), Object.defineProperty(this, Tn, {\n            value: Tn\n        });\n    }\n    get sql() {\n        return Ni.get(this).sql;\n    }\n    get values() {\n        return Ni.get(this).values;\n    }\n};\nfunction ca(e1) {\n    return (...t1)=>new Mi(e1, t1);\n}\nfunction pa(e1) {\n    return e1 != null && e1[Tn] === Tn;\n}\nfunction fr(e1) {\n    return {\n        ok: !1,\n        error: e1,\n        map () {\n            return fr(e1);\n        },\n        flatMap () {\n            return fr(e1);\n        }\n    };\n}\nvar $i = class {\n    constructor(){\n        this.registeredErrors = [];\n    }\n    consumeError(t1) {\n        return this.registeredErrors[t1];\n    }\n    registerNewError(t1) {\n        let r1 = 0;\n        for(; this.registeredErrors[r1] !== void 0;)r1++;\n        return this.registeredErrors[r1] = {\n            error: t1\n        }, r1;\n    }\n}, qi = (e1)=>{\n    let t1 = new $i, r1 = Ce(t1, e1.transactionContext.bind(e1)), n1 = {\n        adapterName: e1.adapterName,\n        errorRegistry: t1,\n        queryRaw: Ce(t1, e1.queryRaw.bind(e1)),\n        executeRaw: Ce(t1, e1.executeRaw.bind(e1)),\n        provider: e1.provider,\n        transactionContext: async (...i1)=>(await r1(...i1)).map((s1)=>ud(t1, s1))\n    };\n    return e1.getConnectionInfo && (n1.getConnectionInfo = pd(t1, e1.getConnectionInfo.bind(e1))), n1;\n}, ud = (e1, t1)=>{\n    let r1 = Ce(e1, t1.startTransaction.bind(t1));\n    return {\n        adapterName: t1.adapterName,\n        provider: t1.provider,\n        queryRaw: Ce(e1, t1.queryRaw.bind(t1)),\n        executeRaw: Ce(e1, t1.executeRaw.bind(t1)),\n        startTransaction: async (...n1)=>(await r1(...n1)).map((o1)=>cd(e1, o1))\n    };\n}, cd = (e1, t1)=>({\n        adapterName: t1.adapterName,\n        provider: t1.provider,\n        options: t1.options,\n        queryRaw: Ce(e1, t1.queryRaw.bind(t1)),\n        executeRaw: Ce(e1, t1.executeRaw.bind(t1)),\n        commit: Ce(e1, t1.commit.bind(t1)),\n        rollback: Ce(e1, t1.rollback.bind(t1))\n    });\nfunction Ce(e1, t1) {\n    return async (...r1)=>{\n        try {\n            return await t1(...r1);\n        } catch (n1) {\n            let i1 = e1.registerNewError(n1);\n            return fr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nfunction pd(e1, t1) {\n    return (...r1)=>{\n        try {\n            return t1(...r1);\n        } catch (n1) {\n            let i1 = e1.registerNewError(n1);\n            return fr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nvar Wl = k(oi());\nvar Hl = __webpack_require__(/*! async_hooks */ \"async_hooks\"), Kl = __webpack_require__(/*! events */ \"events\"), zl = k(__webpack_require__(/*! fs */ \"fs\")), Fr = k(__webpack_require__(/*! path */ \"path\"));\nvar oe = class e {\n    constructor(t1, r1){\n        if (t1.length - 1 !== r1.length) throw t1.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${t1.length} strings to have ${t1.length - 1} values`);\n        let n1 = r1.reduce((s1, a1)=>s1 + (a1 instanceof e ? a1.values.length : 1), 0);\n        this.values = new Array(n1), this.strings = new Array(n1 + 1), this.strings[0] = t1[0];\n        let i1 = 0, o1 = 0;\n        for(; i1 < r1.length;){\n            let s1 = r1[i1++], a1 = t1[i1];\n            if (s1 instanceof e) {\n                this.strings[o1] += s1.strings[0];\n                let l1 = 0;\n                for(; l1 < s1.values.length;)this.values[o1++] = s1.values[l1++], this.strings[o1] = s1.strings[l1];\n                this.strings[o1] += a1;\n            } else this.values[o1++] = s1, this.strings[o1] = a1;\n        }\n    }\n    get sql() {\n        let t1 = this.strings.length, r1 = 1, n1 = this.strings[0];\n        for(; r1 < t1;)n1 += `?${this.strings[r1++]}`;\n        return n1;\n    }\n    get statement() {\n        let t1 = this.strings.length, r1 = 1, n1 = this.strings[0];\n        for(; r1 < t1;)n1 += `:${r1}${this.strings[r1++]}`;\n        return n1;\n    }\n    get text() {\n        let t1 = this.strings.length, r1 = 1, n1 = this.strings[0];\n        for(; r1 < t1;)n1 += `$${r1}${this.strings[r1++]}`;\n        return n1;\n    }\n    inspect() {\n        return {\n            sql: this.sql,\n            statement: this.statement,\n            text: this.text,\n            values: this.values\n        };\n    }\n};\nfunction da(e1, t1 = \",\", r1 = \"\", n1 = \"\") {\n    if (e1.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new oe([\n        r1,\n        ...Array(e1.length - 1).fill(t1),\n        n1\n    ], e1);\n}\nfunction ji(e1) {\n    return new oe([\n        e1\n    ], []);\n}\nvar ma = ji(\"\");\nfunction Vi(e1, ...t1) {\n    return new oe(e1, t1);\n}\nfunction gr(e1) {\n    return {\n        getKeys () {\n            return Object.keys(e1);\n        },\n        getPropertyValue (t1) {\n            return e1[t1];\n        }\n    };\n}\nfunction re(e1, t1) {\n    return {\n        getKeys () {\n            return [\n                e1\n            ];\n        },\n        getPropertyValue () {\n            return t1();\n        }\n    };\n}\nfunction ot(e1) {\n    let t1 = new ve;\n    return {\n        getKeys () {\n            return e1.getKeys();\n        },\n        getPropertyValue (r1) {\n            return t1.getOrCreate(r1, ()=>e1.getPropertyValue(r1));\n        },\n        getPropertyDescriptor (r1) {\n            return e1.getPropertyDescriptor?.(r1);\n        }\n    };\n}\nvar Rn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction Cn(e1) {\n    let t1 = new Set(e1);\n    return {\n        getOwnPropertyDescriptor: ()=>Rn,\n        has: (r1, n1)=>t1.has(n1),\n        set: (r1, n1, i1)=>t1.add(n1) && Reflect.set(r1, n1, i1),\n        ownKeys: ()=>[\n                ...t1\n            ]\n    };\n}\nvar fa = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction Se(e1, t1) {\n    let r1 = dd(t1), n1 = new Set, i1 = new Proxy(e1, {\n        get (o1, s1) {\n            if (n1.has(s1)) return o1[s1];\n            let a1 = r1.get(s1);\n            return a1 ? a1.getPropertyValue(s1) : o1[s1];\n        },\n        has (o1, s1) {\n            if (n1.has(s1)) return !0;\n            let a1 = r1.get(s1);\n            return a1 ? a1.has?.(s1) ?? !0 : Reflect.has(o1, s1);\n        },\n        ownKeys (o1) {\n            let s1 = ga(Reflect.ownKeys(o1), r1), a1 = ga(Array.from(r1.keys()), r1);\n            return [\n                ...new Set([\n                    ...s1,\n                    ...a1,\n                    ...n1\n                ])\n            ];\n        },\n        set (o1, s1, a1) {\n            return r1.get(s1)?.getPropertyDescriptor?.(s1)?.writable === !1 ? !1 : (n1.add(s1), Reflect.set(o1, s1, a1));\n        },\n        getOwnPropertyDescriptor (o1, s1) {\n            let a1 = Reflect.getOwnPropertyDescriptor(o1, s1);\n            if (a1 && !a1.configurable) return a1;\n            let l1 = r1.get(s1);\n            return l1 ? l1.getPropertyDescriptor ? {\n                ...Rn,\n                ...l1?.getPropertyDescriptor(s1)\n            } : Rn : a1;\n        },\n        defineProperty (o1, s1, a1) {\n            return n1.add(s1), Reflect.defineProperty(o1, s1, a1);\n        }\n    });\n    return i1[fa] = function() {\n        let o1 = {\n            ...this\n        };\n        return delete o1[fa], o1;\n    }, i1;\n}\nfunction dd(e1) {\n    let t1 = new Map;\n    for (let r1 of e1){\n        let n1 = r1.getKeys();\n        for (let i1 of n1)t1.set(i1, r1);\n    }\n    return t1;\n}\nfunction ga(e1, t1) {\n    return e1.filter((r1)=>t1.get(r1)?.has?.(r1) ?? !0);\n}\nfunction _t(e1) {\n    return {\n        getKeys () {\n            return e1;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nfunction Ft(e1, t1) {\n    return {\n        batch: e1,\n        transaction: t1?.kind === \"batch\" ? {\n            isolationLevel: t1.options.isolationLevel\n        } : void 0\n    };\n}\nfunction ha(e1) {\n    if (e1 === void 0) return \"\";\n    let t1 = Ot(e1);\n    return new Rt(0, {\n        colors: fn\n    }).write(t1).toString();\n}\nvar md = \"P2037\";\nfunction st({ error: e1, user_facing_error: t1 }, r1, n1) {\n    return t1.error_code ? new V(fd(t1, n1), {\n        code: t1.error_code,\n        clientVersion: r1,\n        meta: t1.meta,\n        batchRequestIdx: t1.batch_request_idx\n    }) : new B(e1, {\n        clientVersion: r1,\n        batchRequestIdx: t1.batch_request_idx\n    });\n}\nfunction fd(e1, t1) {\n    let r1 = e1.message;\n    return (t1 === \"postgresql\" || t1 === \"postgres\" || t1 === \"mysql\") && e1.error_code === md && (r1 += `\nPrisma Accelerate has built-in connection pooling to prevent such errors: https://pris.ly/client/error-accelerate`), r1;\n}\nvar hr = \"<unknown>\";\nfunction ya(e1) {\n    var t1 = e1.split(`\n`);\n    return t1.reduce(function(r1, n1) {\n        var i1 = yd(n1) || Ed(n1) || Pd(n1) || Cd(n1) || Td(n1);\n        return i1 && r1.push(i1), r1;\n    }, []);\n}\nvar gd = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, hd = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction yd(e1) {\n    var t1 = gd.exec(e1);\n    if (!t1) return null;\n    var r1 = t1[2] && t1[2].indexOf(\"native\") === 0, n1 = t1[2] && t1[2].indexOf(\"eval\") === 0, i1 = hd.exec(t1[2]);\n    return n1 && i1 != null && (t1[2] = i1[1], t1[3] = i1[2], t1[4] = i1[3]), {\n        file: r1 ? null : t1[2],\n        methodName: t1[1] || hr,\n        arguments: r1 ? [\n            t1[2]\n        ] : [],\n        lineNumber: t1[3] ? +t1[3] : null,\n        column: t1[4] ? +t1[4] : null\n    };\n}\nvar bd = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Ed(e1) {\n    var t1 = bd.exec(e1);\n    return t1 ? {\n        file: t1[2],\n        methodName: t1[1] || hr,\n        arguments: [],\n        lineNumber: +t1[3],\n        column: t1[4] ? +t1[4] : null\n    } : null;\n}\nvar wd = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, xd = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Pd(e1) {\n    var t1 = wd.exec(e1);\n    if (!t1) return null;\n    var r1 = t1[3] && t1[3].indexOf(\" > eval\") > -1, n1 = xd.exec(t1[3]);\n    return r1 && n1 != null && (t1[3] = n1[1], t1[4] = n1[2], t1[5] = null), {\n        file: t1[3],\n        methodName: t1[1] || hr,\n        arguments: t1[2] ? t1[2].split(\",\") : [],\n        lineNumber: t1[4] ? +t1[4] : null,\n        column: t1[5] ? +t1[5] : null\n    };\n}\nvar vd = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction Td(e1) {\n    var t1 = vd.exec(e1);\n    return t1 ? {\n        file: t1[3],\n        methodName: t1[1] || hr,\n        arguments: [],\n        lineNumber: +t1[4],\n        column: t1[5] ? +t1[5] : null\n    } : null;\n}\nvar Rd = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Cd(e1) {\n    var t1 = Rd.exec(e1);\n    return t1 ? {\n        file: t1[2],\n        methodName: t1[1] || hr,\n        arguments: [],\n        lineNumber: +t1[3],\n        column: t1[4] ? +t1[4] : null\n    } : null;\n}\nvar Bi = class {\n    getLocation() {\n        return null;\n    }\n}, Ui = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let t1 = this._error.stack;\n        if (!t1) return null;\n        let n1 = ya(t1).find((i1)=>{\n            if (!i1.file) return !1;\n            let o1 = mi(i1.file);\n            return o1 !== \"<anonymous>\" && !o1.includes(\"@prisma\") && !o1.includes(\"/packages/client/src/runtime/\") && !o1.endsWith(\"/runtime/binary.js\") && !o1.endsWith(\"/runtime/library.js\") && !o1.endsWith(\"/runtime/edge.js\") && !o1.endsWith(\"/runtime/edge-esm.js\") && !o1.startsWith(\"internal/\") && !i1.methodName.includes(\"new \") && !i1.methodName.includes(\"getCallSite\") && !i1.methodName.includes(\"Proxy.\") && i1.methodName.split(\".\").length < 4;\n        });\n        return !n1 || !n1.file ? null : {\n            fileName: n1.file,\n            lineNumber: n1.lineNumber,\n            columnNumber: n1.column\n        };\n    }\n};\nfunction Ze(e1) {\n    return e1 === \"minimal\" ? typeof $EnabledCallSite == \"function\" && e1 !== \"minimal\" ? new $EnabledCallSite : new Bi : new Ui;\n}\nvar ba = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction Lt(e1 = {}) {\n    let t1 = Ad(e1);\n    return Object.entries(t1).reduce((n1, [i1, o1])=>(ba[i1] !== void 0 ? n1.select[i1] = {\n            select: o1\n        } : n1[i1] = o1, n1), {\n        select: {}\n    });\n}\nfunction Ad(e1 = {}) {\n    return typeof e1._count == \"boolean\" ? {\n        ...e1,\n        _count: {\n            _all: e1._count\n        }\n    } : e1;\n}\nfunction Sn(e1 = {}) {\n    return (t1)=>(typeof e1._count == \"boolean\" && (t1._count = t1._count._all), t1);\n}\nfunction Ea(e1, t1) {\n    let r1 = Sn(e1);\n    return t1({\n        action: \"aggregate\",\n        unpacker: r1,\n        argsMapper: Lt\n    })(e1);\n}\nfunction Id(e1 = {}) {\n    let { select: t1, ...r1 } = e1;\n    return typeof t1 == \"object\" ? Lt({\n        ...r1,\n        _count: t1\n    }) : Lt({\n        ...r1,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction Od(e1 = {}) {\n    return typeof e1.select == \"object\" ? (t1)=>Sn(e1)(t1)._count : (t1)=>Sn(e1)(t1)._count._all;\n}\nfunction wa(e1, t1) {\n    return t1({\n        action: \"count\",\n        unpacker: Od(e1),\n        argsMapper: Id\n    })(e1);\n}\nfunction kd(e1 = {}) {\n    let t1 = Lt(e1);\n    if (Array.isArray(t1.by)) for (let r1 of t1.by)typeof r1 == \"string\" && (t1.select[r1] = !0);\n    else typeof t1.by == \"string\" && (t1.select[t1.by] = !0);\n    return t1;\n}\nfunction Dd(e1 = {}) {\n    return (t1)=>(typeof e1?._count == \"boolean\" && t1.forEach((r1)=>{\n            r1._count = r1._count._all;\n        }), t1);\n}\nfunction xa(e1, t1) {\n    return t1({\n        action: \"groupBy\",\n        unpacker: Dd(e1),\n        argsMapper: kd\n    })(e1);\n}\nfunction Pa(e1, t1, r1) {\n    if (t1 === \"aggregate\") return (n1)=>Ea(n1, r1);\n    if (t1 === \"count\") return (n1)=>wa(n1, r1);\n    if (t1 === \"groupBy\") return (n1)=>xa(n1, r1);\n}\nfunction va(e1, t1) {\n    let r1 = t1.fields.filter((i1)=>!i1.relationName), n1 = wi(r1, (i1)=>i1.name);\n    return new Proxy({}, {\n        get (i1, o1) {\n            if (o1 in i1 || typeof o1 == \"symbol\") return i1[o1];\n            let s1 = n1[o1];\n            if (s1) return new sr(e1, o1, s1.type, s1.isList, s1.kind === \"enum\");\n        },\n        ...Cn(Object.keys(n1))\n    });\n}\nvar Ta = (e1)=>Array.isArray(e1) ? e1 : e1.split(\".\"), Gi = (e1, t1)=>Ta(t1).reduce((r1, n1)=>r1 && r1[n1], e1), Ra = (e1, t1, r1)=>Ta(t1).reduceRight((n1, i1, o1, s1)=>Object.assign({}, Gi(e1, s1.slice(0, o1)), {\n            [i1]: n1\n        }), r1);\nfunction _d(e1, t1) {\n    return e1 === void 0 || t1 === void 0 ? [] : [\n        ...t1,\n        \"select\",\n        e1\n    ];\n}\nfunction Fd(e1, t1, r1) {\n    return t1 === void 0 ? e1 ?? {} : Ra(t1, r1, e1 || !0);\n}\nfunction Qi(e1, t1, r1, n1, i1, o1) {\n    let a1 = e1._runtimeDataModel.models[t1].fields.reduce((l1, u1)=>({\n            ...l1,\n            [u1.name]: u1\n        }), {});\n    return (l1)=>{\n        let u1 = Ze(e1._errorFormat), c1 = _d(n1, i1), p1 = Fd(l1, o1, c1), d1 = r1({\n            dataPath: c1,\n            callsite: u1\n        })(p1), f1 = Ld(e1, t1);\n        return new Proxy(d1, {\n            get (g1, h1) {\n                if (!f1.includes(h1)) return g1[h1];\n                let T1 = [\n                    a1[h1].type,\n                    r1,\n                    h1\n                ], S1 = [\n                    c1,\n                    p1\n                ];\n                return Qi(e1, ...T1, ...S1);\n            },\n            ...Cn([\n                ...f1,\n                ...Object.getOwnPropertyNames(d1)\n            ])\n        });\n    };\n}\nfunction Ld(e1, t1) {\n    return e1._runtimeDataModel.models[t1].fields.filter((r1)=>r1.kind === \"object\").map((r1)=>r1.name);\n}\nfunction Ca(e1, t1, r1, n1) {\n    return e1 === Je.ModelAction.findFirstOrThrow || e1 === Je.ModelAction.findUniqueOrThrow ? Nd(t1, r1, n1) : n1;\n}\nfunction Nd(e1, t1, r1) {\n    return async (n1)=>{\n        if (\"rejectOnNotFound\" in n1.args) {\n            let o1 = Tt({\n                originalMethod: n1.clientMethod,\n                callsite: n1.callsite,\n                message: \"'rejectOnNotFound' option is not supported\"\n            });\n            throw new J(o1, {\n                clientVersion: t1\n            });\n        }\n        return await r1(n1).catch((o1)=>{\n            throw o1 instanceof V && o1.code === \"P2025\" ? new Le(`No ${e1} found`, t1) : o1;\n        });\n    };\n}\nvar Md = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], $d = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction Ji(e1, t1) {\n    let r1 = e1._extensions.getAllModelExtensions(t1) ?? {}, n1 = [\n        qd(e1, t1),\n        Vd(e1, t1),\n        gr(r1),\n        re(\"name\", ()=>t1),\n        re(\"$name\", ()=>t1),\n        re(\"$parent\", ()=>e1._appliedParent)\n    ];\n    return Se({}, n1);\n}\nfunction qd(e1, t1) {\n    let r1 = Te(t1), n1 = Object.keys(Je.ModelAction).concat(\"count\");\n    return {\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = i1, s1 = (l1)=>e1._request(l1);\n            s1 = Ca(o1, t1, e1._clientVersion, s1);\n            let a1 = (l1)=>(u1)=>{\n                    let c1 = Ze(e1._errorFormat);\n                    return e1._createPrismaPromise((p1)=>{\n                        let d1 = {\n                            args: u1,\n                            dataPath: [],\n                            action: o1,\n                            model: t1,\n                            clientMethod: `${r1}.${i1}`,\n                            jsModelName: r1,\n                            transaction: p1,\n                            callsite: c1\n                        };\n                        return s1({\n                            ...d1,\n                            ...l1\n                        });\n                    });\n                };\n            return Md.includes(o1) ? Qi(e1, t1, a1) : jd(i1) ? Pa(e1, i1, a1) : a1({});\n        }\n    };\n}\nfunction jd(e1) {\n    return $d.includes(e1);\n}\nfunction Vd(e1, t1) {\n    return ot(re(\"fields\", ()=>{\n        let r1 = e1._runtimeDataModel.models[t1];\n        return va(t1, r1);\n    }));\n}\nfunction Sa(e1) {\n    return e1.replace(/^./, (t1)=>t1.toUpperCase());\n}\nvar Wi = Symbol();\nfunction yr(e1) {\n    let t1 = [\n        Bd(e1),\n        re(Wi, ()=>e1),\n        re(\"$parent\", ()=>e1._appliedParent)\n    ], r1 = e1._extensions.getAllClientExtensions();\n    return r1 && t1.push(gr(r1)), Se(e1, t1);\n}\nfunction Bd(e1) {\n    let t1 = Object.keys(e1._runtimeDataModel.models), r1 = t1.map(Te), n1 = [\n        ...new Set(t1.concat(r1))\n    ];\n    return ot({\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = Sa(i1);\n            if (e1._runtimeDataModel.models[o1] !== void 0) return Ji(e1, o1);\n            if (e1._runtimeDataModel.models[i1] !== void 0) return Ji(e1, i1);\n        },\n        getPropertyDescriptor (i1) {\n            if (!r1.includes(i1)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction Aa(e1) {\n    return e1[Wi] ? e1[Wi] : e1;\n}\nfunction Ia(e1) {\n    if (typeof e1 == \"function\") return e1(this);\n    if (e1.client?.__AccelerateEngine) {\n        let r1 = e1.client.__AccelerateEngine;\n        this._originalClient._engine = new r1(this._originalClient._accelerateEngineConfig);\n    }\n    let t1 = Object.create(this._originalClient, {\n        _extensions: {\n            value: this._extensions.append(e1)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return yr(t1);\n}\nfunction Oa({ result: e1, modelName: t1, select: r1, omit: n1, extensions: i1 }) {\n    let o1 = i1.getAllComputedFields(t1);\n    if (!o1) return e1;\n    let s1 = [], a1 = [];\n    for (let l1 of Object.values(o1)){\n        if (n1) {\n            if (n1[l1.name]) continue;\n            let u1 = l1.needs.filter((c1)=>n1[c1]);\n            u1.length > 0 && a1.push(_t(u1));\n        } else if (r1) {\n            if (!r1[l1.name]) continue;\n            let u1 = l1.needs.filter((c1)=>!r1[c1]);\n            u1.length > 0 && a1.push(_t(u1));\n        }\n        Ud(e1, l1.needs) && s1.push(Gd(l1, Se(e1, s1)));\n    }\n    return s1.length > 0 || a1.length > 0 ? Se(e1, [\n        ...s1,\n        ...a1\n    ]) : e1;\n}\nfunction Ud(e1, t1) {\n    return t1.every((r1)=>Ei(e1, r1));\n}\nfunction Gd(e1, t1) {\n    return ot(re(e1.name, ()=>e1.compute(t1)));\n}\nfunction An({ visitor: e1, result: t1, args: r1, runtimeDataModel: n1, modelName: i1 }) {\n    if (Array.isArray(t1)) {\n        for(let s1 = 0; s1 < t1.length; s1++)t1[s1] = An({\n            result: t1[s1],\n            args: r1,\n            modelName: i1,\n            runtimeDataModel: n1,\n            visitor: e1\n        });\n        return t1;\n    }\n    let o1 = e1(t1, i1, r1) ?? t1;\n    return r1.include && ka({\n        includeOrSelect: r1.include,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), r1.select && ka({\n        includeOrSelect: r1.select,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), o1;\n}\nfunction ka({ includeOrSelect: e1, result: t1, parentModelName: r1, runtimeDataModel: n1, visitor: i1 }) {\n    for (let [o1, s1] of Object.entries(e1)){\n        if (!s1 || t1[o1] == null || Re(s1)) continue;\n        let l1 = n1.models[r1].fields.find((c1)=>c1.name === o1);\n        if (!l1 || l1.kind !== \"object\" || !l1.relationName) continue;\n        let u1 = typeof s1 == \"object\" ? s1 : {};\n        t1[o1] = An({\n            visitor: i1,\n            result: t1[o1],\n            args: u1,\n            modelName: l1.type,\n            runtimeDataModel: n1\n        });\n    }\n}\nfunction Da({ result: e1, modelName: t1, args: r1, extensions: n1, runtimeDataModel: i1, globalOmit: o1 }) {\n    return n1.isEmpty() || e1 == null || typeof e1 != \"object\" || !i1.models[t1] ? e1 : An({\n        result: e1,\n        args: r1 ?? {},\n        modelName: t1,\n        runtimeDataModel: i1,\n        visitor: (a1, l1, u1)=>{\n            let c1 = Te(l1);\n            return Oa({\n                result: a1,\n                modelName: c1,\n                select: u1.select,\n                omit: u1.select ? void 0 : {\n                    ...o1?.[c1],\n                    ...u1.omit\n                },\n                extensions: n1\n            });\n        }\n    });\n}\nfunction _a(e1) {\n    if (e1 instanceof oe) return Qd(e1);\n    if (Array.isArray(e1)) {\n        let r1 = [\n            e1[0]\n        ];\n        for(let n1 = 1; n1 < e1.length; n1++)r1[n1] = br(e1[n1]);\n        return r1;\n    }\n    let t1 = {};\n    for(let r1 in e1)t1[r1] = br(e1[r1]);\n    return t1;\n}\nfunction Qd(e1) {\n    return new oe(e1.strings, e1.values);\n}\nfunction br(e1) {\n    if (typeof e1 != \"object\" || e1 == null || e1 instanceof Me || It(e1)) return e1;\n    if (vt(e1)) return new xe(e1.toFixed());\n    if (Pt(e1)) return new Date(+e1);\n    if (ArrayBuffer.isView(e1)) return e1.slice(0);\n    if (Array.isArray(e1)) {\n        let t1 = e1.length, r1;\n        for(r1 = Array(t1); t1--;)r1[t1] = br(e1[t1]);\n        return r1;\n    }\n    if (typeof e1 == \"object\") {\n        let t1 = {};\n        for(let r1 in e1)r1 === \"__proto__\" ? Object.defineProperty(t1, r1, {\n            value: br(e1[r1]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : t1[r1] = br(e1[r1]);\n        return t1;\n    }\n    Fe(e1, \"Unknown value\");\n}\nfunction La(e1, t1, r1, n1 = 0) {\n    return e1._createPrismaPromise((i1)=>{\n        let o1 = t1.customDataProxyFetch;\n        return \"transaction\" in t1 && i1 !== void 0 && (t1.transaction?.kind === \"batch\" && t1.transaction.lock.then(), t1.transaction = i1), n1 === r1.length ? e1._executeRequest(t1) : r1[n1]({\n            model: t1.model,\n            operation: t1.model ? t1.action : t1.clientMethod,\n            args: _a(t1.args ?? {}),\n            __internalParams: t1,\n            query: (s1, a1 = t1)=>{\n                let l1 = a1.customDataProxyFetch;\n                return a1.customDataProxyFetch = qa(o1, l1), a1.args = s1, La(e1, a1, r1, n1 + 1);\n            }\n        });\n    });\n}\nfunction Na(e1, t1) {\n    let { jsModelName: r1, action: n1, clientMethod: i1 } = t1, o1 = r1 ? n1 : i1;\n    if (e1._extensions.isEmpty()) return e1._executeRequest(t1);\n    let s1 = e1._extensions.getAllQueryCallbacks(r1 ?? \"$none\", o1);\n    return La(e1, t1, s1);\n}\nfunction Ma(e1) {\n    return (t1)=>{\n        let r1 = {\n            requests: t1\n        }, n1 = t1[0].extensions.getAllBatchQueryCallbacks();\n        return n1.length ? $a(r1, n1, 0, e1) : e1(r1);\n    };\n}\nfunction $a(e1, t1, r1, n1) {\n    if (r1 === t1.length) return n1(e1);\n    let i1 = e1.customDataProxyFetch, o1 = e1.requests[0].transaction;\n    return t1[r1]({\n        args: {\n            queries: e1.requests.map((s1)=>({\n                    model: s1.modelName,\n                    operation: s1.action,\n                    args: s1.args\n                })),\n            transaction: o1 ? {\n                isolationLevel: o1.kind === \"batch\" ? o1.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e1,\n        query (s1, a1 = e1) {\n            let l1 = a1.customDataProxyFetch;\n            return a1.customDataProxyFetch = qa(i1, l1), $a(a1, t1, r1 + 1, n1);\n        }\n    });\n}\nvar Fa = (e1)=>e1;\nfunction qa(e1 = Fa, t1 = Fa) {\n    return (r1)=>e1(t1(r1));\n}\nvar ja = L(\"prisma:client\"), Va = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction Ba({ postinstall: e1, ciName: t1, clientVersion: r1 }) {\n    if (ja(\"checkPlatformCaching:postinstall\", e1), ja(\"checkPlatformCaching:ciName\", t1), e1 === !0 && t1 && t1 in Va) {\n        let n1 = `Prisma has detected that this project was built on ${t1}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${Va[t1]}-build`;\n        throw console.error(n1), new R(n1, r1);\n    }\n}\nfunction Ua(e1, t1) {\n    return e1 ? e1.datasources ? e1.datasources : e1.datasourceUrl ? {\n        [t1[0]]: {\n            url: e1.datasourceUrl\n        }\n    } : {} : {};\n}\nvar Jd = \"Cloudflare-Workers\", Wd = \"node\";\nfunction Ga() {\n    return typeof Netlify == \"object\" ? \"netlify\" : typeof EdgeRuntime == \"string\" ? \"edge-light\" : globalThis.navigator?.userAgent === Jd ? \"workerd\" : globalThis.Deno ? \"deno\" : globalThis.__lagon__ ? \"lagon\" : globalThis.process?.release?.name === Wd ? \"node\" : globalThis.Bun ? \"bun\" : globalThis.fastly ? \"fastly\" : \"unknown\";\n}\nvar Hd = {\n    node: \"Node.js\",\n    workerd: \"Cloudflare Workers\",\n    deno: \"Deno and Deno Deploy\",\n    netlify: \"Netlify Edge Functions\",\n    \"edge-light\": \"Edge Runtime (Vercel Edge Functions, Vercel Edge Middleware, Next.js (Pages Router) Edge API Routes, Next.js (App Router) Edge Route Handlers or Next.js Middleware)\"\n};\nfunction In() {\n    let e1 = Ga();\n    return {\n        id: e1,\n        prettyName: Hd[e1] || e1,\n        isEdge: [\n            \"workerd\",\n            \"deno\",\n            \"netlify\",\n            \"edge-light\"\n        ].includes(e1)\n    };\n}\nvar Ka = k(__webpack_require__(/*! fs */ \"fs\")), Er = k(__webpack_require__(/*! path */ \"path\"));\nfunction On(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `Add \"${t1}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Kd(e1)}`;\n}\nfunction Kd(e1) {\n    let { generator: t1, generatorBinaryTargets: r1, runtimeBinaryTarget: n1 } = e1, i1 = {\n        fromEnvVar: null,\n        value: n1\n    }, o1 = [\n        ...r1,\n        i1\n    ];\n    return hi({\n        ...t1,\n        binaryTargets: o1\n    });\n}\nfunction Xe(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `Prisma Client could not locate the Query Engine for runtime \"${t1}\".`;\n}\nfunction et(e1) {\n    let { searchedLocations: t1 } = e1;\n    return `The following locations have been searched:\n${[\n        ...new Set(t1)\n    ].map((i1)=>`  ${i1}`).join(`\n`)}`;\n}\nfunction Qa(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `${Xe(e1)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${t1}\".\n${On(e1)}\n\n${et(e1)}`;\n}\nfunction kn(e1) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e1}`;\n}\nfunction Dn(e1) {\n    let { errorStack: t1 } = e1;\n    return t1?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction Ja(e1) {\n    let { queryEngineName: t1 } = e1;\n    return `${Xe(e1)}${Dn(e1)}\n\nThis is likely caused by a bundler that has not copied \"${t1}\" next to the resulting bundle.\nEnsure that \"${t1}\" has been copied next to the bundle or in \"${e1.expectedLocation}\".\n\n${kn(\"engine-not-found-bundler-investigation\")}\n\n${et(e1)}`;\n}\nfunction Wa(e1) {\n    let { runtimeBinaryTarget: t1, generatorBinaryTargets: r1 } = e1, n1 = r1.find((i1)=>i1.native);\n    return `${Xe(e1)}\n\nThis happened because Prisma Client was generated for \"${n1?.value ?? \"unknown\"}\", but the actual deployment required \"${t1}\".\n${On(e1)}\n\n${et(e1)}`;\n}\nfunction Ha(e1) {\n    let { queryEngineName: t1 } = e1;\n    return `${Xe(e1)}${Dn(e1)}\n\nThis is likely caused by tooling that has not copied \"${t1}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${t1}\" has been copied to \"${e1.expectedLocation}\".\n\n${kn(\"engine-not-found-tooling-investigation\")}\n\n${et(e1)}`;\n}\nvar zd = L(\"prisma:client:engines:resolveEnginePath\"), Yd = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function za(e1, t1) {\n    let r1 = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e1] ?? t1.prismaPath;\n    if (r1 !== void 0) return r1;\n    let { enginePath: n1, searchedLocations: i1 } = await Zd(e1, t1);\n    if (zd(\"enginePath\", n1), n1 !== void 0 && e1 === \"binary\" && li(n1), n1 !== void 0) return t1.prismaPath = n1;\n    let o1 = await nt(), s1 = t1.generator?.binaryTargets ?? [], a1 = s1.some((d1)=>d1.native), l1 = !s1.some((d1)=>d1.value === o1), u1 = __filename.match(Yd()) === null, c1 = {\n        searchedLocations: i1,\n        generatorBinaryTargets: s1,\n        generator: t1.generator,\n        runtimeBinaryTarget: o1,\n        queryEngineName: Ya(e1, o1),\n        expectedLocation: Er.default.relative(process.cwd(), t1.dirname),\n        errorStack: new Error().stack\n    }, p1;\n    throw a1 && l1 ? p1 = Wa(c1) : l1 ? p1 = Qa(c1) : u1 ? p1 = Ja(c1) : p1 = Ha(c1), new R(p1, t1.clientVersion);\n}\nasync function Zd(engineType, config) {\n    let binaryTarget = await nt(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        Er.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        Er.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(Yo());\n    for (let e of searchLocations){\n        let t = Ya(engineType, binaryTarget), r = Er.default.join(e, t);\n        if (searchedLocations.push(e), Ka.default.existsSync(r)) return {\n            enginePath: r,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction Ya(e1, t1) {\n    return e1 === \"library\" ? qr(t1, \"fs\") : `query-engine-${t1}${t1 === \"windows\" ? \".exe\" : \"\"}`;\n}\nvar Hi = k(bi());\nfunction Za(e1) {\n    return e1 ? e1.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t1)=>`${t1[0]}5`) : \"\";\n}\nfunction Xa(e1) {\n    return e1.split(`\n`).map((t1)=>t1.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar el = k(hs());\nfunction tl({ title: e1, user: t1 = \"prisma\", repo: r1 = \"prisma\", template: n1 = \"bug_report.yml\", body: i1 }) {\n    return (0, el.default)({\n        user: t1,\n        repo: r1,\n        template: n1,\n        title: e1,\n        body: i1\n    });\n}\nfunction rl({ version: e1, binaryTarget: t1, title: r1, description: n1, engineVersion: i1, database: o1, query: s1 }) {\n    let a1 = So(6e3 - (s1?.length ?? 0)), l1 = Xa((0, Hi.default)(a1)), u1 = n1 ? `# Description\n\\`\\`\\`\n${n1}\n\\`\\`\\`` : \"\", c1 = (0, Hi.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${t1?.padEnd(19)}|\n| Prisma Client   | ${e1?.padEnd(19)}|\n| Query Engine    | ${i1?.padEnd(19)}|\n| Database        | ${o1?.padEnd(19)}|\n\n${u1}\n\n## Logs\n\\`\\`\\`\n${l1}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s1 ? Za(s1) : \"\"}\n\\`\\`\\`\n`), p1 = tl({\n        title: r1,\n        body: c1\n    });\n    return `${r1}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${X(p1)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nfunction Nt({ inlineDatasources: e1, overrideDatasources: t1, env: r1, clientVersion: n1 }) {\n    let i1, o1 = Object.keys(e1)[0], s1 = e1[o1]?.url, a1 = t1[o1]?.url;\n    if (o1 === void 0 ? i1 = void 0 : a1 ? i1 = a1 : s1?.value ? i1 = s1.value : s1?.fromEnvVar && (i1 = r1[s1.fromEnvVar]), s1?.fromEnvVar !== void 0 && i1 === void 0) throw new R(`error: Environment variable not found: ${s1.fromEnvVar}.`, n1);\n    if (i1 === void 0) throw new R(\"error: Missing URL environment variable, value, or override.\", n1);\n    return i1;\n}\nvar _n = class extends Error {\n    constructor(t1, r1){\n        super(t1), this.clientVersion = r1.clientVersion, this.cause = r1.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar se = class extends _n {\n    constructor(t1, r1){\n        super(t1, r1), this.isRetryable = r1.isRetryable ?? !0;\n    }\n};\nfunction A(e1, t1) {\n    return {\n        ...e1,\n        isRetryable: t1\n    };\n}\nvar Mt = class extends se {\n    constructor(r1){\n        super(\"This request must be retried\", A(r1, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nw(Mt, \"ForcedRetryError\");\nvar at = class extends se {\n    constructor(r1, n1){\n        super(r1, A(n1, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P6001\";\n    }\n};\nw(at, \"InvalidDatasourceError\");\nvar lt = class extends se {\n    constructor(r1, n1){\n        super(r1, A(n1, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nw(lt, \"NotImplementedYetError\");\nvar q = class extends se {\n    constructor(t1, r1){\n        super(t1, r1), this.response = r1.response;\n        let n1 = this.response.headers.get(\"prisma-request-id\");\n        if (n1) {\n            let i1 = `(The request id was: ${n1})`;\n            this.message = this.message + \" \" + i1;\n        }\n    }\n};\nvar ut = class extends q {\n    constructor(r1){\n        super(\"Schema needs to be uploaded\", A(r1, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nw(ut, \"SchemaMissingError\");\nvar Ki = \"This request could not be understood by the server\", wr = class extends q {\n    constructor(r1, n1, i1){\n        super(n1 || Ki, A(r1, !1));\n        this.name = \"BadRequestError\";\n        this.code = \"P5000\";\n        i1 && (this.code = i1);\n    }\n};\nw(wr, \"BadRequestError\");\nvar xr = class extends q {\n    constructor(r1, n1){\n        super(\"Engine not started: healthcheck timeout\", A(r1, !0));\n        this.name = \"HealthcheckTimeoutError\";\n        this.code = \"P5013\";\n        this.logs = n1;\n    }\n};\nw(xr, \"HealthcheckTimeoutError\");\nvar Pr = class extends q {\n    constructor(r1, n1, i1){\n        super(n1, A(r1, !0));\n        this.name = \"EngineStartupError\";\n        this.code = \"P5014\";\n        this.logs = i1;\n    }\n};\nw(Pr, \"EngineStartupError\");\nvar vr = class extends q {\n    constructor(r1){\n        super(\"Engine version is not supported\", A(r1, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nw(vr, \"EngineVersionNotSupportedError\");\nvar zi = \"Request timed out\", Tr = class extends q {\n    constructor(r1, n1 = zi){\n        super(n1, A(r1, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nw(Tr, \"GatewayTimeoutError\");\nvar Xd = \"Interactive transaction error\", Rr = class extends q {\n    constructor(r1, n1 = Xd){\n        super(n1, A(r1, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nw(Rr, \"InteractiveTransactionError\");\nvar em = \"Request parameters are invalid\", Cr = class extends q {\n    constructor(r1, n1 = em){\n        super(n1, A(r1, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nw(Cr, \"InvalidRequestError\");\nvar Yi = \"Requested resource does not exist\", Sr = class extends q {\n    constructor(r1, n1 = Yi){\n        super(n1, A(r1, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nw(Sr, \"NotFoundError\");\nvar Zi = \"Unknown server error\", $t = class extends q {\n    constructor(r1, n1, i1){\n        super(n1 || Zi, A(r1, !0));\n        this.name = \"ServerError\";\n        this.code = \"P5006\";\n        this.logs = i1;\n    }\n};\nw($t, \"ServerError\");\nvar Xi = \"Unauthorized, check your connection string\", Ar = class extends q {\n    constructor(r1, n1 = Xi){\n        super(n1, A(r1, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nw(Ar, \"UnauthorizedError\");\nvar eo = \"Usage exceeded, retry again later\", Ir = class extends q {\n    constructor(r1, n1 = eo){\n        super(n1, A(r1, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nw(Ir, \"UsageExceededError\");\nasync function tm(e1) {\n    let t1;\n    try {\n        t1 = await e1.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let r1 = JSON.parse(t1);\n        if (typeof r1 == \"string\") switch(r1){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: r1\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: r1\n                };\n        }\n        if (typeof r1 == \"object\" && r1 !== null) {\n            if (\"is_panic\" in r1 && \"message\" in r1 && \"error_code\" in r1) return {\n                type: \"QueryEngineError\",\n                body: r1\n            };\n            if (\"EngineNotStarted\" in r1 || \"InteractiveTransactionMisrouted\" in r1 || \"InvalidRequestError\" in r1) {\n                let n1 = Object.values(r1)[0].reason;\n                return typeof n1 == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n1) ? {\n                    type: \"UnknownJsonError\",\n                    body: r1\n                } : {\n                    type: \"DataProxyError\",\n                    body: r1\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: r1\n        };\n    } catch  {\n        return t1 === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: t1\n        };\n    }\n}\nasync function Or(e1, t1) {\n    if (e1.ok) return;\n    let r1 = {\n        clientVersion: t1,\n        response: e1\n    }, n1 = await tm(e1);\n    if (n1.type === \"QueryEngineError\") throw new V(n1.body.message, {\n        code: n1.body.error_code,\n        clientVersion: t1\n    });\n    if (n1.type === \"DataProxyError\") {\n        if (n1.body === \"InternalDataProxyError\") throw new $t(r1, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n1.body) {\n            if (n1.body.EngineNotStarted.reason === \"SchemaMissing\") return new ut(r1);\n            if (n1.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new vr(r1);\n            if (\"EngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, logs: o1 } = n1.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Pr(r1, i1, o1);\n            }\n            if (\"KnownEngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, error_code: o1 } = n1.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new R(i1, t1, o1);\n            }\n            if (\"HealthcheckTimeout\" in n1.body.EngineNotStarted.reason) {\n                let { logs: i1 } = n1.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new xr(r1, i1);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n1.body) {\n            let i1 = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Rr(r1, i1[n1.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n1.body) throw new Cr(r1, n1.body.InvalidRequestError.reason);\n    }\n    if (e1.status === 401 || e1.status === 403) throw new Ar(r1, qt(Xi, n1));\n    if (e1.status === 404) return new Sr(r1, qt(Yi, n1));\n    if (e1.status === 429) throw new Ir(r1, qt(eo, n1));\n    if (e1.status === 504) throw new Tr(r1, qt(zi, n1));\n    if (e1.status >= 500) throw new $t(r1, qt(Zi, n1));\n    if (e1.status >= 400) throw new wr(r1, qt(Ki, n1));\n}\nfunction qt(e1, t1) {\n    return t1.type === \"EmptyError\" ? e1 : `${e1}: ${JSON.stringify(t1)}`;\n}\nfunction nl(e1) {\n    let t1 = Math.pow(2, e1) * 50, r1 = Math.ceil(Math.random() * t1) - Math.ceil(t1 / 2), n1 = t1 + r1;\n    return new Promise((i1)=>setTimeout(()=>i1(n1), n1));\n}\nvar $e = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nfunction il(e1) {\n    let t1 = new TextEncoder().encode(e1), r1 = \"\", n1 = t1.byteLength, i1 = n1 % 3, o1 = n1 - i1, s1, a1, l1, u1, c1;\n    for(let p1 = 0; p1 < o1; p1 = p1 + 3)c1 = t1[p1] << 16 | t1[p1 + 1] << 8 | t1[p1 + 2], s1 = (c1 & 16515072) >> 18, a1 = (c1 & 258048) >> 12, l1 = (c1 & 4032) >> 6, u1 = c1 & 63, r1 += $e[s1] + $e[a1] + $e[l1] + $e[u1];\n    return i1 == 1 ? (c1 = t1[o1], s1 = (c1 & 252) >> 2, a1 = (c1 & 3) << 4, r1 += $e[s1] + $e[a1] + \"==\") : i1 == 2 && (c1 = t1[o1] << 8 | t1[o1 + 1], s1 = (c1 & 64512) >> 10, a1 = (c1 & 1008) >> 4, l1 = (c1 & 15) << 2, r1 += $e[s1] + $e[a1] + $e[l1] + \"=\"), r1;\n}\nfunction ol(e1) {\n    if (!!e1.generator?.previewFeatures.some((r1)=>r1.toLowerCase().includes(\"metrics\"))) throw new R(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e1.clientVersion);\n}\nfunction rm(e1) {\n    return e1[0] * 1e3 + e1[1] / 1e6;\n}\nfunction sl(e1) {\n    return new Date(rm(e1));\n}\nvar al = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"5.22.0-44.605197351a3c8bdd595af2d2a9bc3025bca48ea2\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar kr = class extends se {\n    constructor(r1, n1){\n        super(`Cannot fetch data from service:\n${r1}`, A(n1, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nw(kr, \"RequestError\");\nasync function ct(e1, t1, r1 = (n1)=>n1) {\n    let n1 = t1.clientVersion;\n    try {\n        return typeof fetch == \"function\" ? await r1(fetch)(e1, t1) : await r1(to)(e1, t1);\n    } catch (i1) {\n        let o1 = i1.message ?? \"Unknown error\";\n        throw new kr(o1, {\n            clientVersion: n1\n        });\n    }\n}\nfunction im(e1) {\n    return {\n        ...e1.headers,\n        \"Content-Type\": \"application/json\"\n    };\n}\nfunction om(e1) {\n    return {\n        method: e1.method,\n        headers: im(e1)\n    };\n}\nfunction sm(e1, t1) {\n    return {\n        text: ()=>Promise.resolve(Buffer.concat(e1).toString()),\n        json: ()=>Promise.resolve().then(()=>JSON.parse(Buffer.concat(e1).toString())),\n        ok: t1.statusCode >= 200 && t1.statusCode <= 299,\n        status: t1.statusCode,\n        url: t1.url,\n        headers: new ro(t1.headers)\n    };\n}\nasync function to(e1, t1 = {}) {\n    let r1 = am(\"https\"), n1 = om(t1), i1 = [], { origin: o1 } = new URL(e1);\n    return new Promise((s1, a1)=>{\n        let l1 = r1.request(e1, n1, (u1)=>{\n            let { statusCode: c1, headers: { location: p1 } } = u1;\n            c1 >= 301 && c1 <= 399 && p1 && (p1.startsWith(\"http\") === !1 ? s1(to(`${o1}${p1}`, t1)) : s1(to(p1, t1))), u1.on(\"data\", (d1)=>i1.push(d1)), u1.on(\"end\", ()=>s1(sm(i1, u1))), u1.on(\"error\", a1);\n        });\n        l1.on(\"error\", a1), l1.end(t1.body ?? \"\");\n    });\n}\nvar am = undefined, ro = class {\n    constructor(t1 = {}){\n        this.headers = new Map;\n        for (let [r1, n1] of Object.entries(t1))if (typeof n1 == \"string\") this.headers.set(r1, n1);\n        else if (Array.isArray(n1)) for (let i1 of n1)this.headers.set(r1, i1);\n    }\n    append(t1, r1) {\n        this.headers.set(t1, r1);\n    }\n    delete(t1) {\n        this.headers.delete(t1);\n    }\n    get(t1) {\n        return this.headers.get(t1) ?? null;\n    }\n    has(t1) {\n        return this.headers.has(t1);\n    }\n    set(t1, r1) {\n        this.headers.set(t1, r1);\n    }\n    forEach(t1, r1) {\n        for (let [n1, i1] of this.headers)t1.call(r1, i1, n1, this);\n    }\n};\nvar lm = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, ll = L(\"prisma:client:dataproxyEngine\");\nasync function um(e1, t1) {\n    let r1 = al[\"@prisma/engines-version\"], n1 = t1.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e1.includes(\"accelerate\") && n1 !== \"0.0.0\" && n1 !== \"in-memory\") return n1;\n    let [i1, o1] = n1?.split(\"-\") ?? [];\n    if (o1 === void 0 && lm.test(i1)) return i1;\n    if (o1 !== void 0 || n1 === \"0.0.0\" || n1 === \"in-memory\") {\n        if (e1.startsWith(\"localhost\") || e1.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s1] = r1.split(\"-\") ?? [], [a1, l1, u1] = s1.split(\".\"), c1 = cm(`<=${a1}.${l1}.${u1}`), p1 = await ct(c1, {\n            clientVersion: n1\n        });\n        if (!p1.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p1.status} ${p1.statusText}, response body: ${await p1.text() || \"<empty body>\"}`);\n        let d1 = await p1.text();\n        ll(\"length of body fetched from unpkg.com\", d1.length);\n        let f1;\n        try {\n            f1 = JSON.parse(d1);\n        } catch (g1) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d1), g1;\n        }\n        return f1.version;\n    }\n    throw new lt(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n1\n    });\n}\nasync function ul(e1, t1) {\n    let r1 = await um(e1, t1);\n    return ll(\"version\", r1), r1;\n}\nfunction cm(e1) {\n    return encodeURI(`https://unpkg.com/prisma@${e1}/package.json`);\n}\nvar cl = 3, no = L(\"prisma:client:dataproxyEngine\"), io = class {\n    constructor({ apiKey: t1, tracingHelper: r1, logLevel: n1, logQueries: i1, engineHash: o1 }){\n        this.apiKey = t1, this.tracingHelper = r1, this.logLevel = n1, this.logQueries = i1, this.engineHash = o1;\n    }\n    build({ traceparent: t1, interactiveTransaction: r1 } = {}) {\n        let n1 = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n1.traceparent = t1 ?? this.tracingHelper.getTraceParent()), r1 && (n1[\"X-transaction-id\"] = r1.id);\n        let i1 = this.buildCaptureSettings();\n        return i1.length > 0 && (n1[\"X-capture-telemetry\"] = i1.join(\", \")), n1;\n    }\n    buildCaptureSettings() {\n        let t1 = [];\n        return this.tracingHelper.isEnabled() && t1.push(\"tracing\"), this.logLevel && t1.push(this.logLevel), this.logQueries && t1.push(\"query\"), t1;\n    }\n}, Dr = class {\n    constructor(t1){\n        this.name = \"DataProxyEngine\";\n        ol(t1), this.config = t1, this.env = {\n            ...t1.env,\n            ...typeof process < \"u\" ? process.env : {}\n        }, this.inlineSchema = il(t1.inlineSchema), this.inlineDatasources = t1.inlineDatasources, this.inlineSchemaHash = t1.inlineSchemaHash, this.clientVersion = t1.clientVersion, this.engineHash = t1.engineVersion, this.logEmitter = t1.logEmitter, this.tracingHelper = t1.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [t1, r1] = this.extractHostAndApiKey();\n            this.host = t1, this.headerBuilder = new io({\n                apiKey: r1,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await ul(t1, this.config), no(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(t1) {\n        t1?.logs?.length && t1.logs.forEach((r1)=>{\n            switch(r1.level){\n                case \"debug\":\n                case \"error\":\n                case \"trace\":\n                case \"warn\":\n                case \"info\":\n                    break;\n                case \"query\":\n                    {\n                        let n1 = typeof r1.attributes.query == \"string\" ? r1.attributes.query : \"\";\n                        if (!this.tracingHelper.isEnabled()) {\n                            let [i1] = n1.split(\"/* traceparent\");\n                            n1 = i1;\n                        }\n                        this.logEmitter.emit(\"query\", {\n                            query: n1,\n                            timestamp: sl(r1.timestamp),\n                            duration: Number(r1.attributes.duration_ms),\n                            params: r1.attributes.params,\n                            target: r1.attributes.target\n                        });\n                    }\n            }\n        }), t1?.traces?.length && this.tracingHelper.createEngineSpan({\n            span: !0,\n            spans: t1.traces\n        });\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(t1) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t1}`;\n    }\n    async uploadSchema() {\n        let t1 = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(t1, async ()=>{\n            let r1 = await ct(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            r1.ok || no(\"schema response status\", r1.status);\n            let n1 = await Or(r1, this.clientVersion);\n            if (n1) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n1.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n1;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(t1, { traceparent: r1, interactiveTransaction: n1, customDataProxyFetch: i1 }) {\n        return this.requestInternal({\n            body: t1,\n            traceparent: r1,\n            interactiveTransaction: n1,\n            customDataProxyFetch: i1\n        });\n    }\n    async requestBatch(t1, { traceparent: r1, transaction: n1, customDataProxyFetch: i1 }) {\n        let o1 = n1?.kind === \"itx\" ? n1.options : void 0, s1 = Ft(t1, n1), { batchResult: a1, elapsed: l1 } = await this.requestInternal({\n            body: s1,\n            customDataProxyFetch: i1,\n            interactiveTransaction: o1,\n            traceparent: r1\n        });\n        return a1.map((u1)=>\"errors\" in u1 && u1.errors.length > 0 ? st(u1.errors[0], this.clientVersion, this.config.activeProvider) : {\n                data: u1,\n                elapsed: l1\n            });\n    }\n    requestInternal({ body: t1, traceparent: r1, customDataProxyFetch: n1, interactiveTransaction: i1 }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o1 })=>{\n                let s1 = i1 ? `${i1.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o1(s1);\n                let a1 = await ct(s1, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: r1,\n                        interactiveTransaction: i1\n                    }),\n                    body: JSON.stringify(t1),\n                    clientVersion: this.clientVersion\n                }, n1);\n                a1.ok || no(\"graphql response status\", a1.status), await this.handleError(await Or(a1, this.clientVersion));\n                let l1 = await a1.json(), u1 = l1.extensions;\n                if (u1 && this.propagateResponseExtensions(u1), l1.errors) throw l1.errors.length === 1 ? st(l1.errors[0], this.config.clientVersion, this.config.activeProvider) : new B(l1.errors, {\n                    clientVersion: this.config.clientVersion\n                });\n                return l1;\n            }\n        });\n    }\n    async transaction(t1, r1, n1) {\n        let i1 = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i1[t1]} transaction`,\n            callback: async ({ logHttpCall: o1 })=>{\n                if (t1 === \"start\") {\n                    let s1 = JSON.stringify({\n                        max_wait: n1.maxWait,\n                        timeout: n1.timeout,\n                        isolation_level: n1.isolationLevel\n                    }), a1 = await this.url(\"transaction/start\");\n                    o1(a1);\n                    let l1 = await ct(a1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r1.traceparent\n                        }),\n                        body: s1,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Or(l1, this.clientVersion));\n                    let u1 = await l1.json(), c1 = u1.extensions;\n                    c1 && this.propagateResponseExtensions(c1);\n                    let p1 = u1.id, d1 = u1[\"data-proxy\"].endpoint;\n                    return {\n                        id: p1,\n                        payload: {\n                            endpoint: d1\n                        }\n                    };\n                } else {\n                    let s1 = `${n1.payload.endpoint}/${t1}`;\n                    o1(s1);\n                    let a1 = await ct(s1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r1.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Or(a1, this.clientVersion));\n                    let u1 = (await a1.json()).extensions;\n                    u1 && this.propagateResponseExtensions(u1);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let t1 = {\n            clientVersion: this.clientVersion\n        }, r1 = Object.keys(this.inlineDatasources)[0], n1 = Nt({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i1;\n        try {\n            i1 = new URL(n1);\n        } catch  {\n            throw new at(`Error validating datasource \\`${r1}\\`: the URL must start with the protocol \\`prisma://\\``, t1);\n        }\n        let { protocol: o1, host: s1, searchParams: a1 } = i1;\n        if (o1 !== \"prisma:\" && o1 !== \"prisma+postgres:\") throw new at(`Error validating datasource \\`${r1}\\`: the URL must start with the protocol \\`prisma://\\``, t1);\n        let l1 = a1.get(\"api_key\");\n        if (l1 === null || l1.length < 1) throw new at(`Error validating datasource \\`${r1}\\`: the URL must contain a valid API key`, t1);\n        return [\n            s1,\n            l1\n        ];\n    }\n    metrics() {\n        throw new lt(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(t1) {\n        for(let r1 = 0;; r1++){\n            let n1 = (i1)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i1} (n=${r1})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await t1.callback({\n                    logHttpCall: n1\n                });\n            } catch (i1) {\n                if (!(i1 instanceof se) || !i1.isRetryable) throw i1;\n                if (r1 >= cl) throw i1 instanceof Mt ? i1.cause : i1;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${r1 + 1}/${cl} failed for ${t1.actionGerund}: ${i1.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o1 = await nl(r1);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o1}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(t1) {\n        if (t1 instanceof ut) throw await this.uploadSchema(), new Mt({\n            clientVersion: this.clientVersion,\n            cause: t1\n        });\n        if (t1) throw t1;\n    }\n    applyPendingMigrations() {\n        throw new Error(\"Method not implemented.\");\n    }\n};\nfunction pl(e1) {\n    if (e1?.kind === \"itx\") return e1.options.id;\n}\nvar so = k(__webpack_require__(/*! os */ \"os\")), dl = k(__webpack_require__(/*! path */ \"path\"));\nvar oo = Symbol(\"PrismaLibraryEngineCache\");\nfunction pm() {\n    let e1 = globalThis;\n    return e1[oo] === void 0 && (e1[oo] = {}), e1[oo];\n}\nfunction dm(e1) {\n    let t1 = pm();\n    if (t1[e1] !== void 0) return t1[e1];\n    let r1 = dl.default.toNamespacedPath(e1), n1 = {\n        exports: {}\n    }, i1 = 0;\n    return process.platform !== \"win32\" && (i1 = so.default.constants.dlopen.RTLD_LAZY | so.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n1, r1, i1), t1[e1] = n1.exports, n1.exports;\n}\nvar ml = {\n    async loadLibrary (e1) {\n        let t1 = await Yn(), r1 = await za(\"library\", e1);\n        try {\n            return e1.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>dm(r1));\n        } catch (n1) {\n            let i1 = ui({\n                e: n1,\n                platformInfo: t1,\n                id: r1\n            });\n            throw new R(i1, e1.clientVersion);\n        }\n    }\n};\nvar ao, fl = {\n    async loadLibrary (e1) {\n        let { clientVersion: t1, adapter: r1, engineWasm: n1 } = e1;\n        if (r1 === void 0) throw new R(`The \\`adapter\\` option for \\`PrismaClient\\` is required in this context (${In().prettyName})`, t1);\n        if (n1 === void 0) throw new R(\"WASM engine was unexpectedly `undefined`\", t1);\n        ao === void 0 && (ao = (async ()=>{\n            let o1 = n1.getRuntime(), s1 = await n1.getQueryEngineWasmModule();\n            if (s1 == null) throw new R(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", t1);\n            let a1 = {\n                \"./query_engine_bg.js\": o1\n            }, l1 = new WebAssembly.Instance(s1, a1);\n            return o1.__wbg_set_wasm(l1.exports), o1.QueryEngine;\n        })());\n        let i1 = await ao;\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: i1\n        };\n    }\n};\nvar mm = \"P2036\", Ae = L(\"prisma:client:libraryEngine\");\nfunction fm(e1) {\n    return e1.item_type === \"query\" && \"query\" in e1;\n}\nfunction gm(e1) {\n    return \"level\" in e1 ? e1.level === \"error\" && e1.message === \"PANIC\" : !1;\n}\nvar gl = [\n    ...Jn,\n    \"native\"\n], _r = class {\n    constructor(t1, r1){\n        this.name = \"LibraryEngine\";\n        this.libraryLoader = r1 ?? ml, t1.engineWasm !== void 0 && (this.libraryLoader = r1 ?? fl), this.config = t1, this.libraryStarted = !1, this.logQueries = t1.logQueries ?? !1, this.logLevel = t1.logLevel ?? \"error\", this.logEmitter = t1.logEmitter, this.datamodel = t1.inlineSchema, t1.enableDebugLogs && (this.logLevel = \"debug\");\n        let n1 = Object.keys(t1.overrideDatasources)[0], i1 = t1.overrideDatasources[n1]?.url;\n        n1 !== void 0 && i1 !== void 0 && (this.datasourceOverrides = {\n            [n1]: i1\n        }), this.libraryInstantiationPromise = this.instantiateLibrary();\n    }\n    async applyPendingMigrations() {\n        throw new Error(\"Cannot call this method from this type of engine instance\");\n    }\n    async transaction(t1, r1, n1) {\n        await this.start();\n        let i1 = JSON.stringify(r1), o1;\n        if (t1 === \"start\") {\n            let a1 = JSON.stringify({\n                max_wait: n1.maxWait,\n                timeout: n1.timeout,\n                isolation_level: n1.isolationLevel\n            });\n            o1 = await this.engine?.startTransaction(a1, i1);\n        } else t1 === \"commit\" ? o1 = await this.engine?.commitTransaction(n1.id, i1) : t1 === \"rollback\" && (o1 = await this.engine?.rollbackTransaction(n1.id, i1));\n        let s1 = this.parseEngineResponse(o1);\n        if (hm(s1)) {\n            let a1 = this.getExternalAdapterError(s1);\n            throw a1 ? a1.error : new V(s1.message, {\n                code: s1.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: s1.meta\n            });\n        }\n        return s1;\n    }\n    async instantiateLibrary() {\n        if (Ae(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        Qn(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.loadEngine(), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let t1 = await nt();\n            if (!gl.includes(t1)) throw new R(`Unknown ${ce(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ce(H(t1))}. Possible binaryTargets: ${qe(gl.join(\", \"))} or a path to the query engine library.\nYou may have to run ${qe(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return t1;\n        }\n    }\n    parseEngineResponse(t1) {\n        if (!t1) throw new B(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(t1);\n        } catch  {\n            throw new B(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let t1 = new WeakRef(this), { adapter: r1 } = this.config;\n                r1 && Ae(\"Using driver adapter: %O\", r1), this.engine = new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\"\n                }, (n1)=>{\n                    t1.deref()?.logger(n1);\n                }, r1);\n            } catch (t1) {\n                let r1 = t1, n1 = this.parseInitError(r1.message);\n                throw typeof n1 == \"string\" ? r1 : new R(n1.message, this.config.clientVersion, n1.error_code);\n            }\n        }\n    }\n    logger(t1) {\n        let r1 = this.parseEngineResponse(t1);\n        if (r1) {\n            if (\"span\" in r1) {\n                this.config.tracingHelper.createEngineSpan(r1);\n                return;\n            }\n            r1.level = r1?.level.toLowerCase() ?? \"unknown\", fm(r1) ? this.logEmitter.emit(\"query\", {\n                timestamp: new Date,\n                query: r1.query,\n                params: r1.params,\n                duration: Number(r1.duration_ms),\n                target: r1.module_path\n            }) : gm(r1) ? this.loggerRustPanic = new le(lo(this, `${r1.message}: ${r1.reason} in ${r1.file}:${r1.line}:${r1.column}`), this.config.clientVersion) : this.logEmitter.emit(r1.level, {\n                timestamp: new Date,\n                message: r1.message,\n                target: r1.module_path\n            });\n        }\n    }\n    parseInitError(t1) {\n        try {\n            return JSON.parse(t1);\n        } catch  {}\n        return t1;\n    }\n    parseRequestError(t1) {\n        try {\n            return JSON.parse(t1);\n        } catch  {}\n        return t1;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return Ae(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let t1 = async ()=>{\n            Ae(\"library starting\");\n            try {\n                let r1 = {\n                    traceparent: this.config.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(r1)), this.libraryStarted = !0, Ae(\"library started\");\n            } catch (r1) {\n                let n1 = this.parseInitError(r1.message);\n                throw typeof n1 == \"string\" ? r1 : new R(n1.message, this.config.clientVersion, n1.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan(\"connect\", t1), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return Ae(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let t1 = async ()=>{\n            await new Promise((n1)=>setTimeout(n1, 5)), Ae(\"library stopping\");\n            let r1 = {\n                traceparent: this.config.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(r1)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, Ae(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan(\"disconnect\", t1), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(t1) {\n        return this.library?.debugPanic(t1);\n    }\n    async request(t1, { traceparent: r1, interactiveTransaction: n1 }) {\n        Ae(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i1 = JSON.stringify({\n            traceparent: r1\n        }), o1 = JSON.stringify(t1);\n        try {\n            await this.start(), this.executingQueryPromise = this.engine?.query(o1, i1, n1?.id), this.lastQuery = o1;\n            let s1 = this.parseEngineResponse(await this.executingQueryPromise);\n            if (s1.errors) throw s1.errors.length === 1 ? this.buildQueryError(s1.errors[0]) : new B(JSON.stringify(s1.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: s1,\n                elapsed: 0\n            };\n        } catch (s1) {\n            if (s1 instanceof R) throw s1;\n            if (s1.code === \"GenericFailure\" && s1.message?.startsWith(\"PANIC:\")) throw new le(lo(this, s1.message), this.config.clientVersion);\n            let a1 = this.parseRequestError(s1.message);\n            throw typeof a1 == \"string\" ? s1 : new B(`${a1.message}\n${a1.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(t1, { transaction: r1, traceparent: n1 }) {\n        Ae(\"requestBatch\");\n        let i1 = Ft(t1, r1);\n        await this.start(), this.lastQuery = JSON.stringify(i1), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n1\n        }), pl(r1));\n        let o1 = await this.executingQueryPromise, s1 = this.parseEngineResponse(o1);\n        if (s1.errors) throw s1.errors.length === 1 ? this.buildQueryError(s1.errors[0]) : new B(JSON.stringify(s1.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: a1, errors: l1 } = s1;\n        if (Array.isArray(a1)) return a1.map((u1)=>u1.errors && u1.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u1.errors[0]) : {\n                data: u1,\n                elapsed: 0\n            });\n        throw l1 && l1.length === 1 ? new Error(l1[0].error) : new Error(JSON.stringify(s1));\n    }\n    buildQueryError(t1) {\n        if (t1.user_facing_error.is_panic) return new le(lo(this, t1.user_facing_error.message), this.config.clientVersion);\n        let r1 = this.getExternalAdapterError(t1.user_facing_error);\n        return r1 ? r1.error : st(t1, this.config.clientVersion, this.config.activeProvider);\n    }\n    getExternalAdapterError(t1) {\n        if (t1.error_code === mm && this.config.adapter) {\n            let r1 = t1.meta?.id;\n            Yr(typeof r1 == \"number\", \"Malformed external JS error received from the engine\");\n            let n1 = this.config.adapter.errorRegistry.consumeError(r1);\n            return Yr(n1, \"External error with reported id was not registered\"), n1;\n        }\n    }\n    async metrics(t1) {\n        await this.start();\n        let r1 = await this.engine.metrics(JSON.stringify(t1));\n        return t1.format === \"prometheus\" ? r1 : this.parseEngineResponse(r1);\n    }\n};\nfunction hm(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.error_code !== void 0;\n}\nfunction lo(e1, t1) {\n    return rl({\n        binaryTarget: e1.binaryTarget,\n        title: t1,\n        version: e1.config.clientVersion,\n        engineVersion: e1.versionInfo?.commit,\n        database: e1.config.activeProvider,\n        query: e1.lastQuery\n    });\n}\nfunction hl({ copyEngine: e1 = !0 }, t1) {\n    let r1;\n    try {\n        r1 = Nt({\n            inlineDatasources: t1.inlineDatasources,\n            overrideDatasources: t1.overrideDatasources,\n            env: {\n                ...t1.env,\n                ...process.env\n            },\n            clientVersion: t1.clientVersion\n        });\n    } catch  {}\n    let n1 = !!(r1?.startsWith(\"prisma://\") || r1?.startsWith(\"prisma+postgres://\"));\n    e1 && n1 && tr(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let i1 = Yt(t1.generator), o1 = n1 || !e1, s1 = !!t1.adapter, a1 = i1 === \"library\", l1 = i1 === \"binary\";\n    if (o1 && s1 || s1 && !1) {\n        let u1;\n        throw e1 ? r1?.startsWith(\"prisma://\") ? u1 = [\n            \"Prisma Client was configured to use the `adapter` option but the URL was a `prisma://` URL.\",\n            \"Please either use the `prisma://` URL or remove the `adapter` from the Prisma Client constructor.\"\n        ] : u1 = [\n            \"Prisma Client was configured to use both the `adapter` and Accelerate, please chose one.\"\n        ] : u1 = [\n            \"Prisma Client was configured to use the `adapter` option but `prisma generate` was run with `--no-engine`.\",\n            \"Please run `prisma generate` without `--no-engine` to be able to use Prisma Client with the adapter.\"\n        ], new J(u1.join(`\n`), {\n            clientVersion: t1.clientVersion\n        });\n    }\n    if (o1) return new Dr(t1);\n    if (a1) return new _r(t1);\n    throw new J(\"Invalid client engine type, please use `library` or `binary`\", {\n        clientVersion: t1.clientVersion\n    });\n}\nfunction Fn({ generator: e1 }) {\n    return e1?.previewFeatures ?? [];\n}\nvar yl = (e1)=>({\n        command: e1\n    });\nvar bl = (e1)=>e1.strings.reduce((t1, r1, n1)=>`${t1}@P${n1}${r1}`);\nfunction jt(e1) {\n    try {\n        return El(e1, \"fast\");\n    } catch  {\n        return El(e1, \"slow\");\n    }\n}\nfunction El(e1, t1) {\n    return JSON.stringify(e1.map((r1)=>xl(r1, t1)));\n}\nfunction xl(e1, t1) {\n    return Array.isArray(e1) ? e1.map((r1)=>xl(r1, t1)) : typeof e1 == \"bigint\" ? {\n        prisma__type: \"bigint\",\n        prisma__value: e1.toString()\n    } : Pt(e1) ? {\n        prisma__type: \"date\",\n        prisma__value: e1.toJSON()\n    } : xe.isDecimal(e1) ? {\n        prisma__type: \"decimal\",\n        prisma__value: e1.toJSON()\n    } : Buffer.isBuffer(e1) ? {\n        prisma__type: \"bytes\",\n        prisma__value: e1.toString(\"base64\")\n    } : ym(e1) || ArrayBuffer.isView(e1) ? {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e1).toString(\"base64\")\n    } : typeof e1 == \"object\" && t1 === \"slow\" ? Pl(e1) : e1;\n}\nfunction ym(e1) {\n    return e1 instanceof ArrayBuffer || e1 instanceof SharedArrayBuffer ? !0 : typeof e1 == \"object\" && e1 !== null ? e1[Symbol.toStringTag] === \"ArrayBuffer\" || e1[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Pl(e1) {\n    if (typeof e1 != \"object\" || e1 === null) return e1;\n    if (typeof e1.toJSON == \"function\") return e1.toJSON();\n    if (Array.isArray(e1)) return e1.map(wl);\n    let t1 = {};\n    for (let r1 of Object.keys(e1))t1[r1] = wl(e1[r1]);\n    return t1;\n}\nfunction wl(e1) {\n    return typeof e1 == \"bigint\" ? e1.toString() : Pl(e1);\n}\nvar bm = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], vl = bm;\nvar Em = /^(\\s*alter\\s)/i, Tl = L(\"prisma:client\");\nfunction uo(e1, t1, r1, n1) {\n    if (!(e1 !== \"postgresql\" && e1 !== \"cockroachdb\") && r1.length > 0 && Em.exec(t1)) throw new Error(`Running ALTER using ${n1} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar co = ({ clientMethod: e1, activeProvider: t1 })=>(r1)=>{\n        let n1 = \"\", i1;\n        if (pa(r1)) n1 = r1.sql, i1 = {\n            values: jt(r1.values),\n            __prismaRawParameters__: !0\n        };\n        else if (Array.isArray(r1)) {\n            let [o1, ...s1] = r1;\n            n1 = o1, i1 = {\n                values: jt(s1 || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(t1){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    n1 = r1.sql, i1 = {\n                        values: jt(r1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    n1 = r1.text, i1 = {\n                        values: jt(r1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    n1 = bl(r1), i1 = {\n                        values: jt(r1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${t1} provider does not support ${e1}`);\n        }\n        return i1?.values ? Tl(`prisma.${e1}(${n1}, ${i1.values})`) : Tl(`prisma.${e1}(${n1})`), {\n            query: n1,\n            parameters: i1\n        };\n    }, Rl = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1.strings,\n            ...e1.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        let [t1, ...r1] = e1;\n        return new oe(t1, r1);\n    }\n}, Cl = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        return e1[0];\n    }\n};\nfunction po(e1) {\n    return function(r1) {\n        let n1, i1 = (o1 = e1)=>{\n            try {\n                return o1 === void 0 || o1?.kind === \"itx\" ? n1 ??= Sl(r1(o1)) : Sl(r1(o1));\n            } catch (s1) {\n                return Promise.reject(s1);\n            }\n        };\n        return {\n            then (o1, s1) {\n                return i1().then(o1, s1);\n            },\n            catch (o1) {\n                return i1().catch(o1);\n            },\n            finally (o1) {\n                return i1().finally(o1);\n            },\n            requestTransaction (o1) {\n                let s1 = i1(o1);\n                return s1.requestTransaction ? s1.requestTransaction(o1) : s1;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Sl(e1) {\n    return typeof e1.then == \"function\" ? e1 : Promise.resolve(e1);\n}\nvar Al = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    async createEngineSpan () {},\n    getActiveContext () {},\n    runInChildSpan (e1, t1) {\n        return t1();\n    }\n}, mo = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(t1) {\n        return this.getGlobalTracingHelper().getTraceParent(t1);\n    }\n    createEngineSpan(t1) {\n        return this.getGlobalTracingHelper().createEngineSpan(t1);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(t1, r1) {\n        return this.getGlobalTracingHelper().runInChildSpan(t1, r1);\n    }\n    getGlobalTracingHelper() {\n        return globalThis.PRISMA_INSTRUMENTATION?.helper ?? Al;\n    }\n};\nfunction Il(e1) {\n    return e1.includes(\"tracing\") ? new mo : Al;\n}\nfunction Ol(e1, t1 = ()=>{}) {\n    let r1, n1 = new Promise((i1)=>r1 = i1);\n    return {\n        then (i1) {\n            return --e1 === 0 && r1(t1()), i1?.(n1);\n        }\n    };\n}\nfunction kl(e1) {\n    return typeof e1 == \"string\" ? e1 : e1.reduce((t1, r1)=>{\n        let n1 = typeof r1 == \"string\" ? r1 : r1.level;\n        return n1 === \"query\" ? t1 : t1 && (r1 === \"info\" || t1 === \"info\") ? \"info\" : n1;\n    }, void 0);\n}\nvar Ln = class {\n    constructor(){\n        this._middlewares = [];\n    }\n    use(t1) {\n        this._middlewares.push(t1);\n    }\n    get(t1) {\n        return this._middlewares[t1];\n    }\n    has(t1) {\n        return !!this._middlewares[t1];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n};\nvar Fl = k(bi());\nfunction Nn(e1) {\n    return typeof e1.batchRequestIdx == \"number\";\n}\nfunction Dl(e1) {\n    if (e1.action !== \"findUnique\" && e1.action !== \"findUniqueOrThrow\") return;\n    let t1 = [];\n    return e1.modelName && t1.push(e1.modelName), e1.query.arguments && t1.push(fo(e1.query.arguments)), t1.push(fo(e1.query.selection)), t1.join(\"\");\n}\nfunction fo(e1) {\n    return `(${Object.keys(e1).sort().map((r1)=>{\n        let n1 = e1[r1];\n        return typeof n1 == \"object\" && n1 !== null ? `(${r1} ${fo(n1)})` : r1;\n    }).join(\" \")})`;\n}\nvar wm = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createManyAndReturn: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction go(e1) {\n    return wm[e1];\n}\nvar Mn = class {\n    constructor(t1){\n        this.options = t1;\n        this.tickActive = !1;\n        this.batches = {};\n    }\n    request(t1) {\n        let r1 = this.options.batchBy(t1);\n        return r1 ? (this.batches[r1] || (this.batches[r1] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n1, i1)=>{\n            this.batches[r1].push({\n                request: t1,\n                resolve: n1,\n                reject: i1\n            });\n        })) : this.options.singleLoader(t1);\n    }\n    dispatchBatches() {\n        for(let t1 in this.batches){\n            let r1 = this.batches[t1];\n            delete this.batches[t1], r1.length === 1 ? this.options.singleLoader(r1[0].request).then((n1)=>{\n                n1 instanceof Error ? r1[0].reject(n1) : r1[0].resolve(n1);\n            }).catch((n1)=>{\n                r1[0].reject(n1);\n            }) : (r1.sort((n1, i1)=>this.options.batchOrder(n1.request, i1.request)), this.options.batchLoader(r1.map((n1)=>n1.request)).then((n1)=>{\n                if (n1 instanceof Error) for(let i1 = 0; i1 < r1.length; i1++)r1[i1].reject(n1);\n                else for(let i1 = 0; i1 < r1.length; i1++){\n                    let o1 = n1[i1];\n                    o1 instanceof Error ? r1[i1].reject(o1) : r1[i1].resolve(o1);\n                }\n            }).catch((n1)=>{\n                for(let i1 = 0; i1 < r1.length; i1++)r1[i1].reject(n1);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nfunction pt(e1, t1) {\n    if (t1 === null) return t1;\n    switch(e1){\n        case \"bigint\":\n            return BigInt(t1);\n        case \"bytes\":\n            return Buffer.from(t1, \"base64\");\n        case \"decimal\":\n            return new xe(t1);\n        case \"datetime\":\n        case \"date\":\n            return new Date(t1);\n        case \"time\":\n            return new Date(`1970-01-01T${t1}Z`);\n        case \"bigint-array\":\n            return t1.map((r1)=>pt(\"bigint\", r1));\n        case \"bytes-array\":\n            return t1.map((r1)=>pt(\"bytes\", r1));\n        case \"decimal-array\":\n            return t1.map((r1)=>pt(\"decimal\", r1));\n        case \"datetime-array\":\n            return t1.map((r1)=>pt(\"datetime\", r1));\n        case \"date-array\":\n            return t1.map((r1)=>pt(\"date\", r1));\n        case \"time-array\":\n            return t1.map((r1)=>pt(\"time\", r1));\n        default:\n            return t1;\n    }\n}\nfunction _l(e1) {\n    let t1 = [], r1 = xm(e1);\n    for(let n1 = 0; n1 < e1.rows.length; n1++){\n        let i1 = e1.rows[n1], o1 = {\n            ...r1\n        };\n        for(let s1 = 0; s1 < i1.length; s1++)o1[e1.columns[s1]] = pt(e1.types[s1], i1[s1]);\n        t1.push(o1);\n    }\n    return t1;\n}\nfunction xm(e1) {\n    let t1 = {};\n    for(let r1 = 0; r1 < e1.columns.length; r1++)t1[e1.columns[r1]] = null;\n    return t1;\n}\nvar Pm = L(\"prisma:client:request_handler\"), $n = class {\n    constructor(t1, r1){\n        this.logEmitter = r1, this.client = t1, this.dataloader = new Mn({\n            batchLoader: Ma(async ({ requests: n1, customDataProxyFetch: i1 })=>{\n                let { transaction: o1, otelParentCtx: s1 } = n1[0], a1 = n1.map((p1)=>p1.protocolQuery), l1 = this.client._tracingHelper.getTraceParent(s1), u1 = n1.some((p1)=>go(p1.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a1, {\n                    traceparent: l1,\n                    transaction: vm(o1),\n                    containsWrite: u1,\n                    customDataProxyFetch: i1\n                })).map((p1, d1)=>{\n                    if (p1 instanceof Error) return p1;\n                    try {\n                        return this.mapQueryEngineResult(n1[d1], p1);\n                    } catch (f1) {\n                        return f1;\n                    }\n                });\n            }),\n            singleLoader: async (n1)=>{\n                let i1 = n1.transaction?.kind === \"itx\" ? Ll(n1.transaction) : void 0, o1 = await this.client._engine.request(n1.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i1,\n                    isWrite: go(n1.protocolQuery.action),\n                    customDataProxyFetch: n1.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n1, o1);\n            },\n            batchBy: (n1)=>n1.transaction?.id ? `transaction-${n1.transaction.id}` : Dl(n1.protocolQuery),\n            batchOrder (n1, i1) {\n                return n1.transaction?.kind === \"batch\" && i1.transaction?.kind === \"batch\" ? n1.transaction.index - i1.transaction.index : 0;\n            }\n        });\n    }\n    async request(t1) {\n        try {\n            return await this.dataloader.request(t1);\n        } catch (r1) {\n            let { clientMethod: n1, callsite: i1, transaction: o1, args: s1, modelName: a1 } = t1;\n            this.handleAndLogRequestError({\n                error: r1,\n                clientMethod: n1,\n                callsite: i1,\n                transaction: o1,\n                args: s1,\n                modelName: a1,\n                globalOmit: t1.globalOmit\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: t1, unpacker: r1 }, n1) {\n        let i1 = n1?.data, o1 = n1?.elapsed, s1 = this.unpack(i1, t1, r1);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: s1,\n            elapsed: o1\n        } : s1;\n    }\n    handleAndLogRequestError(t1) {\n        try {\n            this.handleRequestError(t1);\n        } catch (r1) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: r1.message,\n                target: t1.clientMethod,\n                timestamp: new Date\n            }), r1;\n        }\n    }\n    handleRequestError({ error: t1, clientMethod: r1, callsite: n1, transaction: i1, args: o1, modelName: s1, globalOmit: a1 }) {\n        if (Pm(t1), Tm(t1, i1) || t1 instanceof Le) throw t1;\n        if (t1 instanceof V && Rm(t1)) {\n            let u1 = Nl(t1.meta);\n            wn({\n                args: o1,\n                errors: [\n                    u1\n                ],\n                callsite: n1,\n                errorFormat: this.client._errorFormat,\n                originalMethod: r1,\n                clientVersion: this.client._clientVersion,\n                globalOmit: a1\n            });\n        }\n        let l1 = t1.message;\n        if (n1 && (l1 = Tt({\n            callsite: n1,\n            originalMethod: r1,\n            isPanic: t1.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: l1\n        })), l1 = this.sanitizeMessage(l1), t1.code) {\n            let u1 = s1 ? {\n                modelName: s1,\n                ...t1.meta\n            } : t1.meta;\n            throw new V(l1, {\n                code: t1.code,\n                clientVersion: this.client._clientVersion,\n                meta: u1,\n                batchRequestIdx: t1.batchRequestIdx\n            });\n        } else {\n            if (t1.isPanic) throw new le(l1, this.client._clientVersion);\n            if (t1 instanceof B) throw new B(l1, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: t1.batchRequestIdx\n            });\n            if (t1 instanceof R) throw new R(l1, this.client._clientVersion);\n            if (t1 instanceof le) throw new le(l1, this.client._clientVersion);\n        }\n        throw t1.clientVersion = this.client._clientVersion, t1;\n    }\n    sanitizeMessage(t1) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, Fl.default)(t1) : t1;\n    }\n    unpack(t1, r1, n1) {\n        if (!t1 || (t1.data && (t1 = t1.data), !t1)) return t1;\n        let i1 = Object.keys(t1)[0], o1 = Object.values(t1)[0], s1 = r1.filter((u1)=>u1 !== \"select\" && u1 !== \"include\"), a1 = Gi(o1, s1), l1 = i1 === \"queryRaw\" ? _l(a1) : wt(a1);\n        return n1 ? n1(l1) : l1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction vm(e1) {\n    if (e1) {\n        if (e1.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e1.isolationLevel\n            }\n        };\n        if (e1.kind === \"itx\") return {\n            kind: \"itx\",\n            options: Ll(e1)\n        };\n        Fe(e1, \"Unknown transaction kind\");\n    }\n}\nfunction Ll(e1) {\n    return {\n        id: e1.id,\n        payload: e1.payload\n    };\n}\nfunction Tm(e1, t1) {\n    return Nn(e1) && t1?.kind === \"batch\" && e1.batchRequestIdx !== t1.index;\n}\nfunction Rm(e1) {\n    return e1.code === \"P2009\" || e1.code === \"P2012\";\n}\nfunction Nl(e1) {\n    if (e1.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e1.errors.map(Nl)\n    };\n    if (Array.isArray(e1.selectionPath)) {\n        let [, ...t1] = e1.selectionPath;\n        return {\n            ...e1,\n            selectionPath: t1\n        };\n    }\n    return e1;\n}\nvar Ml = \"5.22.0\";\nvar $l = Ml;\nvar Ul = k(Ai());\nvar F = class extends Error {\n    constructor(t1){\n        super(t1 + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nw(F, \"PrismaClientConstructorValidationError\");\nvar ql = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"transactionOptions\",\n    \"omit\",\n    \"__internal\"\n], jl = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], Vl = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Sm = {\n    datasources: (e1, { datasourceNames: t1 })=>{\n        if (e1) {\n            if (typeof e1 != \"object\" || Array.isArray(e1)) throw new F(`Invalid value ${JSON.stringify(e1)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [r1, n1] of Object.entries(e1)){\n                if (!t1.includes(r1)) {\n                    let i1 = Vt(r1, t1) || ` Available datasources: ${t1.join(\", \")}`;\n                    throw new F(`Unknown datasource ${r1} provided to PrismaClient constructor.${i1}`);\n                }\n                if (typeof n1 != \"object\" || Array.isArray(n1)) throw new F(`Invalid value ${JSON.stringify(e1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n1 && typeof n1 == \"object\") for (let [i1, o1] of Object.entries(n1)){\n                    if (i1 !== \"url\") throw new F(`Invalid value ${JSON.stringify(e1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o1 != \"string\") throw new F(`Invalid value ${JSON.stringify(o1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e1, t1)=>{\n        if (e1 === null) return;\n        if (e1 === void 0) throw new F('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!Fn(t1).includes(\"driverAdapters\")) throw new F('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (Yt() === \"binary\") throw new F('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e1)=>{\n        if (typeof e1 < \"u\" && typeof e1 != \"string\") throw new F(`Invalid value ${JSON.stringify(e1)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e1)=>{\n        if (e1) {\n            if (typeof e1 != \"string\") throw new F(`Invalid value ${JSON.stringify(e1)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!jl.includes(e1)) {\n                let t1 = Vt(e1, jl);\n                throw new F(`Invalid errorFormat ${e1} provided to PrismaClient constructor.${t1}`);\n            }\n        }\n    },\n    log: (e1)=>{\n        if (!e1) return;\n        if (!Array.isArray(e1)) throw new F(`Invalid value ${JSON.stringify(e1)} for \"log\" provided to PrismaClient constructor.`);\n        function t1(r1) {\n            if (typeof r1 == \"string\" && !Vl.includes(r1)) {\n                let n1 = Vt(r1, Vl);\n                throw new F(`Invalid log level \"${r1}\" provided to PrismaClient constructor.${n1}`);\n            }\n        }\n        for (let r1 of e1){\n            t1(r1);\n            let n1 = {\n                level: t1,\n                emit: (i1)=>{\n                    let o1 = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o1.includes(i1)) {\n                        let s1 = Vt(i1, o1);\n                        throw new F(`Invalid value ${JSON.stringify(i1)} for \"emit\" in logLevel provided to PrismaClient constructor.${s1}`);\n                    }\n                }\n            };\n            if (r1 && typeof r1 == \"object\") for (let [i1, o1] of Object.entries(r1))if (n1[i1]) n1[i1](o1);\n            else throw new F(`Invalid property ${i1} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    transactionOptions: (e1)=>{\n        if (!e1) return;\n        let t1 = e1.maxWait;\n        if (t1 != null && t1 <= 0) throw new F(`Invalid value ${t1} for maxWait in \"transactionOptions\" provided to PrismaClient constructor. maxWait needs to be greater than 0`);\n        let r1 = e1.timeout;\n        if (r1 != null && r1 <= 0) throw new F(`Invalid value ${r1} for timeout in \"transactionOptions\" provided to PrismaClient constructor. timeout needs to be greater than 0`);\n    },\n    omit: (e1, t1)=>{\n        if (typeof e1 != \"object\") throw new F('\"omit\" option is expected to be an object.');\n        if (e1 === null) throw new F('\"omit\" option can not be `null`');\n        let r1 = [];\n        for (let [n1, i1] of Object.entries(e1)){\n            let o1 = Im(n1, t1.runtimeDataModel);\n            if (!o1) {\n                r1.push({\n                    kind: \"UnknownModel\",\n                    modelKey: n1\n                });\n                continue;\n            }\n            for (let [s1, a1] of Object.entries(i1)){\n                let l1 = o1.fields.find((u1)=>u1.name === s1);\n                if (!l1) {\n                    r1.push({\n                        kind: \"UnknownField\",\n                        modelKey: n1,\n                        fieldName: s1\n                    });\n                    continue;\n                }\n                if (l1.relationName) {\n                    r1.push({\n                        kind: \"RelationInOmit\",\n                        modelKey: n1,\n                        fieldName: s1\n                    });\n                    continue;\n                }\n                typeof a1 != \"boolean\" && r1.push({\n                    kind: \"InvalidFieldValue\",\n                    modelKey: n1,\n                    fieldName: s1\n                });\n            }\n        }\n        if (r1.length > 0) throw new F(Om(e1, r1));\n    },\n    __internal: (e1)=>{\n        if (!e1) return;\n        let t1 = [\n            \"debug\",\n            \"engine\",\n            \"configOverride\"\n        ];\n        if (typeof e1 != \"object\") throw new F(`Invalid value ${JSON.stringify(e1)} for \"__internal\" to PrismaClient constructor`);\n        for (let [r1] of Object.entries(e1))if (!t1.includes(r1)) {\n            let n1 = Vt(r1, t1);\n            throw new F(`Invalid property ${JSON.stringify(r1)} for \"__internal\" provided to PrismaClient constructor.${n1}`);\n        }\n    }\n};\nfunction Gl(e1, t1) {\n    for (let [r1, n1] of Object.entries(e1)){\n        if (!ql.includes(r1)) {\n            let i1 = Vt(r1, ql);\n            throw new F(`Unknown property ${r1} provided to PrismaClient constructor.${i1}`);\n        }\n        Sm[r1](n1, t1);\n    }\n    if (e1.datasourceUrl && e1.datasources) throw new F('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Vt(e1, t1) {\n    if (t1.length === 0 || typeof e1 != \"string\") return \"\";\n    let r1 = Am(e1, t1);\n    return r1 ? ` Did you mean \"${r1}\"?` : \"\";\n}\nfunction Am(e1, t1) {\n    if (t1.length === 0) return null;\n    let r1 = t1.map((i1)=>({\n            value: i1,\n            distance: (0, Ul.default)(e1, i1)\n        }));\n    r1.sort((i1, o1)=>i1.distance < o1.distance ? -1 : 1);\n    let n1 = r1[0];\n    return n1.distance < 3 ? n1.value : null;\n}\nfunction Im(e1, t1) {\n    return Bl(t1.models, e1) ?? Bl(t1.types, e1);\n}\nfunction Bl(e1, t1) {\n    let r1 = Object.keys(e1).find((n1)=>xt(n1) === t1);\n    if (r1) return e1[r1];\n}\nfunction Om(e1, t1) {\n    let r1 = Ot(e1);\n    for (let o1 of t1)switch(o1.kind){\n        case \"UnknownModel\":\n            r1.arguments.getField(o1.modelKey)?.markAsError(), r1.addErrorMessage(()=>`Unknown model name: ${o1.modelKey}.`);\n            break;\n        case \"UnknownField\":\n            r1.arguments.getDeepField([\n                o1.modelKey,\n                o1.fieldName\n            ])?.markAsError(), r1.addErrorMessage(()=>`Model \"${o1.modelKey}\" does not have a field named \"${o1.fieldName}\".`);\n            break;\n        case \"RelationInOmit\":\n            r1.arguments.getDeepField([\n                o1.modelKey,\n                o1.fieldName\n            ])?.markAsError(), r1.addErrorMessage(()=>'Relations are already excluded by default and can not be specified in \"omit\".');\n            break;\n        case \"InvalidFieldValue\":\n            r1.arguments.getDeepFieldValue([\n                o1.modelKey,\n                o1.fieldName\n            ])?.markAsError(), r1.addErrorMessage(()=>\"Omit field option value must be a boolean.\");\n            break;\n    }\n    let { message: n1, args: i1 } = En(r1, \"colorless\");\n    return `Error validating \"omit\" option:\n\n${i1}\n\n${n1}`;\n}\nfunction Ql(e1) {\n    return e1.length === 0 ? Promise.resolve([]) : new Promise((t1, r1)=>{\n        let n1 = new Array(e1.length), i1 = null, o1 = !1, s1 = 0, a1 = ()=>{\n            o1 || (s1++, s1 === e1.length && (o1 = !0, i1 ? r1(i1) : t1(n1)));\n        }, l1 = (u1)=>{\n            o1 || (o1 = !0, r1(u1));\n        };\n        for(let u1 = 0; u1 < e1.length; u1++)e1[u1].then((c1)=>{\n            n1[u1] = c1, a1();\n        }, (c1)=>{\n            if (!Nn(c1)) {\n                l1(c1);\n                return;\n            }\n            c1.batchRequestIdx === u1 ? l1(c1) : (i1 || (i1 = c1), a1());\n        });\n    });\n}\nvar tt = L(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar km = {\n    requestArgsToMiddlewareArgs: (e1)=>e1,\n    middlewareArgsToRequestArgs: (e1)=>e1\n}, Dm = Symbol.for(\"prisma.client.transaction.id\"), _m = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction Yl(e1) {\n    class t1 {\n        constructor(n1){\n            this._originalClient = this;\n            this._middlewares = new Ln;\n            this._createPrismaPromise = po();\n            this.$extends = Ia;\n            e1 = n1?.__internal?.configOverride?.(e1) ?? e1, Ba(e1), n1 && Gl(n1, e1);\n            let i1 = new Kl.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = kt.empty(), this._previewFeatures = Fn(e1), this._clientVersion = e1.clientVersion ?? $l, this._activeProvider = e1.activeProvider, this._globalOmit = n1?.omit, this._tracingHelper = Il(this._previewFeatures);\n            let o1 = {\n                rootEnvPath: e1.relativeEnvPaths.rootEnvPath && Fr.default.resolve(e1.dirname, e1.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e1.relativeEnvPaths.schemaEnvPath && Fr.default.resolve(e1.dirname, e1.relativeEnvPaths.schemaEnvPath)\n            }, s1;\n            if (n1?.adapter) {\n                s1 = qi(n1.adapter);\n                let l1 = e1.activeProvider === \"postgresql\" ? \"postgres\" : e1.activeProvider;\n                if (s1.provider !== l1) throw new R(`The Driver Adapter \\`${s1.adapterName}\\`, based on \\`${s1.provider}\\`, is not compatible with the provider \\`${l1}\\` specified in the Prisma schema.`, this._clientVersion);\n                if (n1.datasources || n1.datasourceUrl !== void 0) throw new R(\"Custom datasource configuration is not compatible with Prisma Driver Adapters. Please define the database connection string directly in the Driver Adapter configuration.\", this._clientVersion);\n            }\n            let a1 = !s1 && zt(o1, {\n                conflictCheck: \"none\"\n            }) || e1.injectableEdgeEnv?.();\n            try {\n                let l1 = n1 ?? {}, u1 = l1.__internal ?? {}, c1 = u1.debug === !0;\n                c1 && L.enable(\"prisma:client\");\n                let p1 = Fr.default.resolve(e1.dirname, e1.relativePath);\n                zl.default.existsSync(p1) || (p1 = e1.dirname), tt(\"dirname\", e1.dirname), tt(\"relativePath\", e1.relativePath), tt(\"cwd\", p1);\n                let d1 = u1.engine || {};\n                if (l1.errorFormat ? this._errorFormat = l1.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e1.runtimeDataModel, this._engineConfig = {\n                    cwd: p1,\n                    dirname: e1.dirname,\n                    enableDebugLogs: c1,\n                    allowTriggerPanic: d1.allowTriggerPanic,\n                    datamodelPath: Fr.default.join(e1.dirname, e1.filename ?? \"schema.prisma\"),\n                    prismaPath: d1.binaryPath ?? void 0,\n                    engineEndpoint: d1.endpoint,\n                    generator: e1.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l1.log && kl(l1.log),\n                    logQueries: l1.log && !!(typeof l1.log == \"string\" ? l1.log === \"query\" : l1.log.find((f1)=>typeof f1 == \"string\" ? f1 === \"query\" : f1.level === \"query\")),\n                    env: a1?.parsed ?? {},\n                    flags: [],\n                    engineWasm: e1.engineWasm,\n                    clientVersion: e1.clientVersion,\n                    engineVersion: e1.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e1.activeProvider,\n                    inlineSchema: e1.inlineSchema,\n                    overrideDatasources: Ua(l1, e1.datasourceNames),\n                    inlineDatasources: e1.inlineDatasources,\n                    inlineSchemaHash: e1.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    transactionOptions: {\n                        maxWait: l1.transactionOptions?.maxWait ?? 2e3,\n                        timeout: l1.transactionOptions?.timeout ?? 5e3,\n                        isolationLevel: l1.transactionOptions?.isolationLevel\n                    },\n                    logEmitter: i1,\n                    isBundled: e1.isBundled,\n                    adapter: s1\n                }, this._accelerateEngineConfig = {\n                    ...this._engineConfig,\n                    accelerateUtils: {\n                        resolveDatasourceUrl: Nt,\n                        getBatchRequestPayload: Ft,\n                        prismaGraphQLToJSError: st,\n                        PrismaClientUnknownRequestError: B,\n                        PrismaClientInitializationError: R,\n                        PrismaClientKnownRequestError: V,\n                        debug: L(\"prisma:client:accelerateEngine\"),\n                        engineVersion: Wl.version,\n                        clientVersion: e1.clientVersion\n                    }\n                }, tt(\"clientVersion\", e1.clientVersion), this._engine = hl(e1, this._engineConfig), this._requestHandler = new $n(this, i1), l1.log) for (let f1 of l1.log){\n                    let g1 = typeof f1 == \"string\" ? f1 : f1.emit === \"stdout\" ? f1.level : null;\n                    g1 && this.$on(g1, (h1)=>{\n                        er.log(`${er.tags[g1] ?? \"\"}`, h1.message || h1.query);\n                    });\n                }\n                this._metrics = new Dt(this._engine);\n            } catch (l1) {\n                throw l1.clientVersion = this._clientVersion, l1;\n            }\n            return this._appliedParent = yr(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n1) {\n            this._middlewares.use(n1);\n        }\n        $on(n1, i1) {\n            n1 === \"beforeExit\" ? this._engine.onBeforeExit(i1) : n1 && this._engineConfig.logEmitter.on(n1, i1);\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            } finally{\n                Ao();\n            }\n        }\n        $executeRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: co({\n                    clientMethod: i1,\n                    activeProvider: a1\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            });\n        }\n        $executeRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) {\n                    let [s1, a1] = Jl(n1, i1);\n                    return uo(this._activeProvider, s1.text, s1.values, Array.isArray(n1) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o1, \"$executeRaw\", s1, a1);\n                }\n                throw new J(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>(uo(this._activeProvider, n1, i1, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o1, \"$executeRawUnsafe\", [\n                    n1,\n                    ...i1\n                ])));\n        }\n        $runCommandRaw(n1) {\n            if (e1.activeProvider !== \"mongodb\") throw new J(`The ${e1.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i1)=>this._request({\n                    args: n1,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: yl,\n                    callsite: Ze(this._errorFormat),\n                    transaction: i1\n                }));\n        }\n        async $queryRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: co({\n                    clientMethod: i1,\n                    activeProvider: a1\n                }),\n                callsite: Ze(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            });\n        }\n        $queryRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) return this.$queryRawInternal(o1, \"$queryRaw\", ...Jl(n1, i1));\n                throw new J(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawTyped(n1) {\n            return this._createPrismaPromise((i1)=>{\n                if (!this._hasPreviewFlag(\"typedSql\")) throw new J(\"`typedSql` preview feature must be enabled in order to access $queryRawTyped API\", {\n                    clientVersion: this._clientVersion\n                });\n                return this.$queryRawInternal(i1, \"$queryRawTyped\", n1);\n            });\n        }\n        $queryRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>this.$queryRawInternal(o1, \"$queryRawUnsafe\", [\n                    n1,\n                    ...i1\n                ]));\n        }\n        _transactionWithArray({ promises: n1, options: i1 }) {\n            let o1 = _m.nextId(), s1 = Ol(n1.length), a1 = n1.map((l1, u1)=>{\n                if (l1?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c1 = i1?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel, p1 = {\n                    kind: \"batch\",\n                    id: o1,\n                    index: u1,\n                    isolationLevel: c1,\n                    lock: s1\n                };\n                return l1.requestTransaction?.(p1) ?? l1;\n            });\n            return Ql(a1);\n        }\n        async _transactionWithCallback({ callback: n1, options: i1 }) {\n            let o1 = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s1 = {\n                maxWait: i1?.maxWait ?? this._engineConfig.transactionOptions.maxWait,\n                timeout: i1?.timeout ?? this._engineConfig.transactionOptions.timeout,\n                isolationLevel: i1?.isolationLevel ?? this._engineConfig.transactionOptions.isolationLevel\n            }, a1 = await this._engine.transaction(\"start\", o1, s1), l1;\n            try {\n                let u1 = {\n                    kind: \"itx\",\n                    ...a1\n                };\n                l1 = await n1(this._createItxClient(u1)), await this._engine.transaction(\"commit\", o1, a1);\n            } catch (u1) {\n                throw await this._engine.transaction(\"rollback\", o1, a1).catch(()=>{}), u1;\n            }\n            return l1;\n        }\n        _createItxClient(n1) {\n            return yr(Se(Aa(this), [\n                re(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n1)),\n                re(\"_createPrismaPromise\", ()=>po(n1)),\n                re(Dm, ()=>n1.id),\n                _t(vl)\n            ]));\n        }\n        $transaction(n1, i1) {\n            let o1;\n            typeof n1 == \"function\" ? this._engineConfig.adapter?.adapterName === \"@prisma/adapter-d1\" ? o1 = ()=>{\n                throw new Error(\"Cloudflare D1 does not support interactive transactions. We recommend you to refactor your queries with that limitation in mind, and use batch transactions with `prisma.$transactions([])` where applicable.\");\n            } : o1 = ()=>this._transactionWithCallback({\n                    callback: n1,\n                    options: i1\n                }) : o1 = ()=>this._transactionWithArray({\n                    promises: n1,\n                    options: i1\n                });\n            let s1 = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s1, o1);\n        }\n        _request(n1) {\n            n1.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i1 = n1.middlewareArgsMapper ?? km, o1 = {\n                args: i1.requestArgsToMiddlewareArgs(n1.args),\n                dataPath: n1.dataPath,\n                runInTransaction: !!n1.transaction,\n                action: n1.action,\n                model: n1.model\n            }, s1 = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o1.action,\n                        model: o1.model,\n                        name: o1.model ? `${o1.model}.${o1.action}` : o1.action\n                    }\n                }\n            }, a1 = -1, l1 = async (u1)=>{\n                let c1 = this._middlewares.get(++a1);\n                if (c1) return this._tracingHelper.runInChildSpan(s1.middleware, (O1)=>c1(u1, (T1)=>(O1?.end(), l1(T1))));\n                let { runInTransaction: p1, args: d1, ...f1 } = u1, g1 = {\n                    ...n1,\n                    ...f1\n                };\n                d1 && (g1.args = i1.middlewareArgsToRequestArgs(d1)), n1.transaction !== void 0 && p1 === !1 && delete g1.transaction;\n                let h1 = await Na(this, g1);\n                return g1.model ? Da({\n                    result: h1,\n                    modelName: g1.model,\n                    args: g1.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel,\n                    globalOmit: this._globalOmit\n                }) : h1;\n            };\n            return this._tracingHelper.runInChildSpan(s1.operation, ()=>new Hl.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l1(o1)));\n        }\n        async _executeRequest({ args: n1, clientMethod: i1, dataPath: o1, callsite: s1, action: a1, model: l1, argsMapper: u1, transaction: c1, unpacker: p1, otelParentCtx: d1, customDataProxyFetch: f1 }) {\n            try {\n                n1 = u1 ? u1(n1) : n1;\n                let g1 = {\n                    name: \"serialize\"\n                }, h1 = this._tracingHelper.runInChildSpan(g1, ()=>vn({\n                        modelName: l1,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a1,\n                        args: n1,\n                        clientMethod: i1,\n                        callsite: s1,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion,\n                        previewFeatures: this._previewFeatures,\n                        globalOmit: this._globalOmit\n                    }));\n                return L.enabled(\"prisma:client\") && (tt(\"Prisma Client call:\"), tt(`prisma.${i1}(${ha(n1)})`), tt(\"Generated request:\"), tt(JSON.stringify(h1, null, 2) + `\n`)), c1?.kind === \"batch\" && await c1.lock, this._requestHandler.request({\n                    protocolQuery: h1,\n                    modelName: l1,\n                    action: a1,\n                    clientMethod: i1,\n                    dataPath: o1,\n                    callsite: s1,\n                    args: n1,\n                    extensions: this._extensions,\n                    transaction: c1,\n                    unpacker: p1,\n                    otelParentCtx: d1,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    globalOmit: this._globalOmit,\n                    customDataProxyFetch: f1\n                });\n            } catch (g1) {\n                throw g1.clientVersion = this._clientVersion, g1;\n            }\n        }\n        get $metrics() {\n            if (!this._hasPreviewFlag(\"metrics\")) throw new J(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n                clientVersion: this._clientVersion\n            });\n            return this._metrics;\n        }\n        _hasPreviewFlag(n1) {\n            return !!this._engineConfig.previewFeatures?.includes(n1);\n        }\n        $applyPendingMigrations() {\n            return this._engine.applyPendingMigrations();\n        }\n    }\n    return t1;\n}\nfunction Jl(e1, t1) {\n    return Fm(e1) ? [\n        new oe(e1, t1),\n        Rl\n    ] : [\n        e1,\n        Cl\n    ];\n}\nfunction Fm(e1) {\n    return Array.isArray(e1) && Array.isArray(e1.raw);\n}\nvar Lm = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction Zl(e1) {\n    return new Proxy(e1, {\n        get (t1, r1) {\n            if (r1 in t1) return t1[r1];\n            if (!Lm.has(r1)) throw new TypeError(`Invalid enum value: ${String(r1)}`);\n        }\n    });\n}\nfunction Xl(e1) {\n    zt(e1, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@prisma/client/runtime/library.js\n");

/***/ })

};
;